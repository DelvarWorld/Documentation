o ad":[2245]," is also add":[2245],"is also adde":[2245],"s also added":[2245],"also added i":[2245],"lso added in":[2245],"so added in ":[2245],"o added in c":[2245]," added in co":[2245],"added in con":[2245],"dded in cont":[2245],"ded in conti":[2245],"ed in contin":[2245],"d in continu":[2245]," in continua":[2245],"in continuat":[2245],"n continuati":[2245]," continuatio":[2245],"continuation":[2245],"ontinuation ":[2245],"ntinuation t":[2245],"tinuation to":[2245],"inuation to ":[2245],"nuation to c":[2245],"uation to cl":[2245],"ation to clo":[2245],"tion to clos":[2245],"ion to close":[2245],"on to close ":[2245],"n to close t":[2245]," to close th":[2245],"to close the":[2245],"o close the ":[2245]," close the p":[2245],"close the pa":[2245],"lose the pat":[2245],"ose the path":[2245],"se the path.":[2245],"e the path. ":[2245]," the path.  ":[2245],"the path.   ":[2245],"// parameter":[2246],"/ parameters":[2246],"uniform vec2":[2247],"niform vec2 ":[2247],"iform vec2 s":[2247],"form vec2 sc":[2247],"orm vec2 scr":[2247],"rm vec2 scre":[2247],"m vec2 scree":[2247]," vec2 screen":[2247],"vec2 screens":[2247],"ec2 screensi":[2247],"c2 screensiz":[2247],"2 screensize":[2247]," screensize;":[2247],"uniform floa":[2248],"niform float":[2248],"iform float ":[2248],"form float h":[2248],"orm float hi":[2248],"rm float hig":[2248],"m float high":[2248]," float highl":[2248],"float highli":[2248,2249],"loat highlig":[2248,2249],"oat highligh":[2248,2249],"at highlight":[2248,2249],"t highlightt":[2248]," highlightth":[2248],"highlightthr":[2248,2251,2271,2288,2300,2303],"ighlightthre":[2248,2251,2271,2288,2300,2303],"ghlightthres":[2248,2251,2271,2288,2300,2303],"hlightthresh":[2248,2251,2271,2288,2300,2303],"lightthresho":[2248,2251,2271,2288,2300,2303],"htthreshold;":[2248],"t highlights":[2249]," highlights(":[2249,2261],"highlights(v":[2249],"ighlights(ve":[2249],"ghlights(vec":[2249],"hlights(vec3":[2249],"lights(vec3 ":[2249],"ights(vec3 c":[2249],"ghts(vec3 co":[2249],"hts(vec3 col":[2249],"ts(vec3 colo":[2249],"s(vec3 color":[2249],"(vec3 color)":[2249]," return smoo":[2251],"return smoot":[2251],"eturn smooth":[2251],"turn smooths":[2251],"urn smoothst":[2251],"rn smoothste":[2251],"n smoothstep":[2251]," smoothstep(":[2251],"smoothstep(h":[2251],"moothstep(hi":[2251],"oothstep(hig":[2251],"othstep(high":[2251],"thstep(highl":[2251],"hstep(highli":[2251],"step(highlig":[2251],"tep(highligh":[2251],"ep(highlight":[2251],"p(highlightt":[2251],"(highlightth":[2251],"htthreshold,":[2251],"tthreshold, ":[2251],"threshold, 1":[2251],"hreshold, 1.":[2251],"reshold, 1.0":[2251],"eshold, 1.0,":[2251],"shold, 1.0, ":[2251],"hold, 1.0, d":[2251],"old, 1.0, do":[2251],"ld, 1.0, dot":[2251],"d, 1.0, dot(":[2251],", 1.0, dot(c":[2251]," 1.0, dot(co":[2251],"1.0, dot(col":[2251],".0, dot(colo":[2251],"0, dot(color":[2251],", dot(color,":[2251]," dot(color, ":[2251],"dot(color, v":[2251],"ot(color, ve":[2251],"t(color, vec":[2251],"(color, vec3":[2251],"color, vec3(":[2251],"olor, vec3(0":[2251],"lor, vec3(0.":[2251],"or, vec3(0.3":[2251],"r, vec3(0.3,":[2251],", vec3(0.3, ":[2251]," vec3(0.3, 0":[2251],"vec3(0.3, 0.":[2251],"ec3(0.3, 0.5":[2251],"c3(0.3, 0.59":[2251],"3(0.3, 0.59,":[2251],"(0.3, 0.59, ":[2251],"0.3, 0.59, 0":[2251],".3, 0.59, 0.":[2251],"3, 0.59, 0.1":[2251],", 0.59, 0.11":[2251]," 0.59, 0.11)":[2251],"0.59, 0.11))":[2251],".59, 0.11)))":[2251],"59, 0.11)));":[2251],"void main(vo":[2253,2383,2401,2532,2550],"oid main(voi":[2253,2383,2401,2532,2550],"id main(void":[2253,2383,2401,2532,2550],"d main(void)":[2253,2383,2401,2532,2550]," main(void) ":[2253,2383,2401,2532,2550]," vec2 texels":[2255],"vec2 texelsi":[2255],"ec2 texelsiz":[2255],"c2 texelsize":[2255],"2 texelsize ":[2255]," texelsize =":[2255],"texelsize = ":[2255],"exelsize = v":[2255],"xelsize = ve":[2255],"elsize = vec":[2255],"lsize = vec2":[2255],"size = vec2(":[2255],"ize = vec2(1":[2255],"ze = vec2(1.":[2255],"e = vec2(1.0":[2255]," = vec2(1.0 ":[2255],"= vec2(1.0 /":[2255]," vec2(1.0 / ":[2255],"vec2(1.0 / s":[2255],"ec2(1.0 / sc":[2255],"c2(1.0 / scr":[2255],"2(1.0 / scre":[2255],"(1.0 / scree":[2255],"1.0 / screen":[2255],".0 / screens":[2255],"0 / screensi":[2255]," / screensiz":[2255],"/ screensize":[2255]," screensize.":[2255],"screensize.x":[2255],"creensize.x,":[2255],"reensize.x, ":[2255],"eensize.x, 1":[2255],"ensize.x, 1.":[2255],"nsize.x, 1.0":[2255],"size.x, 1.0 ":[2255],"ize.x, 1.0 /":[2255],"ze.x, 1.0 / ":[2255],"e.x, 1.0 / s":[2255],".x, 1.0 / sc":[2255],"x, 1.0 / scr":[2255],", 1.0 / scre":[2255]," 1.0 / scree":[2255],"screensize.y":[2255],"creensize.y)":[2255],"reensize.y);":[2255]," vec4 baseco":[2256],"vec4 basecol":[2256],"ec4 basecolo":[2256],"c4 basecolor":[2256],"4 basecolor ":[2256]," basecolor =":[2256],"basecolor = ":[2256],"asecolor = t":[2256],"secolor = te":[2256],"ecolor = tex":[2256],"color = text":[2256],"olor = textu":[2256],"lor = textur":[2256],"or = texture":[2256],"r = texture2":[2256]," = texture2d":[2256],"= texture2d(":[2256,2257,2258,2259]," texture2d(t":[2256,2257,2258,2259],"texture2d(te":[2256,2257,2258,2259],"exture2d(tex":[2256,2257,2258,2259],"xture2d(text":[2256,2257,2258,2259],"ture2d(textu":[2256,2257,2258,2259],"ure2d(textur":[2256,2257,2258,2259],"re2d(texture":[2256,2257,2258,2259],"e2d(textures":[2256,2257,2258,2259],"2d(texturesa":[2256,2257,2258,2259],"d(texturesam":[2256,2257,2258,2259],"(texturesamp":[2256,2257,2258,2259],"turesampler,":[2256,2257,2258,2259],"uresampler, ":[2256,2257,2258,2259],"resampler, v":[2256,2257,2258,2259],"esampler, vu":[2256,2257,2258,2259],"sampler, vuv":[2256,2257,2258,2259],"ampler, vuv ":[2256,2257,2258,2259],"mpler, vuv +":[2256,2257,2258,2259],"pler, vuv + ":[2256,2257,2258,2259],"ler, vuv + v":[2256,2257,2258,2259],"er, vuv + ve":[2256,2257,2258,2259],"r, vuv + vec":[2256,2257,2258,2259],", vuv + vec2":[2256,2257,2258,2259]," vuv + vec2(":[2256,2257,2258,2259],"vuv + vec2(-":[2256,2259],"uv + vec2(-1":[2256,2259],"v + vec2(-1.":[2256,2259]," + vec2(-1.0":[2256,2259],"+ vec2(-1.0,":[2256,2259]," vec2(-1.0, ":[2256,2259],"vec2(-1.0, -":[2256],"ec2(-1.0, -1":[2256],"c2(-1.0, -1.":[2256],"2(-1.0, -1.0":[2256],"(-1.0, -1.0)":[2256],"-1.0, -1.0) ":[2256],"1.0, -1.0) *":[2256,2257],".0, -1.0) * ":[2256,2257],"0, -1.0) * t":[2256,2257],", -1.0) * te":[2256,2257]," -1.0) * tex":[2256,2257],"-1.0) * texe":[2256,2257],"1.0) * texel":[2256,2257,2258,2259],".0) * texels":[2256,2257,2258,2259],"0) * texelsi":[2256,2257,2258,2259],") * texelsiz":[2256,2257,2258,2259]," * texelsize":[2256,2257,2258,2259],"* texelsize)":[2256,2257,2258,2259]," texelsize) ":[2256,2257,2258,2259],"texelsize) *":[2256,2257,2258,2259],"exelsize) * ":[2256,2257,2258,2259],"xelsize) * 0":[2256,2257,2258,2259],"elsize) * 0.":[2256,2257,2258,2259],"lsize) * 0.2":[2256,2257,2258,2259],"size) * 0.25":[2256,2257,2258,2259],"ize) * 0.25;":[2256,2257,2258,2259]," basecolor +":[2257,2258,2259],"basecolor +=":[2257,2258,2259],"asecolor += ":[2257,2258,2259],"secolor += t":[2257,2258,2259],"ecolor += te":[2257,2258,2259],"color += tex":[2257,2258,2259],"olor += text":[2257,2258,2259],"lor += textu":[2257,2258,2259],"or += textur":[2257,2258,2259],"r += texture":[2257,2258,2259]," += texture2":[2257,2258,2259],"+= texture2d":[2257,2258,2259],"vuv + vec2(1":[2257,2258],"uv + vec2(1.":[2257,2258],"v + vec2(1.0":[2257,2258]," + vec2(1.0,":[2257,2258],"+ vec2(1.0, ":[2257,2258]," vec2(1.0, -":[2257],"vec2(1.0, -1":[2257],"ec2(1.0, -1.":[2257],"c2(1.0, -1.0":[2257],"2(1.0, -1.0)":[2257],"(1.0, -1.0) ":[2257]," vec2(1.0, 1":[2258],"vec2(1.0, 1.":[2258],"ec2(1.0, 1.0":[2258],"c2(1.0, 1.0)":[2258],"2(1.0, 1.0) ":[2258],"(1.0, 1.0) *":[2258],"1.0, 1.0) * ":[2258,2259],".0, 1.0) * t":[2258,2259],"0, 1.0) * te":[2258,2259],", 1.0) * tex":[2258,2259]," 1.0) * texe":[2258,2259],"vec2(-1.0, 1":[2259],"ec2(-1.0, 1.":[2259],"c2(-1.0, 1.0":[2259],"2(-1.0, 1.0)":[2259],"(-1.0, 1.0) ":[2259],"-1.0, 1.0) *":[2259]," basecolor.a":[2261],"basecolor.a ":[2261],"asecolor.a =":[2261],"secolor.a = ":[2261],"ecolor.a = h":[2261],"color.a = hi":[2261],"olor.a = hig":[2261],"lor.a = high":[2261],"or.a = highl":[2261],"r.a = highli":[2261],".a = highlig":[2261],"a = highligh":[2261]," = highlight":[2261],"= highlights":[2261],"highlights(b":[2261],"ighlights(ba":[2261],"ghlights(bas":[2261],"hlights(base":[2261],"lights(basec":[2261],"ights(baseco":[2261],"ghts(basecol":[2261],"hts(basecolo":[2261],"ts(basecolor":[2261],"s(basecolor.":[2261],"(basecolor.r":[2261],"basecolor.rg":[2261],"asecolor.rgb":[2261],"secolor.rgb)":[2261],"ecolor.rgb);":[2261]," gl_fragcolo":[2262],"gl_fragcolor":[2262,2385,2388,2403,2533,2551],"l_fragcolor ":[2262,2385,2388,2403,2533,2551],"_fragcolor =":[2262,2385,2403,2533,2551],"fragcolor = ":[2262,2385,2403,2533,2551],"ragcolor = b":[2262],"agcolor = ba":[2262],"gcolor = bas":[2262],"color = base":[2262],"olor = basec":[2262],"lor = baseco":[2262],"or = basecol":[2262],"r = basecolo":[2262]," = basecolor":[2262],"= basecolor;":[2262],"your shader ":[2265,2537,2538],"our shader m":[2265],"ur shader mu":[2265],"r shader mus":[2265]," shader must":[2265],"shader must ":[2265],"hader must d":[2265],"ader must de":[2265],"der must def":[2265],"er must defi":[2265],"r must defin":[2265]," must define":[2265],"must define ":[2265],"ust define t":[2265],"st define th":[2265],"t define the":[2265],"define the f":[2265],"efine the fo":[2265],"fine the fol":[2265],"ine the foll":[2265],"ne the follo":[2265]," following v":[2265],"following va":[2265],"ollowing val":[2265],"llowing valu":[2265],"lowing value":[2265],"owing values":[2265],"wing values:":[2265],"* precision ":[2266]," precision m":[2266],"precision mu":[2266],"recision mus":[2266],"ecision must":[2266],"cision must ":[2266],"ision must b":[2266],"sion must be":[2266],"ion must be ":[2266],"on must be s":[2266],"n must be se":[2266]," must be set":[2266],"must be set ":[2266],"ust be set t":[2266],"st be set to":[2266],"t be set to ":[2266]," be set to h":[2266],"be set to hi":[2266],"e set to hig":[2266]," set to high":[2266],"set to highp":[2266],"* a varying ":[2267]," a varying v":[2267],"a varying vu":[2267]," varying vuv":[2267],"varying vuv ":[2267],"arying vuv m":[2267],"rying vuv mu":[2267],"ying vuv mus":[2267],"ing vuv must":[2267],"ng vuv must ":[2267],"g vuv must b":[2267]," vuv must be":[2267],"vuv must be ":[2267],"uv must be u":[2267],"v must be us":[2267]," must be use":[2267],"must be used":[2267],"ust be used ":[2267],"st be used t":[2267],"t be used to":[2267],"ed to read t":[2267],"d to read te":[2267]," to read tex":[2267],"to read text":[2267],"o read textu":[2267]," read textur":[2267],"read texture":[2267],"ead texture ":[2267],"ad texture c":[2267],"d texture co":[2267]," texture coo":[2267],"texture coor":[2267],"exture coord":[2267],"xture coordi":[2267],"ture coordin":[2267],"ure coordina":[2267],"re coordinat":[2267],"the first sa":[2268],"he first sam":[2268],"e first samp":[2268]," first sampl":[2268],"first sample":[2268],"irst sampler":[2268],"rst sampler ":[2268],"st sampler m":[2268],"t sampler mu":[2268]," sampler mus":[2268],"sampler must":[2268],"ampler must ":[2268],"mpler must b":[2268],"pler must be":[2268],"ler must be ":[2268],"er must be n":[2268],"r must be na":[2268]," must be nam":[2268],"must be name":[2268],"ust be named":[2268],"st be named ":[2268],"t be named t":[2268]," be named te":[2268],"be named tex":[2268],"e named text":[2268]," named textu":[2268],"named textur":[2268],"amed texture":[2268],"med textures":[2268],"ed texturesa":[2268],"once you cre":[2269],"nce you crea":[2269],"ce you creat":[2269],"e you create":[2269],"ou created y":[2269],"u created yo":[2269]," created you":[2269],"created your":[2269],"reated your ":[2269],"eated your s":[2269],"ated your sa":[2269],"ted your sam":[2269],"ed your samp":[2269],"d your sampl":[2269]," your sample":[2269],"your sampler":[2269],"our sampler,":[2269],"ur sampler, ":[2269],"r sampler, y":[2269]," sampler, yo":[2269],"sampler, you":[2269],"ampler, you ":[2269],"mpler, you c":[2269],"pler, you ca":[2269],"ler, you can":[2269],"n create a p":[2269]," create a po":[2269],"create a pos":[2269],"reate a post":[2269],"eate a postp":[2269],"ate a postpr":[2269],"te a postpro":[2269],"e a postproc":[2269],"postprocess:":[2269],"stprocess(\"d":[2271,2300],"tprocess(\"do":[2271,2300],"process(\"dow":[2271,2300],"rocess(\"down":[2271,2300],"ocess(\"down ":[2271,2300],"cess(\"down s":[2271,2300],"ess(\"down sa":[2271,2300],"ss(\"down sam":[2271,2300],"s(\"down samp":[2271,2300],"(\"down sampl":[2271,2300],"\"down sample":[2271,2300],"down sample\"":[2271,2300],"own sample\",":[2271,2300],"wn sample\", ":[2271,2300],"n sample\", \"":[2271,2300]," sample\", \".":[2271,2300],"sample\", \"./":[2271,2300],"ample\", \"./s":[2271,2300],"mple\", \"./sc":[2271,2300],"ple\", \"./sce":[2271,2300],"le\", \"./scen":[2271,2300],"e\", \"./scene":[2271,2300,2307],"\", \"./scenes":[2271,2300,2307],", \"./scenes/":[2271,2300,2307]," \"./scenes/c":[2271,2300,2307],"\"./scenes/cu":[2271,2300,2307],"./scenes/cus":[2271,2300,2307],"/scenes/cust":[2271,2300,2307],"es/customs/p":[2271,2300,2307],"s/customs/po":[2271,2300,2307],"/customs/pos":[2271,2300,2307],"customs/post":[2271,2300,2307],"ustoms/postp":[2271,2300,2307],"stoms/postpr":[2271,2300,2307],"toms/postpro":[2271,2300,2307],"oms/postproc":[2271,2300,2307],"ms/postproce":[2271,2300,2307],"s/postproces":[2271,2300,2307],"/postprocess":[2271,2300,2307],"stprocesses/":[2271,2300,2307],"tprocesses/d":[2271,2300],"processes/do":[2271,2300],"rocesses/dow":[2271,2300],"ocesses/down":[2271,2300],"cesses/downs":[2271,2300],"esses/downsa":[2271,2300],"sses/downsam":[2271,2300],"ses/downsamp":[2271,2300],"es/downsampl":[2271,2300],"s/downsample":[2271,2300],"/downsample\"":[2271,2300],"downsample\",":[2271,2300],"ownsample\", ":[2271,2300],"wnsample\", [":[2271,2300],"nsample\", [\"":[2271,2300],"sample\", [\"s":[2271,2300],"ample\", [\"sc":[2271,2300],"mple\", [\"scr":[2271,2300],"ple\", [\"scre":[2271,2300],"le\", [\"scree":[2271,2300],"e\", [\"screen":[2271,2300],"\", [\"screens":[2271,2300],", [\"screensi":[2271,2300]," [\"screensiz":[2271,2300],"[\"screensize":[2271,2300],"\"screensize\"":[2271,2287,2300,2302],"screensize\",":[2271,2287,2300,2302],"creensize\", ":[2271,2287,2300,2302],"reensize\", \"":[2271,2300],"eensize\", \"h":[2271,2300],"ensize\", \"hi":[2271,2300],"nsize\", \"hig":[2271,2300],"size\", \"high":[2271,2300],"ize\", \"highl":[2271,2300],"ze\", \"highli":[2271,2300],"e\", \"highlig":[2271,2300],"\", \"highligh":[2271,2300,2307],", \"highlight":[2271,2300,2307]," \"highlightt":[2271,2300],"\"highlightth":[2271,2288,2300,2303],"htthreshold\"":[2271,2288,2300,2303],"tthreshold\"]":[2271,2300],"threshold\"],":[2271,2300],"hreshold\"], ":[2271,2300],"reshold\"], n":[2271,2300],"eshold\"], nu":[2271,2300],"shold\"], nul":[2271,2300],"hold\"], null":[2271,2300],"old\"], null,":[2271,2300],"ld\"], null, ":[2271,2300],"d\"], null, 0":[2271,2300],"\"], null, 0.":[2271,2300],"], null, 0.2":[2271,2300],", null, 0.25":[2271,2300]," null, 0.25,":[2271,2300],"null, 0.25, ":[2271,2300],"ull, 0.25, n":[2271],"ll, 0.25, nu":[2271],"l, 0.25, nul":[2271],".25, null, b":[2271],"25, null, ba":[2271],"5, null, bab":[2271],"l, babylon.t":[2271],"e, engine, t":[2271]," to specify:":[2273],"* the url of":[2275],"url of the s":[2275],"rl of the sh":[2275],"l of the sha":[2275]," of the shad":[2275],"of the shade":[2275],"f the shader":[2275]," the shader ":[2275,2367,2375,2560],"the shader c":[2275,2367,2375,2560],"he shader co":[2275,2367,2375,2560],"e shader cod":[2275,2283,2367,2375,2560],"shader coder":[2275],"hader coder*":[2275]," a list of y":[2276],"a list of yo":[2276]," list of you":[2276],"list of your":[2276],"ist of your ":[2276],"st of your u":[2276],"t of your un":[2276]," of your uni":[2276],"of your unif":[2276],"f your unifo":[2276]," your unifor":[2276],"your uniform":[2276],"our uniforms":[2276],"ur uniforms ":[2276],"r uniforms p":[2276]," uniforms pa":[2276],"uniforms par":[2276],"niforms para":[2276],"iforms param":[2276],"forms parame":[2276],"orms paramet":[2276],"rms paramete":[2276],"ms parameter":[2276]," a list of a":[2277],"a list of ad":[2277]," list of add":[2277],"list of addi":[2277],"ist of addit":[2277],"st of additi":[2277],"t of additio":[2277]," of addition":[2277],"of additiona":[2277],"f additional":[2277],"additional s":[2277],"dditional sa":[2277],"ditional sam":[2277],"itional samp":[2277],"tional sampl":[2277],"ional sample":[2277],"onal sampler":[2277],"nal samplers":[2277],"* the parent":[2279],"the parent c":[2279],"he parent ca":[2279],"e parent cam":[2279]," parent came":[2279],"parent camer":[2279],"arent camera":[2279],"ent camera (":[2279],"nt camera (d":[2279],"t camera (de":[2279]," camera (dep":[2279],"camera (depr":[2279],"amera (depre":[2279],"mera (deprec":[2279],"era (depreca":[2279],"ra (deprecat":[2279],"a (deprecate":[2279]," (deprecated":[2279],"(deprecated)":[2279],"* the sampli":[2280]," the samplin":[2280],"the sampling":[2280],"he sampling ":[2280],"e sampling m":[2280]," sampling mo":[2280],"sampling mod":[2280],"ampling mode":[2280],"* the engine":[2281],"* can be reu":[2282],"can be reusa":[2282],"an be reusab":[2282],"n be reusabl":[2282]," be reusable":[2282],"(*please see":[2283],"*please see ":[2283],"se see the l":[2283],"e see the li":[2283]," see the lin":[2283],"see the link":[2283],"ee the link ":[2283],"e the link a":[2283]," the link at":[2283],"the link at ":[2283],"he link at t":[2283],"e link at th":[2283]," link at the":[2283],"link at the ":[2283],"ink at the b":[2283],"nk at the bo":[2283],"k at the bot":[2283],"om of this d":[2283],"m of this do":[2283]," of this doc":[2283],"of this docu":[2283],"f this docum":[2283]," this docume":[2283],"this documen":[2283],"his document":[2283],"is document ":[2283],"s document t":[2283]," document to":[2283],"document to ":[2283],"ocument to l":[2283],"cument to le":[2283],"ument to lea":[2283],"ment to lear":[2283],"ent to learn":[2283],"nt to learn ":[2283],"t to learn m":[2283]," to learn mo":[2283],"to learn mor":[2283],"o learn more":[2283]," learn more ":[2283],"learn more w":[2283],"earn more wa":[2283],"arn more way":[2283],"rn more ways":[2283],"n more ways ":[2283]," more ways t":[2283],"more ways to":[2283],"ore ways to ":[2283],"re ways to s":[2283],"e ways to st":[2283]," ways to sto":[2283],"ways to stor":[2283],"ays to store":[2283],"ys to store ":[2283],"s to store s":[2283]," to store sh":[2283],"to store sha":[2283],"o store shad":[2283]," store shade":[2283],"store shader":[2283],"tore shader ":[2283],"ore shader c":[2283],"re shader co":[2283],"shader code.":[2283,2367,2560],"hader code.)":[2283],"you can set ":[2284],"ou can set u":[2284],"u can set up":[2284]," can set up ":[2284],"can set up t":[2284],"an set up th":[2284],"n set up thi":[2284]," set up thin":[2284],"set up thing":[2284],"et up things":[2284],"t up things ":[2284]," up things b":[2284],"up things be":[2284],"p things bef":[2284]," things befo":[2284],"things befor":[2284],"hings before":[2284],"ings before ":[2284],"ngs before t":[2284],"gs before th":[2284],"s before the":[2284],"re the postp":[2284],"e the postpr":[2284],"rocess is ap":[2284],"ocess is app":[2284],"cess is appl":[2284],"ess is appli":[2284],"ss is applie":[2284],"s is applied":[2284],"applied by s":[2284],"pplied by sp":[2284],"plied by spe":[2284],"lied by spec":[2284],"ied by speci":[2284],"ed by specif":[2284],"d by specify":[2284]," by specifyi":[2284],"by specifyin":[2284],"y specifying":[2284]," specifying ":[2284],"specifying a":[2284],"pecifying a ":[2284],"ecifying a o":[2284],"cifying a on":[2284],"ifying a ona":[2284],"fying a onap":[2284],"ying a onapp":[2284],"ing a onappl":[2284],"ng a onapply":[2284],"g a onapply ":[2284]," a onapply f":[2284],"a onapply fu":[2284]," onapply fun":[2284],"onapply func":[2284],"napply funct":[2284],"apply functi":[2284],"pply functio":[2284],"ply function":[2284],"ly function:":[2284],"ostprocess.o":[2286],"stprocess.on":[2286],"tprocess.ona":[2286],"process.onap":[2286],"rocess.onapp":[2286],"ocess.onappl":[2286],"cess.onapply":[2286],"ess.onapply ":[2286],"ss.onapply =":[2286],"s.onapply = ":[2286],".onapply = f":[2286,2301,2308],"onapply = fu":[2286,2301,2308],"napply = fun":[2286,2301,2308],"function (ef":[2286,2301,2308],"unction (eff":[2286,2301,2308],"nction (effe":[2286,2301,2308],"ction (effec":[2286,2301,2308],"tion (effect":[2286,2301,2308],"ion (effect)":[2286,2301,2308],"on (effect) ":[2286,2301,2308],"n (effect) {":[2286,2301,2308],"    effect.s":[2287,2288,2302,2303,2309,2310,2311,2312],"   effect.se":[2287,2288,2302,2303,2309,2310,2311,2312],"  effect.set":[2287,2288,2302,2303,2309,2310,2311,2312]," effect.setf":[2287,2288,2302,2303,2310,2311,2312],"effect.setfl":[2287,2288,2302,2303,2310,2311,2312],"ffect.setflo":[2287,2288,2302,2303,2310,2311,2312],"fect.setfloa":[2287,2288,2302,2303,2310,2311,2312],"ect.setfloat":[2287,2288,2302,2303,2310,2311,2312],"ct.setfloat2":[2287,2302],"t.setfloat2(":[2287,2302],".setfloat2(\"":[2287,2302],"setfloat2(\"s":[2287,2302],"etfloat2(\"sc":[2287,2302],"tfloat2(\"scr":[2287,2302],"float2(\"scre":[2287,2302],"loat2(\"scree":[2287,2302],"oat2(\"screen":[2287,2302],"at2(\"screens":[2287,2302],"t2(\"screensi":[2287,2302],"2(\"screensiz":[2287,2302],"(\"screensize":[2287,2302],"reensize\", p":[2287,2302],"eensize\", po":[2287,2302],"ensize\", pos":[2287,2302],"nsize\", post":[2287,2302],"size\", postp":[2287,2302],"ize\", postpr":[2287,2302],"ze\", postpro":[2287,2302],"e\", postproc":[2287,2302],"\", postproce":[2287,2293,2302,2309],", postproces":[2287,2293,2302,2309],"postprocess1":[2287,2300,2301,2302],"ostprocess1.":[2287,2301,2302],"stprocess1.w":[2287,2302],"tprocess1.wi":[2287,2302],"process1.wid":[2287,2302],"rocess1.widt":[2287,2302],"ocess1.width":[2287,2302],"cess1.width,":[2287,2302],"ess1.width, ":[2287,2302],"ss1.width, p":[2287,2302],"s1.width, po":[2287,2302],"1.width, pos":[2287,2302],".width, post":[2287,2302],"width, postp":[2287,2302],"idth, postpr":[2287,2302],"dth, postpro":[2287,2302],"th, postproc":[2287,2302],"h, postproce":[2287,2302],"stprocess1.h":[2287,2302],"tprocess1.he":[2287,2302],"process1.hei":[2287,2302],"rocess1.heig":[2287,2302],"ocess1.heigh":[2287,2302],"cess1.height":[2287,2302],"ess1.height)":[2287,2302],"ss1.height);":[2287,2302],"ct.setfloat(":[2288,2303,2310,2311,2312],"t.setfloat(\"":[2288,2303,2310,2311,2312],".setfloat(\"h":[2288,2303,2312],"setfloat(\"hi":[2288,2303,2312],"etfloat(\"hig":[2288,2303,2312],"tfloat(\"high":[2288,2303,2312],"float(\"highl":[2288,2303,2312],"loat(\"highli":[2288,2303,2312],"oat(\"highlig":[2288,2303,2312],"at(\"highligh":[2288,2303,2312],"t(\"highlight":[2288,2303,2312],"(\"highlightt":[2288,2303],"tthreshold\",":[2288,2303],"threshold\", ":[2288,2303],"hreshold\", 0":[2288,2303],"reshold\", 0.":[2288,2303],"eshold\", 0.9":[2288,2303],"shold\", 0.90":[2288,2303],"hold\", 0.90)":[2288,2303],"old\", 0.90);":[2288,2303],"at you can a":[2291],"n also use t":[2291,2524]," also use th":[2291,2524],"also use the":[2291,2524],"lso use the ":[2291,2524],"so use the o":[2291],"o use the ou":[2291]," use the out":[2291],"use the outp":[2291],"se the outpu":[2291],"e the output":[2291]," the output ":[2291],"the output o":[2291],"he output of":[2291],"e output of ":[2291]," output of a":[2291],"output of a ":[2291],"utput of a p":[2291],"tput of a pr":[2291],"put of a pre":[2291],"ut of a prev":[2291],"t of a previ":[2291]," of a previo":[2291],"of a previou":[2291],"f a previous":[2291]," a previous ":[2291],"a previous p":[2291]," previous po":[2291],"previous pos":[2291],"revious post":[2291],"evious postp":[2291],"vious postpr":[2291],"ious postpro":[2291],"ous postproc":[2291],"us postproce":[2291],"ostprocess a":[2291],"stprocess as":[2291],"tprocess as ":[2291],"process as t":[2291],"rocess as th":[2291],"ocess as the":[2291],"cess as the ":[2291],"ess as the s":[2291],"ss as the so":[2291],"s as the sou":[2291]," as the sour":[2291],"as the sourc":[2291],"the source f":[2291],"he source fo":[2291],"e source for":[2291]," source for ":[2291],"source for y":[2291],"ource for yo":[2291],"urce for you":[2291],"rce for your":[2291],"ce for your ":[2291],"e for your o":[2291]," for your ow":[2291],"for your own":[2291],"or your own ":[2291],"r your own s":[2291]," your own sa":[2291],"your own sam":[2291],"our own samp":[2291],"ur own sampl":[2291],"r own sample":[2291]," own sampler":[2291],"own sampler:":[2291],"effect.sette":[2293,2309],"ffect.settex":[2293,2309],"fect.settext":[2293,2309],"ect.settextu":[2293,2309],"ct.settextur":[2293,2309],"t.settexture":[2293,2309],".settexturef":[2293,2309],"settexturefr":[2293,2309],"ettexturefro":[2293,2309],"ttexturefrom":[2293,2309],"texturefromp":[2293,2309],"exturefrompo":[2293,2309],"xturefrompos":[2293,2309],"turefrompost":[2293,2309],"urefrompostp":[2293,2309],"refrompostpr":[2293,2309],"efrompostpro":[2293,2309],"frompostproc":[2293,2309],"rompostproce":[2293,2309],"ompostproces":[2293,2309],"mpostprocess":[2293,2309],"cess(\"scenes":[2293,2309],"ess(\"scenesa":[2293,2309],"ss(\"scenesam":[2293,2309],"s(\"scenesamp":[2293,2309],"(\"scenesampl":[2293,2309],"\"scenesample":[2293,2307,2309],"scenesampler":[2293,2307,2309],"cenesampler\"":[2293,2307,2309],"enesampler\",":[2293,2309],"nesampler\", ":[2293,2309],"esampler\", p":[2293,2309],"sampler\", po":[2293,2309],"ampler\", pos":[2293,2309],"mpler\", post":[2293,2309],"pler\", postp":[2293,2309],"ler\", postpr":[2293,2309],"er\", postpro":[2293,2309],"r\", postproc":[2293,2309],"postprocess0":[2293,2299,2309],"ostprocess0)":[2293,2309],"stprocess0);":[2293,2309],"# chaining p":[2295]," chaining po":[2295],"chaining pos":[2295],"haining post":[2295],"aining postp":[2295],"ining postpr":[2295],"ning postpro":[2295],"you can chai":[2296],"ou can chain":[2296],"u can chain ":[2296]," can chain p":[2296],"can chain po":[2296],"an chain pos":[2296],"n chain post":[2296]," chain postp":[2296],"chain postpr":[2296],"hain postpro":[2296],"ain postproc":[2296],"tprocesses o":[2296],"processes on":[2296],"rocesses on ":[2296],"ocesses on a":[2296],"cesses on a ":[2296],"esses on a s":[2296],"sses on a sp":[2296],"ses on a spe":[2296],"es on a spec":[2296],"s on a speci":[2296],"specific cam":[2296],"pecific came":[2296],"ecific camer":[2296],"cific camera":[2296],"ific camera.":[2296],"fic camera. ":[2296],"ic camera. t":[2296],"c camera. th":[2296]," camera. the":[2296],"camera. they":[2296],"amera. they ":[2296],"mera. they a":[2296],"era. they ar":[2296],"ra. they are":[2296],"a. they are ":[2296],". they are p":[2296]," they are pr":[2296],"they are pro":[2296],"hey are proc":[2296],"ey are proce":[2296],"y are proces":[2296]," are process":[2296],"are processe":[2296],"re processed":[2296],"e processed ":[2296]," processed u":[2296],"processed us":[2296],"rocessed usi":[2296],"ocessed usin":[2296],"cessed using":[2296],"essed using ":[2296],"ssed using t":[2296],"sed using th":[2296],"using the cr":[2296],"sing the cre":[2296],"ing the crea":[2296],"ng the creat":[2296],"g the creati":[2296]," the creatio":[2296],"the creation":[2296],"he creation ":[2296],"e creation o":[2296],"creation ord":[2296],"reation orde":[2296],"eation order":[2296],"ation order.":[2296],"tion order. ":[2296],"ion order. f":[2296],"on order. fo":[2296],"n order. for":[2296]," order. for ":[2296],"order. for i":[2296],"rder. for in":[2296],"der. for ins":[2296],"r instance h":[2296]," instance he":[2296],"instance her":[2296],"nstance here":[2296],"stance here ":[2296],"tance here i":[2296],"ance here is":[2296],"nce here is ":[2296],"ce here is t":[2296],"e here is th":[2296]," here is the":[2296],"ere is the c":[2296],"re is the co":[2296],"e is the cod":[2296]," is the code":[2296],"is the code ":[2296],"s the code u":[2296]," the code us":[2296],"the code use":[2296],"he code used":[2296],"e code used ":[2296]," code used t":[2296],"code used to":[2296],"ode used to ":[2296],"de used to s":[2296],"e used to si":[2296]," used to sim":[2296],"used to simu":[2296],"sed to simul":[2296],"ed to simula":[2296],"d to simulat":[2296],"o simulate a":[2296]," simulate a ":[2296],"simulate a b":[2296],"imulate a bl":[2296],"mulate a blo":[2296],"ulate a bloo":[2296],"late a bloom":[2296],"ate a bloom ":[2296],"te a bloom e":[2296],"e a bloom ef":[2296]," a bloom eff":[2296],"a bloom effe":[2296]," bloom effec":[2296],"bloom effect":[2296],"loom effect:":[2296],"var blurwidt":[2298],"ar blurwidth":[2298],"r blurwidth ":[2298]," blurwidth =":[2298],"blurwidth = ":[2298],"lurwidth = 1":[2298],"urwidth = 1.":[2298],"rwidth = 1.0":[2298],"width = 1.0;":[2298],"ostprocess0 ":[2299],"stprocess0 =":[2299],"tprocess0 = ":[2299],"process0 = n":[2299],"rocess0 = ne":[2299],"ocess0 = new":[2299],"cess0 = new ":[2299],"ess0 = new b":[2299],"ss0 = new ba":[2299],"s0 = new bab":[2299],"opy\", 1.0, c":[2299],"py\", 1.0, ca":[2299],"y\", 1.0, cam":[2299],"\", 1.0, came":[2299],"ostprocess1 ":[2300],"stprocess1 =":[2300],"tprocess1 = ":[2300],"process1 = n":[2300],"rocess1 = ne":[2300],"ocess1 = new":[2300],"cess1 = new ":[2300],"ess1 = new b":[2300],"ss1 = new ba":[2300],"s1 = new bab":[2300],"ull, 0.25, c":[2300],"ll, 0.25, ca":[2300],"l, 0.25, cam":[2300],", 0.25, came":[2300,2305,2306]," 0.25, camer":[2300,2305,2306],"0.25, camera":[2300,2305,2306],".25, camera,":[2300],"25, camera, ":[2300],"5, camera, b":[2300],", camera, ba":[2300]," camera, bab":[2300],"camera, baby":[2300],"amera, babyl":[2300],"mera, babylo":[2300],"era, babylon":[2300],"ra, babylon.":[2300],"a, babylon.t":[2300],"amplingmode)":[2300],"mplingmode);":[2300],"stprocess1.o":[2301],"tprocess1.on":[2301],"process1.ona":[2301],"rocess1.onap":[2301],"ocess1.onapp":[2301],"cess1.onappl":[2301],"ess1.onapply":[2301],"ss1.onapply ":[2301],"s1.onapply =":[2301],"1.onapply = ":[2301],"postprocess2":[2305],"ostprocess2 ":[2305],"stprocess2 =":[2305],"tprocess2 = ":[2305],"process2 = n":[2305],"rocess2 = ne":[2305],"ocess2 = new":[2305],"cess2 = new ":[2305],"ess2 = new b":[2305],"ss2 = new ba":[2305],"s2 = new bab":[2305],"dth, 0.25, c":[2305,2306],"th, 0.25, ca":[2305,2306],"h, 0.25, cam":[2305,2306],".25, camera)":[2305,2306],"25, camera);":[2305,2306],"postprocess3":[2306],"ostprocess3 ":[2306],"stprocess3 =":[2306],"tprocess3 = ":[2306],"process3 = n":[2306],"rocess3 = ne":[2306],"ocess3 = new":[2306],"cess3 = new ":[2306],"ess3 = new b":[2306],"ss3 = new ba":[2306],"s3 = new bab":[2306],"stprocess(\"v":[2306,2324],"tprocess(\"ve":[2306],"process(\"ver":[2306],"rocess(\"vert":[2306],"ocess(\"verti":[2306],"cess(\"vertic":[2306],"ess(\"vertica":[2306],"ss(\"vertical":[2306],"s(\"vertical ":[2306],"(\"vertical b":[2306],"\"vertical bl":[2306],"rtical blur\"":[2306],"tical blur\",":[2306],"ical blur\", ":[2306],"cal blur\", n":[2306],"on.vector2(0":[2306,2324],"n.vector2(0,":[2306,2324],".vector2(0, ":[2306,2324],"vector2(0, 1":[2306,2324],"ector2(0, 1.":[2306,2324],"ctor2(0, 1.0":[2306,2324],"tor2(0, 1.0)":[2306,2324],"or2(0, 1.0),":[2306,2324],"r2(0, 1.0), ":[2306,2324],"2(0, 1.0), b":[2306],"(0, 1.0), bl":[2306],"0, 1.0), blu":[2306],", 1.0), blur":[2306]," 1.0), blurw":[2306],"1.0), blurwi":[2306],".0), blurwid":[2306],"postprocess4":[2307,2308],"ostprocess4 ":[2307],"stprocess4 =":[2307],"tprocess4 = ":[2307],"process4 = n":[2307],"rocess4 = ne":[2307],"ocess4 = new":[2307],"cess4 = new ":[2307],"ess4 = new b":[2307],"ss4 = new ba":[2307],"s4 = new bab":[2307],"tprocess(\"fi":[2307],"process(\"fin":[2307],"rocess(\"fina":[2307],"ocess(\"final":[2307],"cess(\"final ":[2307],"ess(\"final c":[2307],"ss(\"final co":[2307],"s(\"final com":[2307],"(\"final comp":[2307],"\"final compo":[2307],"final compos":[2307],"inal compose":[2307],"nal compose\"":[2307],"al compose\",":[2307],"l compose\", ":[2307]," compose\", \"":[2307],"compose\", \".":[2307],"ompose\", \"./":[2307],"mpose\", \"./s":[2307],"pose\", \"./sc":[2307],"ose\", \"./sce":[2307],"se\", \"./scen":[2307],"tprocesses/c":[2307],"processes/co":[2307],"rocesses/com":[2307],"ocesses/comp":[2307],"cesses/compo":[2307],"esses/compos":[2307],"sses/compose":[2307],"ses/compose\"":[2307],"es/compose\",":[2307],"s/compose\", ":[2307],"/compose\", [":[2307],"compose\", [\"":[2307],"ompose\", [\"s":[2307],"mpose\", [\"sc":[2307],"pose\", [\"sce":[2307],"ose\", [\"scen":[2307],"se\", [\"scene":[2307],"e\", [\"scenei":[2307],"\", [\"scenein":[2307],", [\"sceneint":[2307]," [\"sceneinte":[2307],"[\"sceneinten":[2307],"\"sceneintens":[2307,2310],"sceneintensi":[2307,2310],"ceneintensit":[2307,2310],"eneintensity":[2307,2310],"neintensity\"":[2307,2310],"eintensity\",":[2307,2310],"intensity\", ":[2307,2310,2311,2312],"ntensity\", \"":[2307],"tensity\", \"g":[2307],"ensity\", \"gl":[2307],"nsity\", \"glo":[2307],"sity\", \"glow":[2307],"ity\", \"glowi":[2307],"ty\", \"glowin":[2307],"y\", \"glowint":[2307],"\", \"glowinte":[2307],", \"glowinten":[2307]," \"glowintens":[2307],"\"glowintensi":[2307,2311],"glowintensit":[2307,2311],"lowintensity":[2307,2311],"owintensity\"":[2307,2311],"wintensity\",":[2307,2311],"tensity\", \"h":[2307],"ensity\", \"hi":[2307],"nsity\", \"hig":[2307],"sity\", \"high":[2307],"ity\", \"highl":[2307],"ty\", \"highli":[2307],"y\", \"highlig":[2307]," \"highlighti":[2307],"\"highlightin":[2307,2312],"highlightint":[2307,2312],"ighlightinte":[2307,2312],"ghlightinten":[2307,2312],"hlightintens":[2307,2312],"lightintensi":[2307,2312],"ightintensit":[2307,2312],"ghtintensity":[2307,2312],"htintensity\"":[2307,2312],"tintensity\"]":[2307],"intensity\"],":[2307],"ntensity\"], ":[2307],"tensity\"], [":[2307],"ensity\"], [\"":[2307],"nsity\"], [\"s":[2307],"sity\"], [\"sc":[2307],"ity\"], [\"sce":[2307],"ty\"], [\"scen":[2307],"y\"], [\"scene":[2307],"\"], [\"scenes":[2307],"], [\"scenesa":[2307],", [\"scenesam":[2307]," [\"scenesamp":[2307],"[\"scenesampl":[2307],"enesampler\"]":[2307],"nesampler\"],":[2307],"esampler\"], ":[2307],"sampler\"], 1":[2307],"ampler\"], 1,":[2307],"mpler\"], 1, ":[2307],"pler\"], 1, c":[2307],"ler\"], 1, ca":[2307],"er\"], 1, cam":[2307],"r\"], 1, came":[2307],"\"], 1, camer":[2307],"], 1, camera":[2307],", 1, camera)":[2307]," 1, camera);":[2307],"ostprocess4.":[2308],"stprocess4.o":[2308],"tprocess4.on":[2308],"process4.ona":[2308],"rocess4.onap":[2308],"ocess4.onapp":[2308],"cess4.onappl":[2308],"ess4.onapply":[2308],"ss4.onapply ":[2308],"s4.onapply =":[2308],"4.onapply = ":[2308]," effect.sett":[2309],".setfloat(\"s":[2310],"setfloat(\"sc":[2310],"etfloat(\"sce":[2310],"tfloat(\"scen":[2310],"float(\"scene":[2310],"loat(\"scenei":[2310],"oat(\"scenein":[2310],"at(\"sceneint":[2310],"t(\"sceneinte":[2310],"(\"sceneinten":[2310],"ntensity\", 0":[2310,2311],"tensity\", 0.":[2310,2311],"ensity\", 0.5":[2310],"nsity\", 0.5)":[2310],"sity\", 0.5);":[2310],".setfloat(\"g":[2311],"setfloat(\"gl":[2311],"etfloat(\"glo":[2311],"tfloat(\"glow":[2311],"float(\"glowi":[2311],"loat(\"glowin":[2311],"oat(\"glowint":[2311],"at(\"glowinte":[2311],"t(\"glowinten":[2311],"(\"glowintens":[2311],"ensity\", 0.4":[2311],"nsity\", 0.4)":[2311],"sity\", 0.4);":[2311],"(\"highlighti":[2312],"tintensity\",":[2312],"ntensity\", 1":[2312],"tensity\", 1.":[2312],"ensity\", 1.0":[2312],"nsity\", 1.0)":[2312],"sity\", 1.0);":[2312],"you might wa":[2315],"ou might wan":[2315],"u might want":[2315]," might want ":[2315],"might want t":[2315],"ight want to":[2315],"ght want to ":[2315],"ht want to r":[2315],"t want to re":[2315]," want to rea":[2315],"want to read":[2315],"ant to read ":[2315],"nt to read m":[2315],"t to read mo":[2315]," to read mor":[2315],"to read more":[2315],"o read more ":[2315]," read more a":[2315],"read more ab":[2315],"ead more abo":[2315],"ad more abou":[2315],"d more about":[2315],"more about s":[2315],"ore about sh":[2315],"re about sha":[2315],"e about shad":[2315]," about shade":[2315],"about shader":[2315],"bout shaders":[2315],"out shaders ":[2315],"ut shaders a":[2315],"t shaders an":[2315]," shaders and":[2315],"shaders and ":[2315],"haders and t":[2315],"aders and tr":[2315],"ders and try":[2315],"ers and try ":[2315],"rs and try o":[2315],"s and try ou":[2315]," and try our":[2315],"and try our ":[2315],"nd try our c":[2315],"d try our cy":[2315]," try our cyo":[2315],"try our cyos":[2315],"ry our cyos ":[2315],"y our cyos s":[2315]," our cyos sh":[2315],"our cyos sha":[2315],"ur cyos shad":[2315],"r cyos shade":[2315]," cyos shader":[2315],"cyos shader ":[2315],"yos shader e":[2315],"os shader ed":[2315],"s shader edi":[2315]," shader edit":[2315],"shader edito":[2315],"hader editor":[2315],"ader editor ":[2315],"der editor [":[2315],"er editor [*":[2315],"r editor [**":[2315]," editor [**r":[2315],"editor [**ri":[2315],"ditor [**rig":[2315],"itor [**righ":[2315],"tor [**right":[2315],"or [**right ":[2315],"r [**right h":[2315]," [**right he":[2315],"[**right her":[2315],"**right here":[2315],"*right here*":[2315],"right here**":[2315],"ight here**]":[2315],"ght here**](":[2315],"ht here**](h":[2315],"t here**](ht":[2315]," here**](htt":[2315],"here**](http":[2315],"ere**](http:":[2315],"re**](http:/":[2315],"e**](http://":[2315],"**](http://b":[2315],"*](http://bl":[2315],"](http://blo":[2315],"(http://blog":[2315],"http://blogs":[2315],"ttp://blogs.":[2315],"tp://blogs.m":[2315],"p://blogs.ms":[2315],"://blogs.msd":[2315],"//blogs.msdn":[2315],"/blogs.msdn.":[2315],"blogs.msdn.c":[2315],"logs.msdn.co":[2315],"ogs.msdn.com":[2315],"gs.msdn.com/":[2315],"s.msdn.com/b":[2315],".msdn.com/b/":[2315],"msdn.com/b/e":[2315],"sdn.com/b/et":[2315],"dn.com/b/ete":[2315],"n.com/b/eter":[2315],".com/b/etern":[2315],"com/b/eterna":[2315],"om/b/eternal":[2315],"m/b/eternalc":[2315],"/b/eternalco":[2315],"b/eternalcod":[2315],"/eternalcodi":[2315],"eternalcodin":[2315],"ternalcoding":[2315],"ernalcoding/":[2315],"rnalcoding/a":[2315],"nalcoding/ar":[2315],"alcoding/arc":[2315],"lcoding/arch":[2315],"coding/archi":[2315],"oding/archiv":[2315],"ding/archive":[2315],"ing/archive/":[2315],"ng/archive/2":[2315],"g/archive/20":[2315],"/archive/201":[2315],"archive/2014":[2315],"rchive/2014/":[2315],"chive/2014/0":[2315],"hive/2014/04":[2315],"ive/2014/04/":[2315],"ve/2014/04/1":[2315],"e/2014/04/17":[2315],"/2014/04/17/":[2315],"2014/04/17/l":[2315],"014/04/17/le":[2315],"14/04/17/lea":[2315],"4/04/17/lear":[2315],"/04/17/learn":[2315],"04/17/learni":[2315],"4/17/learnin":[2315],"/17/learning":[2315],"17/learning-":[2315],"7/learning-s":[2315],"/learning-sh":[2315],"learning-sha":[2315],"earning-shad":[2315],"arning-shade":[2315],"rning-shader":[2315],"ning-shaders":[2315],"ing-shaders-":[2315],"ng-shaders-c":[2315],"g-shaders-cr":[2315],"-shaders-cre":[2315],"shaders-crea":[2315],"haders-creat":[2315],"aders-create":[2315],"ders-create-":[2315],"ers-create-y":[2315],"rs-create-yo":[2315],"s-create-you":[2315],"-create-your":[2315],"create-your-":[2315],"reate-your-o":[2315],"eate-your-ow":[2315],"ate-your-own":[2315],"te-your-own-":[2315],"e-your-own-s":[2315],"-your-own-sh":[2315],"your-own-sha":[2315],"our-own-shad":[2315],"ur-own-shade":[2315],"r-own-shader":[2315],"-own-shaders":[2315],"own-shaders-":[2315],"wn-shaders-w":[2315],"n-shaders-wi":[2315],"-shaders-wit":[2315],"shaders-with":[2315],"haders-with-":[2315],"aders-with-b":[2315],"ders-with-ba":[2315],"ers-with-bab":[2315],"rs-with-baby":[2315],"s-with-babyl":[2315],"-with-babylo":[2315],"with-babylon":[2315],"ith-babylon-":[2315],"th-babylon-j":[2315],"h-babylon-js":[2315],"-babylon-js.":[2315],"babylon-js.a":[2315],"abylon-js.as":[2315],"bylon-js.asp":[2315],"ylon-js.aspx":[2315],"lon-js.aspx)":[2315],"on-js.aspx).":[2315],"camera_03.at":[2316],"amera_03.att":[2316],"mera_03.atta":[2316],"era_03.attac":[2316],"ra_03.attach":[2316],"a_03.attachc":[2316],"_03.attachco":[2316],"03.attachcon":[2316],"3.attachcont":[2316],"camera_04.at":[2317],"amera_04.att":[2317],"mera_04.atta":[2317],"era_04.attac":[2317],"ra_04.attach":[2317],"a_04.attachc":[2317],"_04.attachco":[2317],"04.attachcon":[2317],"4.attachcont":[2317],"var standard":[2318],"ar standardp":[2318],"r standardpi":[2318]," standardpip":[2318],"standardpipe":[2318,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"tandardpipel":[2318,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"andardpipeli":[2318,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"ndardpipelin":[2318,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"dardpipeline":[2318,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"ardpipeline ":[2318],"rdpipeline =":[2318],"dpipeline = ":[2318],"pipeline = n":[2318],"ipeline = ne":[2318],"peline = new":[2318],"eline = new ":[2318],"line = new b":[2318],"ne(engine, \"":[2318],"e(engine, \"s":[2318],"(engine, \"st":[2318],"engine, \"sta":[2318],"ngine, \"stan":[2318],"gine, \"stand":[2318],"ine, \"standa":[2318],"ne, \"standar":[2318],"e, \"standard":[2318],", \"standardp":[2318]," \"standardpi":[2318],"\"standardpip":[2318,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"ardpipeline\"":[2318,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"rdpipeline\")":[2318],"dpipeline\");":[2318],"var blackand":[2319],"ar blackandw":[2319],"r blackandwh":[2319]," blackandwhi":[2319],"ackandwhitee":[2319,2325,2333,2334],"ckandwhiteef":[2319,2325,2333,2334],"kandwhiteeff":[2319,2325,2333,2334],"andwhiteeffe":[2319,2325,2333,2334],"ndwhiteeffec":[2319,2325,2333,2334],"dwhiteeffect":[2319,2325,2333,2334],"whiteeffect ":[2319],"hiteeffect =":[2319],"iteeffect = ":[2319],"teeffect = n":[2319],"eeffect = ne":[2319],"ct(engine, \"":[2319,2321,2323],"t(engine, \"b":[2319],"(engine, \"bl":[2319],"engine, \"bla":[2319],"ngine, \"blac":[2319],"gine, \"black":[2319],"ine, \"blacka":[2319],"ne, \"blackan":[2319],"e, \"blackand":[2319],", \"blackandw":[2319,2333,2334]," \"blackandwh":[2319,2333,2334],"\"blackandwhi":[2319,2333,2334],"whiteeffect\"":[2319,2333,2334],"hiteeffect\",":[2319,2333,2334],"    function":[2320,2322,2324],"   function(":[2320,2322,2324],"  function()":[2320,2322,2324]," function() ":[2320,2322,2324],"unction() {r":[2320],"nction() {re":[2320],"ction() {ret":[2320],"tion() {retu":[2320],"ion() {retur":[2320],"on() {return":[2320],"n() {return ":[2320],"() {return n":[2320],") {return ne":[2320]," {return new":[2320],"{return new ":[2320],"return new b":[2320,2322,2324],"eturn new ba":[2320,2322,2324],"turn new bab":[2320,2322,2324],"urn new baby":[2320,2322,2324],"rn new babyl":[2320,2322,2324],"n new babylo":[2320,2322,2324],"tprocess(\"bw":[2320],"process(\"bw\"":[2320],"rocess(\"bw\",":[2320],"ocess(\"bw\", ":[2320],"cess(\"bw\", 1":[2320],"ess(\"bw\", 1.":[2320],"ss(\"bw\", 1.0":[2320],"s(\"bw\", 1.0,":[2320],"(\"bw\", 1.0, ":[2320],"\"bw\", 1.0, n":[2320],"bw\", 1.0, nu":[2320],"gine, true)}":[2320],"ine, true)})":[2320],"ne, true)});":[2320],"var horizont":[2321],"ar horizonta":[2321],"r horizontal":[2321]," horizontalb":[2321],"horizontalbl":[2321,2326,2335,2337],"orizontalblu":[2321,2326,2335,2337],"rizontalblur":[2321,2326,2335,2337],"izontalblur ":[2321],"zontalblur =":[2321],"ontalblur = ":[2321],"ntalblur = n":[2321],"talblur = ne":[2321],"alblur = new":[2321,2323],"lblur = new ":[2321,2323],"blur = new b":[2321,2323],"lur = new ba":[2321,2323],"ur = new bab":[2321,2323],"t(engine, \"h":[2321],"(engine, \"ho":[2321],"engine, \"hor":[2321],"ngine, \"hori":[2321],"gine, \"horiz":[2321],"ine, \"horizo":[2321],"ne, \"horizon":[2321],"e, \"horizont":[2321],", \"horizonta":[2321,2335,2337]," \"horizontal":[2321,2335,2337],"\"horizontalb":[2321,2335,2337],"izontalblure":[2321,2335,2337],"zontalbluref":[2321,2335,2337],"ontalblureff":[2321,2335,2337],"ntalblureffe":[2321,2335,2337],"talblureffec":[2321,2335,2337],"alblureffect":[2321,2323,2335,2336,2337,2338],"lblureffect\"":[2321,2323,2335,2336,2337,2338],"blureffect\",":[2321,2323,2335,2336,2337,2338],"nction() { r":[2322,2324],"ction() { re":[2322,2324],"tion() { ret":[2322,2324],"ion() { retu":[2322,2324],"on() { retur":[2322,2324],"n() { return":[2322,2324],"() { return ":[2322,2324],") { return n":[2322,2324]," { return ne":[2322,2324],"{ return new":[2322,2324]," return new ":[2322,2324],"tprocess(\"hb":[2322],"process(\"hb\"":[2322],"rocess(\"hb\",":[2322],"ocess(\"hb\", ":[2322],"cess(\"hb\", n":[2322],"ess(\"hb\", ne":[2322],"ss(\"hb\", new":[2322],"s(\"hb\", new ":[2322],"(\"hb\", new b":[2322],"\"hb\", new ba":[2322],"hb\", new bab":[2322],"b\", new baby":[2322,2324],"2(1.0, 0), 1":[2322],"(1.0, 0), 10":[2322],"1.0, 0), 10,":[2322],".0, 0), 10, ":[2322],"0, 0), 10, 1":[2322],", 0), 10, 1.":[2322]," 0), 10, 1.0":[2322],"0), 10, 1.0,":[2322,2324],"), 10, 1.0, ":[2322,2324],", 10, 1.0, n":[2322,2324]," 10, 1.0, nu":[2322,2324],"10, 1.0, nul":[2322,2324],"0, 1.0, null":[2322,2324],"gine, true) ":[2322,2324],"ine, true) }":[2322,2324],"ne, true) })":[2322,2324],"e, true) });":[2322,2324],"var vertical":[2323],"ar verticalb":[2323],"r verticalbl":[2323]," verticalblu":[2323],"verticalblur":[2323,2327,2336,2338],"erticalblur ":[2323],"rticalblur =":[2323],"ticalblur = ":[2323],"icalblur = n":[2323],"calblur = ne":[2323],"t(engine, \"v":[2323],"(engine, \"ve":[2323],"engine, \"ver":[2323],"ngine, \"vert":[2323],"gine, \"verti":[2323],"ine, \"vertic":[2323],"ne, \"vertica":[2323],"e, \"vertical":[2323],", \"verticalb":[2323,2336,2338]," \"verticalbl":[2323,2336,2338],"\"verticalblu":[2323,2336,2338],"erticalblure":[2323,2336,2338],"rticalbluref":[2323,2336,2338],"ticalblureff":[2323,2336,2338],"icalblureffe":[2323,2336,2338],"calblureffec":[2323,2336,2338],"tprocess(\"vb":[2324],"process(\"vb\"":[2324],"rocess(\"vb\",":[2324],"ocess(\"vb\", ":[2324],"cess(\"vb\", n":[2324],"ess(\"vb\", ne":[2324],"ss(\"vb\", new":[2324],"s(\"vb\", new ":[2324],"(\"vb\", new b":[2324],"\"vb\", new ba":[2324],"vb\", new bab":[2324],"2(0, 1.0), 1":[2324],"(0, 1.0), 10":[2324],"0, 1.0), 10,":[2324],", 1.0), 10, ":[2324]," 1.0), 10, 1":[2324],"1.0), 10, 1.":[2324],".0), 10, 1.0":[2324],"ardpipeline.":[2325,2326,2327],"rdpipeline.a":[2325,2326,2327],"dpipeline.ad":[2325,2326,2327],"pipeline.add":[2325,2326,2327],"ipeline.adde":[2325,2326,2327],"peline.addef":[2325,2326,2327],"eline.addeff":[2325,2326,2327],"line.addeffe":[2325,2326,2327],"ine.addeffec":[2325,2326,2327],"ne.addeffect":[2325,2326,2327],"e.addeffect(":[2325,2326,2327],".addeffect(b":[2325],"addeffect(bl":[2325],"ddeffect(bla":[2325],"deffect(blac":[2325],"effect(black":[2325],"ffect(blacka":[2325],"fect(blackan":[2325],"ect(blackand":[2325],"ct(blackandw":[2325],"t(blackandwh":[2325],"(blackandwhi":[2325],"whiteeffect)":[2325],"hiteeffect);":[2325],".addeffect(h":[2326],"addeffect(ho":[2326],"ddeffect(hor":[2326],"deffect(hori":[2326],"effect(horiz":[2326],"ffect(horizo":[2326],"fect(horizon":[2326],"ect(horizont":[2326],"ct(horizonta":[2326],"t(horizontal":[2326],"(horizontalb":[2326],"izontalblur)":[2326],"zontalblur);":[2326],".addeffect(v":[2327],"addeffect(ve":[2327],"ddeffect(ver":[2327],"deffect(vert":[2327],"effect(verti":[2327],"ffect(vertic":[2327],"fect(vertica":[2327],"ect(vertical":[2327],"ct(verticalb":[2327],"t(verticalbl":[2327],"(verticalblu":[2327],"erticalblur)":[2327],"rticalblur);":[2327],"nemanager.ad":[2328],"emanager.add":[2328],"manager.addp":[2328],"anager.addpi":[2328],"nager.addpip":[2328],"ager.addpipe":[2328],"ger.addpipel":[2328],"er.addpipeli":[2328],"r.addpipelin":[2328],".addpipeline":[2328],"ddpipeline(s":[2328],"dpipeline(st":[2328],"pipeline(sta":[2328],"ipeline(stan":[2328],"peline(stand":[2328],"eline(standa":[2328],"line(standar":[2328],"ine(standard":[2328],"ne(standardp":[2328],"e(standardpi":[2328],"(standardpip":[2328],"ardpipeline)":[2328],"rdpipeline);":[2328],"pipeline(\"st":[2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"ipeline(\"sta":[2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"peline(\"stan":[2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"eline(\"stand":[2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"line(\"standa":[2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"ine(\"standar":[2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"ne(\"standard":[2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"e(\"standardp":[2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"(\"standardpi":[2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"rdpipeline\",":[2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"dpipeline\", ":[2329,2330,2331,2332,2333,2334,2335,2336,2337,2338],"ne\", camera_":[2329,2330,2331,2332],"e\", camera_0":[2329,2330,2331,2332],"\", camera_01":[2329,2333],", camera_01)":[2329,2333]," camera_01);":[2329,2333],"\", camera_02":[2330,2334,2335,2336],", camera_02)":[2330,2334,2335,2336]," camera_02);":[2330,2334,2335,2336],"\", camera_03":[2331,2337,2338],", camera_03)":[2331,2337,2338]," camera_03);":[2331,2337,2338],"\", camera_04":[2332],", camera_04)":[2332]," camera_04);":[2332],"pipeline\", \"":[2333,2334,2335,2336,2337,2338],"ipeline\", \"b":[2333,2334],"peline\", \"bl":[2333,2334],"eline\", \"bla":[2333,2334],"line\", \"blac":[2333,2334],"ine\", \"black":[2333,2334],"ne\", \"blacka":[2333,2334],"e\", \"blackan":[2333,2334],"\", \"blackand":[2333,2334],"iteeffect\", ":[2333,2334],"teeffect\", c":[2333,2334],"eeffect\", ca":[2333,2334],"effect\", cam":[2333,2334,2335,2336,2337,2338],"ffect\", came":[2333,2334,2335,2336,2337,2338],"fect\", camer":[2333,2334,2335,2336,2337,2338],"ect\", camera":[2333,2334,2335,2336,2337,2338],"ct\", camera_":[2333,2334,2335,2336,2337,2338],"t\", camera_0":[2333,2334,2335,2336,2337,2338],"ipeline\", \"h":[2335,2337],"peline\", \"ho":[2335,2337],"eline\", \"hor":[2335,2337],"line\", \"hori":[2335,2337],"ine\", \"horiz":[2335,2337],"ne\", \"horizo":[2335,2337],"e\", \"horizon":[2335,2337],"\", \"horizont":[2335,2337],"lureffect\", ":[2335,2336,2337,2338],"ureffect\", c":[2335,2336,2337,2338],"reffect\", ca":[2335,2336,2337,2338],"ipeline\", \"v":[2336,2338],"peline\", \"ve":[2336,2338],"eline\", \"ver":[2336,2338],"line\", \"vert":[2336,2338],"ine\", \"verti":[2336,2338],"ne\", \"vertic":[2336,2338],"e\", \"vertica":[2336,2338],"\", \"vertical":[2336,2338],"//render loo":[2339],"/render loop":[2339],"    scene.re":[2341],"   scene.ren":[2341],"  scene.rend":[2341]," scene.rende":[2341],"     \"animat":[2344],"    \"animate":[2344],"   \"animate\"":[2344],"  \"animate\":":[2344]," \"animate\": ":[2344],"\"animate\": f":[2344],"animate\": fa":[2344],"nimate\": fal":[2344],"imate\": fals":[2344],"mate\": false":[2344],"ate\": false,":[2344],"     \"refres":[2345],"    \"refresh":[2345],"   \"refreshr":[2345],"  \"refreshra":[2345]," \"refreshrat":[2345],"\"refreshrate":[2345],"refreshrate\"":[2345],"efreshrate\":":[2345],"freshrate\": ":[2345],"reshrate\": 0":[2345],"eshrate\": 0,":[2345],"     \"unifor":[2346],"    \"uniform":[2346],"   \"uniforms":[2346],"  \"uniforms\"":[2346]," \"uniforms\":":[2346],"\"uniforms\": ":[2346],"uniforms\": [":[2346],"          \"t":[2348,2356,2360],"         \"ty":[2348],"        \"typ":[2348],"       \"type":[2348],"      \"type\"":[2348],"     \"type\":":[2348],"    \"type\": ":[2348],"   \"type\": \"":[2348],"  \"type\": \"f":[2348]," \"type\": \"fl":[2348],"\"type\": \"flo":[2348],"type\": \"floa":[2348],"ype\": \"float":[2348],"pe\": \"float\"":[2348],"e\": \"float\",":[2348],"          \"n":[2349],"         \"na":[2349],"        \"nam":[2349],"       \"name":[2349],"      \"name\"":[2349],"     \"name\":":[2349],"    \"name\": ":[2349],"   \"name\": \"":[2349],"  \"name\": \"d":[2349]," \"name\": \"di":[2349],"\"name\": \"dir":[2349],"name\": \"dirt":[2349,2355],"ame\": \"dirta":[2349],"me\": \"dirtam":[2349],"e\": \"dirtamp":[2349],"\": \"dirtampl":[2349],": \"dirtampli":[2349]," \"dirtamplif":[2349],"\"dirtamplifi":[2349],"dirtamplifie":[2349],"irtamplifier":[2349],"rtamplifier\"":[2349],"tamplifier\",":[2349],"          \"v":[2350],"         \"va":[2350],"        \"val":[2350],"       \"valu":[2350],"      \"value":[2350],"     \"value\"":[2350],"    \"value\":":[2350],"   \"value\": ":[2350],"  \"value\": \"":[2350]," \"value\": \"6":[2350],"\"value\": \"6.":[2350],"value\": \"6.0":[2350],"alue\": \"6.0\"":[2350],"     \"sample":[2353,2355,2359],"    \"sampler":[2353],"   \"sampler2":[2353],"  \"sampler2d":[2353]," \"sampler2ds":[2353],"\"sampler2ds\"":[2353],"sampler2ds\":":[2353],"ampler2ds\": ":[2353],"mpler2ds\": [":[2353],"          \"s":[2355,2359],"         \"sa":[2355,2359],"        \"sam":[2355,2359],"       \"samp":[2355,2359],"      \"sampl":[2355,2359],"    \"sample2":[2355,2359],"   \"sample2d":[2355,2359],"  \"sample2dn":[2355,2359]," \"sample2dna":[2355,2359],"\"sample2dnam":[2355,2359],"sample2dname":[2355,2359],"ample2dname\"":[2355,2359],"mple2dname\":":[2355,2359],"ple2dname\": ":[2355,2359],"le2dname\": \"":[2355,2359],"e2dname\": \"d":[2355],"2dname\": \"di":[2355],"dname\": \"dir":[2355],"ame\": \"dirt\"":[2355],"me\": \"dirt\",":[2355],"         \"te":[2356,2360],"        \"tex":[2356,2360],"       \"text":[2356,2360],"      \"textu":[2356,2360],"     \"textur":[2356,2360],"    \"texture":[2356,2360],"   \"texturer":[2356,2360],"  \"texturere":[2356,2360]," \"texturerel":[2356,2360],"\"texturerela":[2356,2360],"texturerelat":[2356,2360],"exturerelati":[2356,2360],"xturerelativ":[2356,2360],"turerelative":[2356,2360],"urerelativeu":[2356,2360],"rerelativeur":[2356,2360],"erelativeurl":[2356,2360],"relativeurl\"":[2356,2360],"elativeurl\":":[2356,2360],"lativeurl\": ":[2356,2360],"ativeurl\": \"":[2356,2360],"tiveurl\": \"t":[2356,2360],"iveurl\": \"te":[2356,2360],"veurl\": \"tex":[2356,2360],"eurl\": \"text":[2356,2360],"url\": \"textu":[2356,2360],"rl\": \"textur":[2356,2360],"l\": \"texture":[2356,2360],"\": \"textures":[2356,2360],": \"textures/":[2356,2360]," \"textures/d":[2356],"\"textures/di":[2356],"textures/dir":[2356],"extures/dirt":[2356],"xtures/dirt.":[2356],"tures/dirt.j":[2356],"ures/dirt.jp":[2356],"res/dirt.jpg":[2356],"es/dirt.jpg\"":[2356],"e2dname\": \"g":[2359],"2dname\": \"gr":[2359],"dname\": \"gra":[2359],"name\": \"gras":[2359],"ame\": \"grass":[2359],"me\": \"grass\"":[2359],"e\": \"grass\",":[2359]," \"textures/g":[2360],"\"textures/gr":[2360],"textures/gra":[2360],"extures/gras":[2360],"xtures/grass":[2360],"tures/grass.":[2360],"ures/grass.p":[2360],"res/grass.pn":[2360],"es/grass.png":[2360],"s/grass.png\"":[2360],"the **animat":[2365],"he **animate":[2365],"e **animate*":[2365]," **animate**":[2365],"**animate** ":[2365],"*animate** p":[2365],"animate** pr":[2365],"nimate** pro":[2365],"imate** prop":[2365],"mate** prope":[2365],"ate** proper":[2365,2366],"te** propert":[2365,2366],"e** property":[2365,2366],"** property ":[2365,2366],"* property i":[2365,2366]," property in":[2365],"property ind":[2365],"roperty indi":[2365],"operty indic":[2365],"perty indica":[2365],"erty indicat":[2365],"rty indicate":[2365],"ty indicates":[2365],"y indicates ":[2365],"dicates if a":[2365],"icates if a ":[2365],"cates if a t":[2365],"ates if a ti":[2365],"tes if a tim":[2365],"es if a time":[2365],"s if a time ":[2365]," if a time v":[2365],"if a time va":[2365],"f a time val":[2365]," a time valu":[2365],"a time value":[2365]," time value ":[2365],"time value s":[2365],"ime value sh":[2365],"me value sho":[2365],"e value shou":[2365]," value shoul":[2365],"value should":[2365],"alue should ":[2365],"lue should b":[2365],"ue should be":[2365],"e should be ":[2365,2537]," should be c":[2365],"should be cr":[2365],"hould be cre":[2365],"ould be crea":[2365],"uld be creat":[2365],"ld be create":[2365],"d be created":[2365],"be created a":[2365],"e created an":[2365]," created and":[2365],"created and ":[2365],"reated and i":[2365],"eated and in":[2365],"ated and inc":[2365],"ted and incr":[2365],"ed and incre":[2365],"d and increa":[2365]," and increas":[2365],"and increase":[2365],"nd increased":[2365],"d increased ":[2365]," increased e":[2365],"increased ea":[2365],"ncreased eac":[2365],"creased each":[2365],"reased each ":[2365],"eased each t":[2365],"ased each ti":[2365],"sed each tim":[2365],"ed each time":[2365],"d each time ":[2365]," each time t":[2365],"each time th":[2365],"ach time the":[2365],"ch time the ":[2365],"h time the f":[2365]," time the fr":[2365],"time the fra":[2365],"ime the frag":[2365],"me the fragm":[2365],"e the fragme":[2365]," the fragmen":[2365],"the fragment":[2365],"he fragment ":[2365],"e fragment s":[2365],"ent shader c":[2365],"nt shader co":[2365],"t shader cod":[2365],"hader code i":[2365],"ader code is":[2365],"der code is ":[2365],"er code is e":[2365],"r code is ex":[2365]," code is exe":[2365],"code is exec":[2365],"ode is execu":[2365],"de is execut":[2365],"the **refres":[2366],"he **refresh":[2366],"e **refreshr":[2366]," **refreshra":[2366],"**refreshrat":[2366],"*refreshrate":[2366],"refreshrate*":[2366],"efreshrate**":[2366],"freshrate** ":[2366],"reshrate** p":[2366],"eshrate** pr":[2366],"shrate** pro":[2366],"hrate** prop":[2366],"rate** prope":[2366]," is set to 0":[2366],"is set to 0 ":[2366],"s set to 0 i":[2366]," set to 0 if":[2366],"set to 0 if ":[2366],"et to 0 if y":[2366],"t to 0 if yo":[2366]," to 0 if you":[2366],"to 0 if you ":[2366],"o 0 if you w":[2366]," 0 if you wa":[2366],"0 if you wan":[2366],"u want the t":[2366]," want the te":[2366],"want the tex":[2366],"ant the text":[2366],"nt the textu":[2366],"t the textur":[2366],"texture to o":[2366],"exture to on":[2366],"xture to onl":[2366],"ture to only":[2366],"ure to only ":[2366],"re to only r":[2366],"e to only re":[2366]," to only ren":[2366],"to only rend":[2366],"o only rende":[2366]," only render":[2366],"only render ":[2366],"nly render o":[2366],"ly render on":[2366],"y render onc":[2366]," render once":[2366],"render once.":[2366],"ender once. ":[2366],"nder once. i":[2366],"der once. if":[2366],"er once. if ":[2366],"r once. if s":[2366]," once. if se":[2366],"once. if set":[2366],"nce. if set ":[2366],"ce. if set t":[2366],"e. if set to":[2366,2417]," if set to 1":[2366],"if set to 1,":[2366],"f set to 1, ":[2366]," set to 1, i":[2366],"set to 1, it":[2366],"et to 1, it ":[2366],"t to 1, it w":[2366]," to 1, it wi":[2366],"to 1, it wil":[2366],"o 1, it will":[2366]," 1, it will ":[2366],"1, it will r":[2366],", it will re":[2366]," it will ren":[2366],"it will rend":[2366],"t will rende":[2366]," will render":[2366],"will render ":[2366],"ill render e":[2366],"ll render ev":[2366],"l render eve":[2366]," render ever":[2366],"render every":[2366],"ender every ":[2366],"nder every f":[2366],"der every fr":[2366],"er every fra":[2366],"r every fram":[2366]," every frame":[2366],"every frame,":[2366],"very frame, ":[2366],"ery frame, 2":[2366],"ry frame, 2 ":[2366],"y frame, 2 e":[2366]," frame, 2 ev":[2366],"frame, 2 eve":[2366],"rame, 2 ever":[2366],"ame, 2 every":[2366],"me, 2 every ":[2366],"e, 2 every t":[2366],", 2 every tw":[2366]," 2 every two":[2366],"2 every two ":[2366]," every two f":[2366],"every two fr":[2366],"very two fra":[2366],"ery two fram":[2366],"ry two frame":[2366],"y two frames":[2366]," two frames,":[2366],"two frames, ":[2366],"wo frames, e":[2366],"o frames, et":[2366]," frames, etc":[2366],"frames, etc.":[2366],"**uniforms**":[2367],"*uniforms** ":[2367],"uniforms** a":[2367],"niforms** ar":[2367],"iforms** are":[2367],"forms** are ":[2367],"orms** are t":[2367],"rms** are th":[2367],"ms** are the":[2367],"s** are the ":[2367],"** are the v":[2367],"* are the va":[2367]," are the val":[2367],"are the valu":[2367],"re the value":[2367],"the values t":[2367],"he values th":[2367],"e values tha":[2367]," values that":[2367],"values that ":[2367],"alues that w":[2367],"lues that wi":[2367],"ues that wil":[2367],"es that will":[2367],"at will be p":[2367],"t will be pa":[2367]," will be pas":[2367],"will be pass":[2367],"ill be passe":[2367],"ll be passed":[2367],"l be passed ":[2367]," be passed f":[2367],"be passed fr":[2367],"e passed fro":[2367]," passed from":[2367],"passed from ":[2367],"assed from t":[2367],"ssed from th":[2367],"sed from the":[2367],"d from the j":[2367]," from the ja":[2367],"from the jav":[2367],"rom the java":[2367],"om the javas":[2367],"m the javasc":[2367],"script code ":[2367],"cript code t":[2367],"ript code to":[2367],"ipt code to ":[2367],"pt code to t":[2367],"t code to th":[2367]," code to the":[2367],"code to the ":[2367],"ode to the s":[2367],"de to the sh":[2367],"e to the sha":[2367]," to the shad":[2367,2375,2560],"to the shade":[2367,2375,2560],"o the shader":[2367,2375,2560],"hader code. ":[2367],"ader code. b":[2367],"der code. by":[2367],"er code. by ":[2367],"r code. by s":[2367]," code. by se":[2367],"code. by set":[2367],"ode. by sett":[2367],"de. by setti":[2367],"e. by settin":[2367],". by setting":[2367],"by setting t":[2367],"y setting th":[2367],"setting them":[2367],"etting them ":[2367],"tting them t":[2367],"ting them th":[2367],"ing them tha":[2367],"ng them that":[2367],"g them that ":[2367]," them that w":[2367],"them that wa":[2367],"hem that way":[2367],"em that way,":[2367],"m that way, ":[2367]," that way, y":[2367],"that way, yo":[2367],"hat way, you":[2367],"at way, you ":[2367],"t way, you c":[2367]," you can all":[2367],"you can allo":[2367],"ou can allow":[2367],"u can allow ":[2367]," can allow t":[2367],"can allow th":[2367],"an allow the":[2367],"n allow the ":[2367]," allow the c":[2367],"allow the cu":[2367],"llow the cus":[2367],"low the cust":[2367],"ow the custo":[2367],"w the custom":[2367],"the custom t":[2367,2406],"he custom te":[2367,2406],"e custom tex":[2367,2406],"tom texture ":[2367],"om texture u":[2367],"m texture us":[2367],"texture user":[2367],"exture user ":[2367],"xture user t":[2367],"ture user to":[2367],"ure user to ":[2367],"re user to m":[2367],"e user to mo":[2367]," user to mod":[2367],"user to modi":[2367],"ser to modif":[2367],"er to modify":[2367],"o modify thi":[2367]," modify this":[2367],"modify this ":[2367],"odify this v":[2367],"dify this va":[2367],"ify this val":[2367],"fy this valu":[2367],"y this value":[2367],"this value a":[2367],"his value at":[2367],"is value at ":[2367],"s value at r":[2367]," value at ru":[2367],"value at run":[2367],"alue at runt":[2367],"lue at runti":[2367],"ue at runtim":[2367],"e at runtime":[2367],"at runtime..":[2367],"t runtime...":[2367]," runtime... ":[2367],"runtime... t":[2367],"untime... to":[2367],"ntime... to ":[2367],"time... to c":[2367],"ime... to cu":[2367],"me... to cus":[2367],"e... to cust":[2367],"... to custo":[2367],".. to custom":[2367],". to customi":[2367]," to customiz":[2367],"tomize the t":[2367],"omize the te":[2367],"mize the tex":[2367],"ize the text":[2367],"ze the textu":[2367],"the texture.":[2367,2376],"he texture. ":[2367,2376],"uniforms can":[2368],"niforms can ":[2368],"iforms can b":[2368],"forms can be":[2368],"orms can be ":[2368],"rms can be o":[2368],"ms can be of":[2368],"s can be of ":[2368]," can be of t":[2368],"can be of ty":[2368],"an be of typ":[2368],"n be of type":[2368]," be of type:":[2368],"- **float** ":[2370]," **float** (":[2370],"**float** (p":[2370],"*float** (pa":[2370],"float** (par":[2370],"loat** (para":[2370],"oat** (param":[2370],"at** (parame":[2370],"t** (paramet":[2370],"** (paramete":[2370,2371,2372,2373,2374],"* (parameter":[2370,2371,2372,2373,2374]," (parameters":[2370,2371,2372,2373,2374],"(parameters ":[2370],"rameters : v":[2370],"ameters : va":[2370],"meters : val":[2370],"eters : valu":[2370],"ters : value":[2370],"ers : value)":[2370],"- **vector2*":[2371]," **vector2**":[2371],"**vector2** ":[2371],"*vector2** (":[2371],"vector2** (p":[2371],"ector2** (pa":[2371],"ctor2** (par":[2371],"tor2** (para":[2371],"or2** (param":[2371],"r2** (parame":[2371],"2** (paramet":[2371],"(parameters:":[2371,2372,2373,2374],"parameters: ":[2371,2372,2373,2374],"arameters: x":[2371,2372],"rameters: x,":[2371,2372],"ameters: x, ":[2371,2372],"meters: x, y":[2371,2372],"eters: x, y)":[2371],"- **vector3*":[2372]," **vector3**":[2372],"**vector3** ":[2372],"*vector3** (":[2372],"vector3** (p":[2372],"ector3** (pa":[2372],"ctor3** (par":[2372],"tor3** (para":[2372],"or3** (param":[2372,2373],"r3** (parame":[2372,2373],"3** (paramet":[2372,2373],"eters: x, y,":[2372],"ters: x, y, ":[2372],"ers: x, y, z":[2372],"rs: x, y, z)":[2372],"- **color3**":[2373]," **color3** ":[2373],"**color3** (":[2373],"*color3** (p":[2373],"color3** (pa":[2373],"olor3** (par":[2373],"lor3** (para":[2373],"arameters: r":[2373,2374],"rameters: r,":[2373,2374],"ameters: r, ":[2373,2374],"meters: r, g":[2373,2374],"eters: r, g,":[2373,2374],"ters: r, g, ":[2373,2374],"ers: r, g, b":[2373,2374],"rs: r, g, b)":[2373],"- **color4**":[2374]," **color4** ":[2374],"**color4** (":[2374],"*color4** (p":[2374],"color4** (pa":[2374],"olor4** (par":[2374],"lor4** (para":[2374],"or4** (param":[2374],"r4** (parame":[2374],"4** (paramet":[2374],"rs: r, g, b,":[2374],"s: r, g, b, ":[2374],": r, g, b, a":[2374]," r, g, b, a)":[2374],"**textures2d":[2375],"*textures2d*":[2375],"textures2d**":[2375],"extures2d** ":[2375],"xtures2d** a":[2375],"tures2d** ar":[2375],"ures2d** are":[2375],"res2d** are ":[2375],"es2d** are 2":[2375],"s2d** are 2d":[2375],"2d** are 2d ":[2375],"d** are 2d i":[2375],"** are 2d im":[2375],"* are 2d ima":[2375]," are 2d imag":[2375],"are 2d image":[2375],"re 2d image ":[2375],"e 2d image f":[2375]," 2d image fi":[2375],"2d image fil":[2375],"d image file":[2375]," image files":[2375],"image files ":[2375],"mage files t":[2375],"age files th":[2375],"ge files tha":[2375],"e files that":[2375]," files that ":[2375],"files that a":[2375],"iles that ar":[2375],"les that are":[2375],"s that are p":[2375]," that are pa":[2375],"that are pas":[2375],"hat are pass":[2375],"at are passe":[2375],"t are passed":[2375]," are passed ":[2375],"are passed t":[2375],"re passed to":[2375],"assed to the":[2375],"ssed to the ":[2375],"sed to the s":[2375],"ed to the sh":[2375],"d to the sha":[2375,2560],"hader code a":[2375],"ader code as":[2375],"der code as ":[2375],"er code as *":[2375],"r code as **":[2375]," code as **s":[2375],"code as **sa":[2375],"ode as **sam":[2375],"de as **samp":[2375],"e as **sampl":[2375]," as **sample":[2375],"as **sampler":[2375],"s **sampler2":[2375]," **sampler2d":[2375],"**sampler2d*":[2375],"*sampler2d**":[2375],"sampler2d** ":[2375],"ampler2d** v":[2375],"mpler2d** va":[2375],"pler2d** var":[2375],"ler2d** vari":[2375],"er2d** varia":[2375],"r2d** variab":[2375],"2d** variabl":[2375],"d** variable":[2375],"** variables":[2375],"* variables.":[2375]," variables. ":[2375],"variables. t":[2375],"ariables. th":[2375],"riables. the":[2375],"iables. they":[2375],"ables. they ":[2375],"bles. they c":[2375],"les. they ca":[2375],"es. they can":[2375],"s. they can ":[2375],". they can b":[2375],"hey can be r":[2375],"ey can be re":[2375],"y can be rea":[2375]," can be read":[2375],"can be read ":[2375],"an be read b":[2375],"n be read by":[2375]," be read by ":[2375],"be read by t":[2375],"e read by th":[2375]," read by the":[2375],"read by the ":[2375],"ead by the s":[2375],"ad by the sh":[2375],"d by the sha":[2375]," by the shad":[2375],"by the shade":[2375],"y the shader":[2375],"ader code an":[2375],"der code and":[2375],"er code and ":[2375],"r code and b":[2375]," code and be":[2375],"code and be ":[2375],"ode and be u":[2375],"de and be us":[2375],"e and be use":[2375]," and be used":[2375],"and be used ":[2375],"nd be used t":[2375],"e used to cr":[2375]," used to cre":[2375],"used to crea":[2375],"sed to creat":[2375],"create the f":[2375],"reate the fi":[2375],"eate the fin":[2375],"ate the fina":[2375],"te the final":[2375],"e the final ":[2375]," the final p":[2375],"the final pi":[2375],"he final pix":[2375],"e final pixe":[2375]," final pixel":[2375],"final pixel ":[2375],"inal pixel c":[2375],"nal pixel co":[2375],"al pixel col":[2375],"l pixel colo":[2375]," pixel color":[2375],"pixel color.":[2375],"ixel color. ":[2375],"xel color. y":[2375],"el color. yo":[2375],"l color. you":[2375]," color. you ":[2375],"color. you o":[2375],"olor. you on":[2375],"lor. you onl":[2375],"or. you only":[2375],"r. you only ":[2375],". you only n":[2375]," you only ne":[2375],"you only nee":[2375],"ou only need":[2375],"u only need ":[2375]," only need t":[2375],"only need to":[2375],"nly need to ":[2375],"ly need to p":[2375],"y need to pr":[2375]," need to pro":[2375],"need to prov":[2375],"eed to provi":[2375],"ed to provid":[2375],"d to provide":[2375]," provide a n":[2375],"provide a na":[2375],"rovide a nam":[2375],"ovide a name":[2375],"vide a name ":[2375],"ide a name a":[2375],"de a name an":[2375],"e a name and":[2375]," a name and ":[2375],"a name and t":[2375]," name and th":[2375],"name and the":[2375],"ame and the ":[2375],"me and the r":[2375],"e and the re":[2375]," and the rel":[2375],"and the rela":[2375],"nd the relat":[2375],"d the relati":[2375]," the relativ":[2375,2406],"the relative":[2375,2406],"he relative ":[2375,2406],"e relative p":[2375,2406]," relative pa":[2375,2406],"relative pat":[2375,2406],"elative path":[2375,2406],"lative path ":[2375,2406],"ative path i":[2375],"tive path in":[2375],"ive path ins":[2375],"ve path insi":[2375],"e path insid":[2375]," path inside":[2375],"path inside ":[2375],"ath inside t":[2375],"th inside th":[2375],"h inside the":[2375],"nside the fo":[2375],"side the fol":[2375],"ide the fold":[2375],"de the folde":[2375],"e the folder":[2375]," the folder.":[2375],"the **custom":[2376],"he **custom.":[2376],"e **custom.f":[2376]," **custom.fr":[2376],"**custom.fra":[2376],"*custom.frag":[2376],"fragment.fx*":[2376],"ragment.fx**":[2376],"agment.fx** ":[2376],"gment.fx** f":[2376],"ment.fx** fi":[2376],"ent.fx** fil":[2376],"nt.fx** file":[2376],"t.fx** file ":[2376],".fx** file c":[2376],"fx** file co":[2376],"x** file con":[2376],"** file cont":[2376],"* file conta":[2376],"ile contains":[2376],"le contains ":[2376],"e contains t":[2376],"ntains the g":[2376],"tains the gl":[2376],"ains the gls":[2376],"ins the glsl":[2376],"ns the glsl ":[2376],"s the glsl c":[2376]," the glsl co":[2376],"the glsl cod":[2376],"he glsl code":[2376],"e glsl code.":[2376]," glsl code. ":[2376],"glsl code. t":[2376],"lsl code. th":[2376],"sl code. the":[2376],"l code. the ":[2376]," code. the p":[2376],"code. the pu":[2376],"ode. the pur":[2376],"de. the purp":[2376],"e. the purpo":[2376],". the purpos":[2376]," the purpose":[2376],"the purpose ":[2376],"he purpose o":[2376],"e purpose of":[2376]," purpose of ":[2376],"purpose of t":[2376],"urpose of th":[2376],"rpose of thi":[2376],"pose of this":[2376],"ose of this ":[2376],"se of this w":[2376],"e of this wi":[2376]," of this wik":[2376],"of this wiki":[2376],"f this wiki ":[2376]," this wiki a":[2376],"this wiki ar":[2376],"his wiki art":[2376],"is wiki arti":[2376],"s wiki artic":[2376]," wiki articl":[2376],"wiki article":[2376],"iki article ":[2376],"ki article i":[2376],"i article is":[2376]," article is ":[2376],"article is n":[2376],"rticle is no":[2376],"ticle is not":[2376],"icle is not ":[2376],"cle is not t":[2376],"le is not to":[2376],"e is not to ":[2376]," is not to t":[2376],"is not to te":[2376],"s not to tea":[2376]," not to teac":[2376],"not to teach":[2376],"ot to teach ":[2376],"t to teach y":[2376]," to teach yo":[2376],"to teach you":[2376],"o teach you ":[2376]," teach you h":[2376],"teach you ho":[2376],"each you how":[2376],"ach you how ":[2376],"ch you how t":[2376],"h you how to":[2376]," you how to ":[2376],"you how to c":[2376],"ou how to cr":[2376],"u how to cre":[2376]," create a fr":[2376],"create a fra":[2376],"reate a frag":[2376],"eate a fragm":[2376],"ate a fragme":[2376],"te a fragmen":[2376],"e a fragment":[2376],"ent shader o":[2376],"nt shader or":[2376],"t shader or ":[2376]," shader or h":[2376],"shader or ho":[2376],"hader or how":[2376],"ader or how ":[2376],"der or how i":[2376],"er or how it":[2376],"r or how it ":[2376]," or how it w":[2376],"or how it wo":[2376],"r how it wor":[2376],"ow it works.":[2376],"w it works. ":[2376]," it works. y":[2376],"it works. yo":[2376],"t works. you":[2376]," works. you ":[2376],"works. you s":[2376],"orks. you si":[2376],"rks. you sim":[2376],"ks. you simp":[2376],"s. you simpl":[2376],". you simply":[2376],"ly need to k":[2376],"y need to kn":[2376]," need to kno":[2376],"need to know":[2376],"eed to know ":[2376],"ed to know t":[2376],"d to know th":[2376]," to know tha":[2376],"to know that":[2376],"o know that ":[2376]," know that t":[2376],"know that th":[2376],"now that the":[2376],"ow that the ":[2376],"w that the c":[2376],"t the code c":[2376]," the code co":[2376],"the code con":[2376],"he code cont":[2376],"e code conta":[2376]," code contai":[2376],"code contain":[2376],"ode containe":[2376],"de contained":[2376],"ntained in y":[2376],"tained in yo":[2376],"ained in you":[2376],"ined in your":[2376],"ned in your ":[2376],"ed in your m":[2376],"d in your ma":[2376]," in your mai":[2376],"in your main":[2376],"n your main ":[2376]," your main f":[2376],"your main fu":[2376],"our main fun":[2376],"ur main func":[2376],"r main funct":[2376],"n function w":[2376]," be called o":[2376],"be called on":[2376],"e called onc":[2376]," called once":[2376],"called once ":[2376],"alled once f":[2376],"lled once fo":[2376],"led once for":[2376],"ed once for ":[2376],"d once for e":[2376]," once for ea":[2376],"once for eac":[2376],"nce for each":[2376],"ce for each ":[2376]," for each pi":[2376],"for each pix":[2376],"or each pixe":[2376],"r each pixel":[2376],"each pixel t":[2376],"ach pixel to":[2376],"ch pixel to ":[2376],"h pixel to c":[2376]," pixel to cr":[2376],"pixel to cre":[2376],"ixel to crea":[2376],"xel to creat":[2376],"el to create":[2376]," to create o":[2376],"to create on":[2376],"o create on ":[2376]," create on t":[2376],"create on th":[2376],"reate on the":[2376],"eate on the ":[2376],"ate on the t":[2376],"te on the te":[2376],"e on the tex":[2376]," on the text":[2376],"on the textu":[2376],"e texture. i":[2376]," texture. in":[2376],"texture. in ":[2376],"exture. in t":[2376],"xture. in th":[2376],"ture. in thi":[2376],"ure. in this":[2376],"re. in this ":[2376],"e. in this m":[2376],". in this ma":[2376]," in this mai":[2376],"in this main":[2376],"n this main ":[2376]," this main f":[2376],"this main fu":[2376],"his main fun":[2376],"is main func":[2376],"s main funct":[2376],"in function,":[2376],"n function, ":[2376]," function, y":[2376],"function, yo":[2376],"unction, you":[2376],"nction, you ":[2376],"ction, you o":[2376],"tion, you on":[2376],"ion, you onl":[2376],"on, you only":[2376],"n, you only ":[2376],"y know the c":[2376]," know the co":[2376],"know the coo":[2376],"now the coor":[2376],"ow the coord":[2376],"w the coordi":[2376]," the coordin":[2376],"the coordina":[2376],"he coordinat":[2376],"oordinates o":[2376,2416],"ordinates of":[2376,2416],"rdinates of ":[2376,2416],"dinates of t":[2376],"inates of th":[2376],"nates of the":[2376],"ates of the ":[2376],"tes of the c":[2376],"es of the cu":[2376],"s of the cur":[2376],"e current pi":[2376]," current pix":[2376],"current pixe":[2376],"urrent pixel":[2376],"rrent pixel ":[2376],"rent pixel i":[2376],"ent pixel in":[2376],"nt pixel in ":[2376],"t pixel in t":[2376]," pixel in th":[2376],"pixel in the":[2376],"ixel in the ":[2376],"xel in the f":[2376],"el in the fi":[2376],"l in the fin":[2376]," in the fina":[2376],"in the final":[2376],"n the final ":[2376]," the final t":[2376],"the final te":[2376],"he final tex":[2376],"e final text":[2376]," final textu":[2376],"final textur":[2376],"inal texture":[2376],"nal texture.":[2376],"s a simple c":[2377]," a simple co":[2377],"a simple cod":[2377]," simple code":[2377],"simple code ":[2377],"imple code w":[2377],"mple code wh":[2377],"ple code whi":[2377],"le code whic":[2377],"e code which":[2377]," code which ":[2377],"code which i":[2377],"ode which is":[2377],"de which is ":[2377],"e which is s":[2377]," which is se":[2377],"which is set":[2377],"hich is sett":[2377],"ich is setti":[2377],"ch is settin":[2377],"h is setting":[2377]," is setting ":[2377],"is setting a":[2377],"s setting al":[2377]," setting all":[2377],"setting all ":[2377],"etting all p":[2377],"tting all pi":[2377],"ting all pix":[2377],"ing all pixe":[2377],"ng all pixel":[2377],"g all pixels":[2377]," all pixels ":[2377],"all pixels t":[2377],"ll pixels to":[2377],"l pixels to ":[2377]," pixels to a":[2377],"pixels to a ":[2377],"ixels to a s":[2377],"xels to a sp":[2377],"els to a spe":[2377],"ls to a spec":[2377],"s to a speci":[2377],"a specific g":[2377]," specific gr":[2377],"specific gra":[2377],"pecific gray":[2377],"ecific gray.":[2377],"`javascript ":[2378],"    #ifdef g":[2379,2391,2546],"   #ifdef gl":[2379,2391,2546],"  #ifdef gl_":[2379,2391,2546]," #ifdef gl_e":[2379,2391,2546],"    precisio":[2380,2392,2547],"   precision":[2380,2392,2547],"  precision ":[2380,2392,2547]," precision h":[2380,2392,2547],"    void mai":[2383,2401,2550],"   void main":[2383,2401,2550],"  void main(":[2383,2401,2550]," void main(v":[2383,2401,2550],"main(void) {":[2383,2401,2532,2550],"     vec3 co":[2384,2402],"    vec3 col":[2384,2402],"   vec3 colo":[2384,2402],"  vec3 color":[2384,2402]," vec3 color ":[2384,2402],"vec3 color =":[2384,2402],"ec3 color = ":[2384,2402],"c3 color = v":[2384],"3 color = ve":[2384]," color = vec":[2384],"color = vec3":[2384],"olor = vec3(":[2384],"lor = vec3(0":[2384],"or = vec3(0.":[2384],"r = vec3(0.9":[2384]," = vec3(0.9,":[2384],"= vec3(0.9, ":[2384]," vec3(0.9, 0":[2384],"vec3(0.9, 0.":[2384],"ec3(0.9, 0.9":[2384],"c3(0.9, 0.9,":[2384],"3(0.9, 0.9, ":[2384],"(0.9, 0.9, 0":[2384],"0.9, 0.9, 0.":[2384],".9, 0.9, 0.9":[2384],"9, 0.9, 0.9)":[2384],", 0.9, 0.9);":[2384],"     gl_frag":[2385,2403,2551],"    gl_fragc":[2385,2403,2551],"   gl_fragco":[2385,2403,2551],"  gl_fragcol":[2385,2403,2551]," gl_fragcolo":[2385,2403,2533,2551],"ragcolor = v":[2385,2403,2533,2551],"agcolor = ve":[2385,2403,2533,2551],"gcolor = vec":[2385,2403,2533,2551],"color = vec4":[2385,2403,2533,2551],"olor = vec4(":[2385,2403,2533,2551],"lor = vec4(c":[2385,2403],"or = vec4(co":[2385,2403],"r = vec4(col":[2385,2403]," = vec4(colo":[2385,2403],"= vec4(color":[2385,2403]," vec4(color,":[2385,2403],"vec4(color, ":[2385,2403],"ec4(color, 1":[2385,2403],"c4(color, 1.":[2385,2403],"4(color, 1.0":[2385,2403],"(color, 1.0)":[2385,2403],"color, 1.0);":[2385,2403],"_fragcolor i":[2388],"fragcolor is":[2388],"ragcolor is ":[2388],"agcolor is t":[2388],"gcolor is th":[2388],"color is the":[2388],"olor is the ":[2388],"lor is the v":[2388],"or is the va":[2388],"r is the var":[2388]," is the vari":[2388],"is the varia":[2388],"s the variab":[2388]," the variabl":[2388,2435],"the variable":[2388,2435],"he variable ":[2388],"e variable i":[2388]," variable in":[2388],"variable in ":[2388],"ariable in w":[2388],"riable in wh":[2388],"iable in whi":[2388],"able in whic":[2388],"ble in which":[2388],"le in which ":[2388],"e in which y":[2388]," in which yo":[2388,2512],"in which you":[2388,2512],"n which you ":[2388]," which you p":[2388],"which you pu":[2388],"hich you put":[2388],"ich you put ":[2388],"ch you put t":[2388],"h you put th":[2388]," you put the":[2388],"you put the ":[2388],"ou put the c":[2388],"u put the co":[2388]," put the col":[2388],"put the colo":[2388],"ut the color":[2388],"t the color ":[2388],"the color ob":[2388],"he color obj":[2388],"e color obje":[2388]," color objec":[2388],"color object":[2388],"olor object ":[2388],"lor object y":[2388],"or object yo":[2388],"r object you":[2388]," object you ":[2388],"object you w":[2388],"bject you wa":[2388],"ject you wan":[2388],"ect you want":[2388],"ct you want ":[2388],"t you want t":[2388],"u want the p":[2388]," want the pi":[2388],"want the pix":[2388],"ant the pixe":[2388],"nt the pixel":[2388],"t the pixel ":[2388]," the pixel t":[2388],"the pixel to":[2388],"he pixel to ":[2388],"e pixel to b":[2388]," pixel to be":[2388],"pixel to be.":[2388],"here is a mo":[2389],"ere is a mor":[2389],"re is a more":[2389],"e is a more ":[2389]," is a more c":[2389],"is a more co":[2389],"s a more com":[2389],"re complex e":[2389],"e complex ex":[2389]," complex exa":[2389],"complex exam":[2389],"omplex examp":[2389],"mplex exampl":[2389],"plex example":[2389],"lex example ":[2389],"ex example u":[2389],"x example us":[2389]," example usi":[2389],"example usin":[2389],"xample using":[2389],"ample using ":[2389],"mple using 2":[2389],"ple using 2 ":[2389],"le using 2 s":[2389],"e using 2 sa":[2389]," using 2 sam":[2389],"using 2 samp":[2389],"sing 2 sampl":[2389],"ing 2 sample":[2389],"ng 2 sampler":[2389],"g 2 samplers":[2389]," 2 samplers ":[2389],"2 samplers a":[2389]," samplers an":[2389],"samplers and":[2389],"amplers and ":[2389],"mplers and m":[2389],"plers and mi":[2389],"lers and mix":[2389],"ers and mixi":[2389],"rs and mixin":[2389],"s and mixing":[2389]," and mixing ":[2389],"and mixing t":[2389],"nd mixing th":[2389],"d mixing the":[2389]," mixing thei":[2389],"mixing their":[2389],"ixing their ":[2389],"xing their c":[2389],"ing their co":[2389],"ng their col":[2389],"g their colo":[2389],"heir color e":[2389],"eir color eq":[2389],"ir color equ":[2389],"r color equa":[2389]," color equal":[2389],"color equall":[2389],"olor equally":[2389],"lor equally.":[2389],"or equally. ":[2389],"    varying ":[2395,2396,2549],"   varying v":[2395,2396,2549],"  varying ve":[2395,2396,2549]," varying vec":[2395,2396,2549],"ying vec2 vp":[2395],"ing vec2 vpo":[2395],"ng vec2 vpos":[2395],"g vec2 vposi":[2395]," vec2 vposit":[2395],"vec2 vpositi":[2395],"ec2 vpositio":[2395],"c2 vposition":[2395],"2 vposition;":[2395],"    uniform ":[2398,2399],"   uniform s":[2398,2399],"  uniform sa":[2398,2399]," uniform sam":[2398,2399]," sampler2d g":[2398],"sampler2d gr":[2398],"ampler2d gra":[2398],"mpler2d gras":[2398],"pler2d grass":[2398],"ler2d grass;":[2398]," sampler2d d":[2399],"sampler2d di":[2399],"ampler2d dir":[2399],"mpler2d dirt":[2399],"pler2d dirt;":[2399],"c3 color = m":[2402],"3 color = mi":[2402]," color = mix":[2402],"color = mix(":[2402],"olor = mix(t":[2402],"lor = mix(te":[2402],"or = mix(tex":[2402],"r = mix(text":[2402]," = mix(textu":[2402],"= mix(textur":[2402]," mix(texture":[2402],"mix(texture2":[2402],"ix(texture2d":[2402],"x(texture2d(":[2402],"(texture2d(d":[2402],"texture2d(di":[2402],"exture2d(dir":[2402],"xture2d(dirt":[2402],"ture2d(dirt,":[2402],"ure2d(dirt, ":[2402],"re2d(dirt, v":[2402],"e2d(dirt, vu":[2402],"2d(dirt, vuv":[2402],"d(dirt, vuv)":[2402],"(dirt, vuv).":[2402],"dirt, vuv).x":[2402],"irt, vuv).xy":[2402],"rt, vuv).xyz":[2402],"t, vuv).xyz,":[2402],", vuv).xyz, ":[2402]," vuv).xyz, t":[2402],"vuv).xyz, te":[2402],"uv).xyz, tex":[2402],"v).xyz, text":[2402],").xyz, textu":[2402],".xyz, textur":[2402],"xyz, texture":[2402],"yz, texture2":[2402],"z, texture2d":[2402],", texture2d(":[2402]," texture2d(g":[2402],"texture2d(gr":[2402],"exture2d(gra":[2402],"xture2d(gras":[2402],"ture2d(grass":[2402],"ure2d(grass,":[2402],"re2d(grass, ":[2402],"e2d(grass, v":[2402],"2d(grass, vu":[2402],"d(grass, vuv":[2402],"(grass, vuv)":[2402],"grass, vuv).":[2402],"rass, vuv).x":[2402],"ass, vuv).xy":[2402],"ss, vuv).xyz":[2402],"s, vuv).xyz,":[2402]," vuv).xyz, 0":[2402],"vuv).xyz, 0.":[2402],"uv).xyz, 0.5":[2402],"v).xyz, 0.5)":[2402],").xyz, 0.5);":[2402],"o use this c":[2406]," use this cu":[2406],"use this cus":[2406],"se this cust":[2406],"e this custo":[2406]," this custom":[2406],"this custom ":[2406],"his custom t":[2406],"is custom te":[2406],"s custom tex":[2406],"tom texture,":[2406],"om texture, ":[2406],"m texture, y":[2406],"ou need to m":[2406],"u need to ma":[2406],"ed to make y":[2406],"d to make yo":[2406]," to make you":[2406],"to make your":[2406],"o make your ":[2406]," make your f":[2406],"make your fo":[2406],"ake your fol":[2406],"ke your fold":[2406],"e your folde":[2406]," your folder":[2406],"your folder ":[2406],"our folder a":[2406],"ur folder av":[2406],"r folder ava":[2406]," folder avai":[2406],"folder avail":[2406],"older availa":[2406],"lder availab":[2406],"der availabl":[2406],"er available":[2406],"r available ":[2406],"ailable to y":[2406],"ilable to yo":[2406],"lable to you":[2406],"able to your":[2406],"ble to your ":[2406],"le to your b":[2406],"e to your ba":[2406]," to your bab":[2406],"to your baby":[2406],"o your babyl":[2406]," your babylo":[2406],"your babylon":[2406],"our babylon.":[2406],"ur babylon.j":[2406],"r babylon.js":[2406],"abylon.js ht":[2406],"bylon.js htm":[2406],"ylon.js html":[2406],"lon.js html/":[2406],"on.js html/j":[2406],"n.js html/ja":[2406],".js html/jav":[2406],"js html/java":[2406],"s html/javas":[2406]," html/javasc":[2406],"html/javascr":[2406],"tml/javascri":[2406],"ml/javascrip":[2406],"l/javascript":[2406],"/javascript ":[2406],"javascript f":[2406],"avascript fi":[2406],"vascript fil":[2406],"ascript file":[2406],"script files":[2406],"cript files ":[2406],"ript files a":[2406],"ipt files an":[2406],"pt files and":[2406],"t files and ":[2406]," files and u":[2406],"files and us":[2406],"iles and use":[2406],"les and use ":[2406],"es and use a":[2406],"s and use a ":[2406]," and use a *":[2406],"and use a **":[2406],"nd use a **c":[2406],"d use a **cu":[2406]," use a **cus":[2406],"use a **cust":[2406],"se a **custo":[2406],"e a **custom":[2406]," a **customp":[2406],"a **custompr":[2406]," **custompro":[2406],"**customproc":[2406],"*customproce":[2406],"customproced":[2406,2408,2524,2538,2540,2558,2560],"ustomprocedu":[2406,2408,2524,2538,2540,2558,2560],"stomprocedur":[2406,2408,2524,2538,2540,2558,2560],"tomprocedura":[2406,2408,2524,2538,2540,2558,2560],"omprocedural":[2406,2408,2524,2538,2540,2558,2560],"mproceduralt":[2406,2408,2524,2538,2540,2558,2560],"altexture** ":[2406],"ltexture** c":[2406],"texture** cl":[2406],"exture** cla":[2406],"xture** clas":[2406],"ture** class":[2406],"ure** class ":[2406],"re** class i":[2406],"e** class in":[2406],"** class ins":[2406],"* class inst":[2406]," class inste":[2406],"class instea":[2406],"lass instead":[2406],"ass instead ":[2406],"ss instead o":[2406],"instead of a":[2406],"nstead of a ":[2406],"stead of a s":[2406],"tead of a st":[2406],"ead of a sta":[2406],"ad of a stan":[2406],"d of a stand":[2406]," of a standa":[2406],"of a standar":[2406],"f a standard":[2406]," a standard ":[2406],"a standard o":[2406]," standard on":[2406],"standard one":[2406],"tandard one.":[2406],"andard one. ":[2406],"ndard one. t":[2406],"dard one. th":[2406],"ard one. the":[2406],"rd one. the ":[2406],"d one. the d":[2406]," one. the di":[2406],"one. the dif":[2406],"ne. the diff":[2406],"e. the diffe":[2406],". the differ":[2406],"he differenc":[2406],"e difference":[2406]," difference ":[2406],"difference i":[2406],"ifference is":[2406],"fference is ":[2406],"ference is o":[2406],"erence is on":[2406],"rence is onl":[2406],"ence is only":[2406],"nce is only ":[2406],"ce is only t":[2406],"e is only th":[2406]," is only tha":[2406],"is only that":[2406],"s only that ":[2406]," only that y":[2406],"only that yo":[2406],"nly that you":[2406],"ly that you ":[2406],"y that you s":[2406]," that you sp":[2406],"that you spe":[2406],"hat you spec":[2406],"at you speci":[2406],"t you specif":[2406]," you specify":[2406],"you specify ":[2406],"ou specify a":[2406],"u specify a ":[2406]," specify a n":[2406],"specify a ne":[2406],"pecify a new":[2406],"ecify a new ":[2406],"cify a new p":[2406],"ify a new pa":[2406],"fy a new par":[2406],"y a new para":[2406],"parameter wh":[2406],"arameter whi":[2406],"rameter whic":[2406],"ameter which":[2406],"meter which ":[2406],"eter which i":[2406],"ter which is":[2406],"er which is ":[2406],"r which is t":[2406],"ich is the r":[2406],"ch is the re":[2406],"h is the rel":[2406]," is the rela":[2406],"is the relat":[2406],"s the relati":[2406],"ative path t":[2406],"tive path to":[2406],"ive path to ":[2406],"ve path to t":[2406],"ath to the f":[2406,2538],"th to the fo":[2406],"h to the fol":[2406]," to the fold":[2406],"to the folde":[2406],"o the folder":[2406]," the folder ":[2406],"the folder c":[2406],"he folder co":[2406],"e folder con":[2406],"containing t":[2406],"ontaining th":[2406],"ntaining the":[2406],"taining the ":[2406],"aining the c":[2406],"ining the cu":[2406],"ning the cus":[2406],"ing the cust":[2406],"ng the custo":[2406],"g the custom":[2406],"tom texture.":[2406],"om texture. ":[2406],"m texture. b":[2406]," texture. ba":[2406],"texture. bab":[2406],"exture. baby":[2406],"xture. babyl":[2406],"ture. babylo":[2406],"ure. babylon":[2406],"re. babylon.":[2406],"e. babylon.j":[2406],". babylon.js":[2406,2537],"on.js will a":[2406,2537],"n.js will au":[2406,2537],".js will aut":[2406,2537],"js will auto":[2406,2537],"s will autom":[2406,2537],"omatically r":[2406],"matically re":[2406],"atically rea":[2406],"tically read":[2406],"ically read ":[2406],"cally read t":[2406],"ally read th":[2406],"lly read the":[2406],"ly read the ":[2406],"y read the c":[2406]," read the co":[2406],"read the con":[2406],"ead the conf":[2406],"ad the confi":[2406],"d the config":[2406]," the config.":[2406,2560],"the config.j":[2406,2560],"he config.js":[2406,2560],"e config.jso":[2406,2560],"config.json ":[2406,2560],"onfig.json a":[2406],"nfig.json an":[2406],"fig.json and":[2406],"ig.json and ":[2406],"g.json and c":[2406],".json and cu":[2406],"json and cus":[2406],"son and cust":[2406],"on and custo":[2406],"n and custom":[2406]," and custom.":[2406],"and custom.f":[2406],"nd custom.fr":[2406],"d custom.fra":[2406],"ent.fx files":[2406],"nt.fx files ":[2406],"t.fx files a":[2406],".fx files an":[2406],"fx files and":[2406],"x files and ":[2406]," files and l":[2406],"files and lo":[2406],"iles and loa":[2406],"les and load":[2406],"es and load ":[2406],"s and load e":[2406]," and load ev":[2406],"and load eve":[2406],"nd load ever":[2406],"d load every":[2406]," load everyt":[2406],"load everyth":[2406],"oad everythi":[2406],"ad everythin":[2406],"d everything":[2406],"everything f":[2406],"verything fo":[2406],"erything for":[2406],"rything for ":[2406],"ything for y":[2406],"thing for yo":[2406],"hing for you":[2406],"ing for you.":[2406]," babylon.cus":[2408,2540,2558],"babylon.cust":[2408,2540,2558],"abylon.custo":[2408,2540,2558],"bylon.custom":[2408,2540,2558],"ylon.customp":[2408,2540,2558],"lon.custompr":[2408,2540,2558],"on.custompro":[2408,2540,2558],"n.customproc":[2408,2540,2558],".customproce":[2408,2540,2558],"\"texture\", \"":[2408],"texture\", \".":[2408],"exture\", \"./":[2408],"xture\", \"./p":[2408],"ture\", \"./pa":[2408],"ure\", \"./pat":[2408],"re\", \"./path":[2408],"e\", \"./patht":[2408],"\", \"./pathto":[2408],", \"./pathtot":[2408]," \"./pathtote":[2408],"\"./pathtotex":[2408],"./pathtotext":[2408],"/pathtotextu":[2408],"pathtotextur":[2408],"athtotexture":[2408],"thtotexture\"":[2408],"htotexture\",":[2408],"totexture\", ":[2408],"otexture\", 1":[2408],"1. global al":[2410],". global alt":[2410]," global alte":[2410],"global alter":[2410],"lobal alteri":[2410],"obal alterin":[2410],"bal altering":[2410],"al altering ":[2410],"l altering f":[2410]," altering fu":[2410],"altering fun":[2410],"ltering func":[2410],"tering funct":[2410],"ering functi":[2410],"ring functio":[2410],"ing function":[2410],"ng function,":[2410],"g function, ":[2410]," function, w":[2410],"function, wh":[2410],"unction, whi":[2410],"nction, whic":[2410]," a part of b":[2410],"a part of ba":[2410]," part of bab":[2410],"part of baby":[2410],"art of babyl":[2410],"rt of babylo":[2410],"t of babylon":[2410],"of babylon.m":[2410],"f babylon.me":[2410],"abylon.mesh:":[2410],"sh.optimizei":[2412],"h.optimizein":[2412],".optimizeind":[2412],"optimizeindi":[2412],"ptimizeindic":[2412],"timizeindice":[2412],"imizeindices":[2412],"mizeindices(":[2412],"izeindices(f":[2412],"zeindices(fu":[2412],"eindices(fun":[2412],"indices(func":[2412],"ndices(funct":[2412],"dices(functi":[2412],"ices(functio":[2412],"ces(function":[2412],"es(function(":[2412],"s(function()":[2412],"//do whateve":[2413],"/do whatever":[2413],"do whatever ":[2413],"o whatever y":[2413],"r you want h":[2413]," you want he":[2413],"you want her":[2413],"ou want here":[2413],"this option ":[2416],"his option a":[2416],"is option al":[2416],"s option alt":[2416]," option alte":[2416],"option alter":[2416],"ption alters":[2416],"tion alters(":[2416],"ion alters(!":[2416],"on alters(!)":[2416],"n alters(!) ":[2416]," alters(!) t":[2416],"alters(!) th":[2416],"lters(!) the":[2416],"ters(!) the ":[2416],"ers(!) the m":[2416],"rs(!) the me":[2416],"s(!) the mes":[2416],"(!) the mesh":[2416],"!) the mesh'":[2416],") the mesh's":[2416],"the mesh's i":[2416],"he mesh's in":[2416],"e mesh's ind":[2416]," mesh's indi":[2416],"mesh's indic":[2416],"esh's indice":[2416],"sh's indices":[2416],"h's indices ":[2416],"'s indices o":[2416],"s indices or":[2416]," indices ord":[2416],"indices orde":[2416],"ndices order":[2416],"dices order.":[2416],"ices order. ":[2416],"ces order. i":[2416],"es order. it":[2416],"s order. it ":[2416]," order. it i":[2416],"order. it is":[2416],"rder. it is ":[2416],"der. it is f":[2416],"er. it is fa":[2416],"r. it is fas":[2416],". it is fast":[2416]," it is faste":[2416],"it is faster":[2416],"t is faster,":[2416]," is faster, ":[2416],"is faster, b":[2416],"s faster, bu":[2416]," faster, but":[2416],"faster, but ":[2416],"aster, but m":[2416],"ster, but mi":[2416],"ter, but mig":[2416],"er, but migh":[2416],"r, but might":[2416],", but might ":[2416]," but might c":[2416],"but might ch":[2416],"ut might cha":[2416],"t might chan":[2416],"change the u":[2416],"hange the uv":[2416],"ange the uv ":[2416],"nge the uv c":[2416],"ge the uv co":[2416],"e the uv coo":[2416],"dinates of v":[2416],"inates of ve":[2416],"nates of ver":[2416],"ates of vert":[2416],"tes of verti":[2416],"es of vertic":[2416],"f vertices o":[2416]," vertices of":[2416],"vertices of ":[2416],"ertices of t":[2416],"rtices of th":[2416],"tices of the":[2416],"ices of the ":[2416],"ces of the m":[2416]," the mesh. i":[2416],"the mesh. if":[2416],"he mesh. if ":[2416],"e mesh. if t":[2416]," mesh. if th":[2416],"mesh. if tha":[2416],"esh. if that":[2416],"sh. if that ":[2416],"h. if that i":[2416],". if that is":[2416]," if that is ":[2416],"if that is t":[2416],"f that is th":[2416]," that is the":[2416],"that is the ":[2416],"hat is the c":[2416],"at is the ca":[2416],"t is the cas":[2416],"is the case,":[2416],"s the case, ":[2416]," the case, u":[2416],"the case, us":[2416],"he case, use":[2416],"e case, use:":[2416],"2. optimizat":[2417],". optimizati":[2417],"ification - ":[2417],"fication - t":[2417],"ication - th":[2417],"cation - the":[2417],"ation - the ":[2417],"tion - the s":[2417],"ion - the si":[2417],"on - the sim":[2417],"n - the simp":[2417]," - the simpl":[2417],"- the simpli":[2417],"ification se":[2417],"fication set":[2417],"ication sett":[2417],"cation setti":[2417],"ation settin":[2417],"tion setting":[2417],"ion settings":[2417],"on settings ":[2417],"n settings n":[2417]," settings no":[2417],"settings now":[2417],"ettings now ":[2417],"ttings now i":[2417],"tings now in":[2417],"ings now inc":[2417],"ngs now incl":[2417],"gs now inclu":[2417],"s now includ":[2417]," now include":[2417],"now include ":[2417],"ow include a":[2417],"w include a ":[2417]," include a n":[2417],"include a ne":[2417],"nclude a new":[2417],"clude a new ":[2417],"lude a new v":[2417],"ude a new va":[2417],"de a new var":[2417],"e a new vari":[2417]," a new varia":[2417],"a new variab":[2417]," new variabl":[2417],"new variable":[2417],"ew variable ":[2417],"w variable :":[2417]," variable : ":[2417],"variable : o":[2417],"ariable : op":[2417],"riable : opt":[2417],"iable : opti":[2417],"able : optim":[2417],"ble : optimi":[2417],"le : optimiz":[2417],"e : optimize":[2417]," : optimizem":[2417],": optimizeme":[2417],"ptimizemesh,":[2417],"timizemesh, ":[2417],"imizemesh, w":[2417],"mizemesh, wh":[2417],"izemesh, whi":[2417],"zemesh, whic":[2417],"emesh, which":[2417],"mesh, which ":[2417],"esh, which i":[2417],"sh, which is":[2417],"h, which is ":[2417],"which is a b":[2417],"hich is a bo":[2417],"ich is a boo":[2417],"ch is a bool":[2417],"h is a boole":[2417]," is a boolea":[2417],"is a boolean":[2417],"s a boolean ":[2417]," a boolean t":[2417],"a boolean th":[2417]," boolean tha":[2417],"boolean that":[2417],"oolean that ":[2417],"olean that d":[2417],"lean that de":[2417],"ean that def":[2417],"an that defa":[2417],"n that defau":[2417]," that defaul":[2417],"that default":[2417],"hat defaults":[2417],"at defaults ":[2417],"t defaults t":[2417],"ts to false.":[2417],"s to false. ":[2417],"to false. if":[2417],"o false. if ":[2417]," false. if s":[2417],"false. if se":[2417],"alse. if set":[2417],"lse. if set ":[2417],"se. if set t":[2417]," to true, a ":[2417],"to true, a n":[2417],"o true, a no":[2417]," true, a non":[2417],"true, a non-":[2417],"rue, a non-a":[2417],"ue, a non-al":[2417],"e, a non-alt":[2417],", a non-alte":[2417]," a non-alter":[2417],"a non-alteri":[2417]," non-alterin":[2417],"non-altering":[2417],"on-altering ":[2417],"n-altering m":[2417],"-altering me":[2417],"altering mes":[2417],"ltering mesh":[2417],"tering mesh ":[2417],"ering mesh o":[2417],"ring mesh op":[2417],"ing mesh opt":[2417],"ng mesh opti":[2417],"g mesh optim":[2417],"timization w":[2417],"imization wi":[2417],"mization wil":[2417],"ization will":[2417],"zation will ":[2417],"ation will r":[2417],"tion will ru":[2417],"ion will run":[2417],"on will run ":[2417],"n will run d":[2417]," will run du":[2417],"will run dur":[2417],"ill run duri":[2417],"ll run durin":[2417],"l run during":[2417]," run during ":[2417],"run during t":[2417],"un during th":[2417],"n during the":[2417]," during the ":[2417],"during the m":[2417],"uring the me":[2417],"ring the mes":[2417],"ng the mesh'":[2417],"g the mesh's":[2417],"the mesh's p":[2417],"he mesh's pr":[2417],"e mesh's pre":[2417]," mesh's prep":[2417],"mesh's prepa":[2417],"esh's prepar":[2417],"sh's prepara":[2417],"h's preparat":[2417],"'s preparati":[2417],"s preparatio":[2417]," preparation":[2417],"preparation ":[2417],"reparation f":[2417],"eparation fo":[2417],"paration for":[2417],"aration for ":[2417],"ration for d":[2417],"ation for de":[2417],"tion for dec":[2417],"ion for deci":[2417],"on for decim":[2417],"n for decima":[2417]," for decimat":[2417],"for decimati":[2417],"or decimatio":[2417,2427],"r decimation":[2417,2427],"ation. the s":[2417],"tion. the si":[2417],"ion. the sim":[2417],"on. the simp":[2417],"n. the simpl":[2417],". the simpli":[2417,2432],"lification w":[2417,2432],"ification wi":[2417,2432],"fication wil":[2417,2432],"ication will":[2417,2432],"cation will ":[2417,2432],"n will run o":[2417]," will run on":[2417],"will run on ":[2417],"ill run on a":[2417],"ll run on a ":[2417],"l run on a t":[2417]," run on a te":[2417],"run on a tem":[2417],"un on a temp":[2417],"n on a tempo":[2417]," on a tempor":[2417],"on a tempora":[2417],"n a temporar":[2417]," a temporary":[2417],"a temporary ":[2417]," temporary a":[2417],"temporary ar":[2417],"emporary arr":[2417],"mporary arra":[2417],"porary array":[2417],"orary array ":[2417],"rary array o":[2417],"ary array of":[2417],"ry array of ":[2417],"y array of v":[2417],"array of ver":[2417],"rray of vert":[2417],"ray of verti":[2417],"ay of vertic":[2417],"y of vertice":[2417],"f vertices a":[2417],"rtices and w":[2417],"tices and wi":[2417],"ices and wil":[2417],"ces and will":[2417],"es and will ":[2417],"s and will c":[2417],"and will cor":[2417],"nd will corr":[2417],"d will corre":[2417]," will correl":[2417],"will correla":[2417],"ill correlat":[2417],"ll correlate":[2417],"l correlate ":[2417]," correlate t":[2417],"correlate th":[2417],"orrelate the":[2417],"rrelate the ":[2417],"relate the n":[2417],"elate the ne":[2417],"late the new":[2417],"ate the new ":[2417],"te the new v":[2417],"e the new ve":[2417]," the new ver":[2417],"the new vert":[2417],"he new verti":[2417],"e new vertic":[2417]," new vertice":[2417],"new vertices":[2417],"ew vertices'":[2417],"w vertices' ":[2417]," vertices' p":[2417],"vertices' po":[2417],"ertices' pos":[2417],"rtices' posi":[2417],"tices' posit":[2417],"ices' positi":[2417],"ces' positio":[2417],"s' positions":[2417],"' positions ":[2417]," positions w":[2417],"positions wi":[2417],"ositions wit":[2417],"sitions with":[2417],"itions with ":[2417],"s with the o":[2417]," with the ol":[2417],"with the old":[2417],"ith the old ":[2417],"th the old u":[2417],"h the old uv":[2417]," the old uv/":[2417],"the old uv/c":[2417],"he old uv/co":[2417],"e old uv/col":[2417]," old uv/colo":[2417],"old uv/color":[2417],"ld uv/color ":[2417],"d uv/color i":[2417]," uv/color in":[2417],"uv/color inf":[2417],"v/color info":[2417],"/color infor":[2417],"color inform":[2417],"olor informa":[2417],"lor informat":[2417],"or informati":[2417],"r informatio":[2417],"tion. this i":[2417],"ion. this is":[2417],"on. this is ":[2417],"n. this is t":[2417],"his is the b":[2417],"is is the be":[2417],"s is the bet":[2417]," is the bett":[2417],"is the bette":[2417],"s the better":[2417]," the better ":[2417,2433],"the better o":[2417],"he better op":[2417],"e better opt":[2417]," better opti":[2417],"better optio":[2417],"etter option":[2417],"tter option,":[2417],"ter option, ":[2417],"er option, b":[2417],"r option, bu":[2417]," option, but":[2417],"option, but ":[2417],"ption, but a":[2417],"tion, but al":[2417],"ion, but als":[2417],"on, but also":[2417],"n, but also ":[2417],", but also t":[2417]," but also th":[2417],"but also the":[2417],"ut also the ":[2417],"t also the s":[2417]," also the sl":[2417],"also the slo":[2417],"lso the slow":[2417],"so the slowe":[2417],"o the slower":[2417],"the slower o":[2417],"he slower op":[2417],"e slower opt":[2417]," slower opti":[2417],"slower optio":[2417],"lower option":[2417],"ower option ":[2417],"wer option (":[2417],"er option (w":[2417],"r option (wi":[2417]," option (wil":[2417],"option (will":[2417],"ption (will ":[2417],"tion (will b":[2417],"ion (will be":[2417],"on (will be ":[2417],"n (will be n":[2417]," (will be no":[2417],"(will be not":[2417],"will be noti":[2417],"ill be notic":[2417],"ll be notice":[2417],"l be noticea":[2417]," be noticeab":[2417],"be noticeabl":[2417],"e noticeable":[2417],"eable with v":[2417],"able with ve":[2417],"ble with ver":[2417],"le with very":[2417],"e with very ":[2417]," with very l":[2417],"with very la":[2417],"ith very lar":[2417],"th very larg":[2417],"h very large":[2417]," very large ":[2417],"very large m":[2417],"ery large me":[2417],"ry large mes":[2417],"y large mesh":[2417]," large meshe":[2417],"large meshes":[2417],"arge meshes ":[2417],"rge meshes l":[2417],"ge meshes li":[2417],"e meshes lik":[2417],"eshes like t":[2417],"shes like th":[2417],"hes like the":[2417],"es like the ":[2417],"s like the d":[2417]," like the de":[2417],"like the dem":[2417],"ike the demo":[2417],"ke the demo ":[2417],"e the demo s":[2417]," the demo sk":[2417],"the demo sku":[2417],"he demo skul":[2417],"e demo skull":[2417]," demo skull ":[2417],"demo skull -":[2417],"emo skull - ":[2417],"mo skull - h":[2417],"o skull - ht":[2417]," skull - htt":[2417],"skull - http":[2417],"kull - http:":[2417],"ull - http:/":[2417],"ll - http://":[2417],"l - http://w":[2417]," - http://ww":[2417],"- http://www":[2417],"m/#2jbsna#4)":[2417],"/#2jbsna#4).":[2417],"check which ":[2418],"heck which o":[2418],"eck which on":[2418],"ck which one":[2418],"k which one ":[2418]," which one o":[2418],"which one of":[2418],"hich one of ":[2418],"ich one of t":[2418],"ch one of th":[2418],"one of the m":[2418],"ne of the me":[2418],"e of the met":[2418]," of the meth":[2418],"of the metho":[2418],"f the method":[2418]," the methods":[2418],"the methods ":[2418],"he methods w":[2418],"e methods wo":[2418]," methods wor":[2418],"methods work":[2418],"ethods works":[2418],"thods works ":[2418],"hods works b":[2418],"ods works be":[2418],"ds works bes":[2418],"s works best":[2418]," works best ":[2418],"works best f":[2418],"orks best fo":[2418],"rks best for":[2418],"ks best for ":[2418],"s best for y":[2418]," best for yo":[2418],"best for you":[2418],"est for you.":[2418],"st for you. ":[2418],"t for you. b":[2418]," for you. bo":[2418],"for you. bot":[2418],"or you. both":[2418],"r you. both ":[2418]," you. both h":[2418],"you. both ha":[2418],"ou. both hav":[2418],"u. both have":[2418],". both have ":[2418]," both have t":[2418],"both have th":[2418],"oth have the":[2418],"th have thei":[2418],"h have their":[2418]," have their ":[2418],"have their u":[2418],"ave their up":[2418],"ve their up ":[2418],"e their up a":[2418]," their up an":[2418],"their up and":[2418],"heir up and ":[2418],"eir up and d":[2418],"ir up and do":[2418],"r up and dow":[2418]," up and down":[2418],"up and down ":[2418],"p and down s":[2418]," and down si":[2418],"and down sid":[2418],"nd down side":[2418],"d down sides":[2418]," down sides,":[2418],"down sides, ":[2418],"own sides, f":[2418],"wn sides, fo":[2418],"n sides, for":[2418]," sides, for ":[2418],"sides, for b":[2418],"ides, for be":[2418],"des, for bet":[2418],"es, for bett":[2418],"s, for bette":[2418],", for better":[2418],"for better r":[2418],"or better re":[2418],"r better res":[2418]," better resu":[2418],"better resul":[2418],"etter result":[2418],"tter results":[2418],"ter results ":[2418],"er results u":[2418],"r results us":[2418]," results use":[2418],"results use ":[2418],"esults use t":[2418],"sults use th":[2418],"ults use the":[2418],"lts use the ":[2418],"ts use the 2":[2418],"s use the 2n":[2418]," use the 2nd":[2418],"use the 2nd ":[2418],"se the 2nd o":[2418],"e the 2nd op":[2418]," the 2nd opt":[2418],"the 2nd opti":[2418],"he 2nd optio":[2418],"e 2nd option":[2418]," 2nd option ":[2418],"2nd option (":[2418],"nd option (s":[2418],"d option (se":[2418]," option (set":[2418],"option (set ":[2418],"ption (set o":[2418],"tion (set op":[2418],"ion (set opt":[2418],"on (set opti":[2418],"n (set optim":[2418]," (set optimi":[2418],"(set optimiz":[2418],"set optimize":[2418],"et optimizem":[2418],"t optimizeme":[2418],"timizemesh t":[2418],"imizemesh to":[2418],"mizemesh to ":[2418],"izemesh to t":[2418],"zemesh to tr":[2418],"emesh to tru":[2418],"mesh to true":[2418],"esh to true ":[2418],"sh to true i":[2418],"h to true in":[2418]," to true in ":[2418],"to true in t":[2418],"o true in th":[2418]," true in the":[2418],"true in the ":[2418],"rue in the s":[2418],"ue in the se":[2418],"e in the set":[2418]," in the sett":[2418],"in the setti":[2418],"n the settin":[2418]," the setting":[2418],"the settings":[2418],"he settings)":[2418],"e settings).":[2418],"#developing ":[2419],"developing f":[2419],"eveloping fu":[2419],"veloping fur":[2419],"eloping furt":[2419],"loping furth":[2419],"oping furthe":[2419],"ping further":[2419],"ing further ":[2419],"ng further s":[2419],"g further si":[2419]," further sim":[2419],"further simp":[2419],"urther simpl":[2419],"rther simpli":[2419],"ther simplif":[2419],"her simplifi":[2419],"nt to add a ":[2420],"t to add a n":[2420]," to add a ne":[2420],"to add a new":[2420],"o add a new ":[2420]," add a new s":[2420],"add a new si":[2420],"dd a new sim":[2420],"d a new simp":[2420]," a new simpl":[2420],"a new simpli":[2420]," new simplif":[2420],"new simplifi":[2420],"ew simplific":[2420],"w simplifica":[2420],"n algorithm ":[2420]," algorithm t":[2420],"algorithm th":[2420],"lgorithm the":[2420],"gorithm ther":[2420],"orithm there":[2420],"rithm there ":[2420],"ithm there a":[2420],"thm there ar":[2420],"hm there are":[2420],"m there are ":[2420]," there are a":[2420],"there are a ":[2420],"here are a f":[2420],"ere are a fe":[2420],"re are a few":[2420],"e are a few ":[2420]," are a few s":[2420],"are a few st":[2420],"re a few ste":[2420],"e a few step":[2420]," a few steps":[2420],"a few steps ":[2420]," few steps t":[2420],"few steps th":[2420],"ew steps tha":[2420],"w steps that":[2420]," steps that ":[2420],"steps that a":[2420],"teps that ar":[2420],"eps that are":[2420],"ps that are ":[2420],"s that are r":[2420]," that are re":[2420],"that are req":[2420],"hat are requ":[2420],"at are requi":[2420],"t are requir":[2420]," are require":[2420],"are required":[2420],"re required:":[2420],"1. create a ":[2421],". create a c":[2421]," create a cl":[2421],"create a cla":[2421],"reate a clas":[2421],"eate a class":[2421],"ate a class ":[2421],"te a class t":[2421],"e a class th":[2421],"class that i":[2421],"lass that im":[2421],"ass that imp":[2421],"ss that impl":[2421],"s that imple":[2421]," that implem":[2421],"that impleme":[2421],"hat implemen":[2421],"at implement":[2421],"t implements":[2421]," implements ":[2421],"implements t":[2421],"mplements th":[2421],"plements the":[2421],"lements the ":[2421],"ements the b":[2421],"ments the ba":[2421],"ents the bab":[2421],"nts the baby":[2421],"ts the babyl":[2421],"s the babylo":[2421],"he babylon.i":[2421],"e babylon.is":[2421]," babylon.isi":[2421],"babylon.isim":[2421],"abylon.isimp":[2421],"bylon.isimpl":[2421],"ylon.isimpli":[2421],"lon.isimplif":[2421],"on.isimplifi":[2421],"n.isimplifie":[2421],".isimplifier":[2421],"isimplifier ":[2421],"simplifier i":[2421],"implifier in":[2421],"mplifier int":[2421],"plifier inte":[2421],"lifier inter":[2421],"ifier interf":[2421],"fier interfa":[2421],"ier interfac":[2421],"er interface":[2421],"r interface ":[2421]," interface (":[2421],"interface (a":[2421],"nterface (an":[2421],"terface (and":[2421],"erface (and ":[2421],"rface (and o":[2421],"face (and of":[2421],"ace (and of ":[2421],"ce (and of c":[2421],"e (and of co":[2421]," (and of cou":[2421],"(and of cour":[2421],"and of cours":[2421],"nd of course":[2421],"d of course ":[2421]," of course i":[2421],"of course im":[2421],"f course imp":[2421]," course impl":[2421],"course imple":[2421],"ourse implem":[2421],"urse impleme":[2421],"rse implemen":[2421],"se implement":[2421],"e implement ":[2421]," implement t":[2421],"implement th":[2421],"mplement the":[2421],"plement the ":[2421],"lement the f":[2421],"ement the fu":[2421],"ment the fun":[2421],"ent the func":[2421],"nt the funct":[2421],"t the functi":[2421],"he function!":[2421],"e function! ":[2421]," function! :":[2421],"function! :-":[2421],"unction! :-)":[2421],"nction! :-) ":[2421],"ction! :-) )":[2421],"2. add the t":[2422],". add the ty":[2422]," add the typ":[2422],"add the type":[2422],"dd the type ":[2422],"d the type o":[2422],"ication to t":[2422],"cation to th":[2422],"ion to the s":[2422],"on to the si":[2422],"n to the sim":[2422]," to the simp":[2422],"to the simpl":[2422],"o the simpli":[2422],"cationtype e":[2422],"ationtype en":[2422],"tiontype enu":[2422],"iontype enum":[2422],"3. add the c":[2423],". add the cl":[2423]," add the cla":[2423],"add the clas":[2423],"dd the class":[2423],"d the class ":[2423]," the class i":[2423],"the class in":[2423],"he class ini":[2423],"e class init":[2423]," class init ":[2423],"class init i":[2423],"lass init in":[2423],"ass init in ":[2423],"ss init in t":[2423],"s init in th":[2423]," init in the":[2423],"init in the ":[2423],"nit in the m":[2423],"it in the me":[2423],"t in the mes":[2423]," in the mesh":[2423],"in the mesh.":[2423],"n the mesh.s":[2423]," the mesh.si":[2423],"the mesh.sim":[2423],"he mesh.simp":[2423],"e mesh.simpl":[2423]," mesh.simpli":[2423],"sh.simplify ":[2423],"h.simplify f":[2423],".simplify fu":[2423],"simplify fun":[2423,2435],"implify func":[2423,2435],"mplify funct":[2423,2435],"plify functi":[2423,2435],"lify functio":[2423,2435],"ify function":[2423,2435],"fy function ":[2423,2435],"y function (":[2423],"function (th":[2423],"unction (the":[2423],"nction (the ":[2423],"ction (the i":[2423],"tion (the in":[2423],"ion (the inn":[2423],"on (the inne":[2423],"n (the inner":[2423]," (the inner ":[2423],"(the inner f":[2423],"the inner fu":[2423],"he inner fun":[2423],"e inner func":[2423]," inner funct":[2423],"inner functi":[2423],"nner functio":[2423],"ner function":[2423],"er function ":[2423],"r function \"":[2423]," function \"g":[2423],"function \"ge":[2423],"unction \"get":[2423],"nction \"gets":[2423],"ction \"getsi":[2423],"tion \"getsim":[2423],"ion \"getsimp":[2423],"on \"getsimpl":[2423],"n \"getsimpli":[2423]," \"getsimplif":[2423],"\"getsimplifi":[2423],"getsimplifie":[2423],"etsimplifier":[2423],"tsimplifier\"":[2423],"simplifier\" ":[2423],"implifier\" s":[2423],"mplifier\" sh":[2423],"plifier\" sho":[2423],"lifier\" shou":[2423],"ifier\" shoul":[2423],"fier\" should":[2423],"ier\" should ":[2423],"er\" should c":[2423],"r\" should co":[2423],"\" should con":[2423]," should cont":[2423],"should conta":[2423],"hould contai":[2423],"ould contain":[2423],"uld contain ":[2423],"ld contain y":[2423],"d contain yo":[2423]," contain you":[2423],"contain your":[2423],"ontain your ":[2423],"ntain your t":[2423],"tain your ty":[2423],"ain your typ":[2423],"in your type":[2423],"n your type)":[2423]," your type).":[2423],"#accessing t":[2426],"accessing th":[2426],"ccessing the":[2426],"cessing the ":[2426],"essing the s":[2426],"ssing the si":[2426],"sing the sim":[2426],"ing the simp":[2426],"ng the simpl":[2426],"g the simpli":[2426],"ification cl":[2426],"fication cla":[2426],"ication clas":[2426],"cation class":[2426],"ation class ":[2426],"tion class d":[2426],"ion class di":[2426],"on class dir":[2426],"n class dire":[2426]," class direc":[2426],"class direct":[2426],"lass directl":[2426],"ass directly":[2426],"access the q":[2427],"ccess the qu":[2427],"cess the qua":[2427],"ess the quad":[2427],"ss the quadr":[2427],"s the quadra":[2427]," the quadrat":[2427],"the quadrati":[2427],"he quadratic":[2427],"e quadratic ":[2427]," quadratic e":[2427],"quadratic er":[2427],"uadratic err":[2427],"adratic erro":[2427],"dratic error":[2427],"ratic error ":[2427],"atic error d":[2427],"tic error de":[2427],"ic error dec":[2427],"c error deci":[2427]," error decim":[2427],"error decima":[2427],"rror decimat":[2427],"ror decimati":[2427],"decimation d":[2427],"ecimation di":[2427],"cimation dir":[2427],"imation dire":[2427],"mation direc":[2427],"ation direct":[2427],"tion directl":[2427],"ion directly":[2427],"on directly ":[2427],"n directly a":[2427]," directly an":[2427],"directly and":[2427],"irectly and ":[2427],"rectly and p":[2427],"ectly and pl":[2427],"ctly and pla":[2427],"tly and play":[2427],"ly and play ":[2427],"y and play w":[2427]," and play wi":[2427],"and play wit":[2427],"nd play with":[2427],"d play with ":[2427]," play with i":[2427],"play with it":[2427],"lay with its":[2427],"ay with its ":[2427],"y with its f":[2427]," with its fe":[2427],"with its fea":[2427],"ith its feat":[2427],"th its featu":[2427],"h its featur":[2427]," its feature":[2427],"its features":[2427],"ts features.":[2427],"s features. ":[2427]," features. y":[2427],"features. yo":[2427],"eatures. you":[2427],"atures. you ":[2427],"tures. you c":[2427],"ures. you ca":[2427],"res. you can":[2427],"s. you can d":[2427],". you can do":[2427],"u can do tha":[2427]," can do that":[2427],"can do that ":[2427],"an do that b":[2427],"n do that by":[2427]," do that by ":[2427],"do that by c":[2427],"o that by cr":[2427]," that by cre":[2427],"that by crea":[2427],"hat by creat":[2427],"at by creati":[2427],"t by creatin":[2427],"eating an ob":[2427],"ating an obj":[2427],"ting an obje":[2427]," an object o":[2427],"an object of":[2427],"n object of ":[2427]," the class q":[2427],"the class qu":[2427],"he class qua":[2427],"e class quad":[2427]," class quadr":[2427],"class quadra":[2427],"lass quadrat":[2427],"ass quadrati":[2427],"ss quadratic":[2427],"s quadratice":[2427]," quadraticer":[2427,2429],"quadraticerr":[2427,2429],"uadraticerro":[2427,2429],"adraticerror":[2427,2429],"draticerrors":[2427,2429],"raticerrorsi":[2427,2429],"aticerrorsim":[2427,2429],"ticerrorsimp":[2427,2429],"icerrorsimpl":[2427,2429],"cerrorsimpli":[2427,2429],"errorsimplif":[2427,2429],"rrorsimplifi":[2427,2429],"rorsimplific":[2427,2429],"orsimplifica":[2427,2429],"rsimplificat":[2427,2429],"var decimato":[2429],"ar decimator":[2429],"r decimator ":[2429]," decimator =":[2429],"decimator = ":[2429],"ecimator = n":[2429],"cimator = ne":[2429],"imator = new":[2429],"mator = new ":[2429],"ator = new q":[2429],"tor = new qu":[2429],"or = new qua":[2429],"r = new quad":[2429]," = new quadr":[2429],"= new quadra":[2429]," new quadrat":[2429],"new quadrati":[2429],"ew quadratic":[2429],"w quadratice":[2429],"plification(":[2429],"lification(m":[2429],"ification(me":[2429],"fication(mes":[2429],"ication(mesh":[2429],"cation(mesht":[2429],"ation(meshto":[2429],"tion(meshtod":[2429],"ion(meshtode":[2429],"on(meshtodec":[2429],"n(meshtodeci":[2429],"(meshtodecim":[2429],"meshtodecima":[2429],"eshtodecimat":[2429],"shtodecimate":[2429],"htodecimate)":[2429],"todecimate);":[2429],"afterwards y":[2431],"fterwards yo":[2431],"terwards you":[2431],"erwards you ":[2431],"rwards you c":[2431],"wards you ca":[2431],"ards you can":[2431],"rds you can ":[2431],"ds you can p":[2431],"s you can pl":[2431]," you can pla":[2431],"you can play":[2431],"ou can play ":[2431],"u can play w":[2431]," can play wi":[2431],"can play wit":[2431],"an play with":[2431],"n play with ":[2431],"ay with the ":[2431],"y with the f":[2431],"following ob":[2431],"ollowing obj":[2431],"llowing obje":[2431],"lowing objec":[2431],"owing object":[2431],"wing object ":[2431],"ing object v":[2431],"ng object va":[2431],"g object var":[2431]," object vari":[2431],"object varia":[2431],"bject variab":[2431],"ject variabl":[2431],"ect variable":[2431],"ct variables":[2431],"t variables:":[2431],"1. decimatio":[2432],". decimation":[2432]," decimationi":[2432],"decimationit":[2432],"ecimationite":[2432],"cimationiter":[2432],"imationitera":[2432],"mationiterat":[2432],"ationiterati":[2432],"tioniteratio":[2432],"ioniteration":[2432],"oniterations":[2432],"niterations ":[2432],"iterations -":[2432,2434],"terations - ":[2432,2434],"erations - m":[2432],"rations - ma":[2432],"ations - max":[2432],"tions - max ":[2432],"ions - max n":[2432],"ons - max nu":[2432],"ns - max num":[2432],"s - max numb":[2432]," - max numbe":[2432],"- max number":[2432]," max number ":[2432],"max number o":[2432],"ax number of":[2432],"x number of ":[2432],"number of it":[2432],"umber of ite":[2432],"mber of iter":[2432],"ber of itera":[2432],"er of iterat":[2432],"r of iterati":[2432]," of iteratio":[2432],"of iteration":[2432],"f iterations":[2432]," iterations ":[2432,2434],"iterations o":[2432],"terations of":[2432],"erations of ":[2432],"rations of t":[2432],"ations of th":[2432],"tions of the":[2432],"ions of the ":[2432],"ons of the d":[2432],"ns of the de":[2432],"s of the dec":[2432],"ion process.":[2432],"on process. ":[2432],"n process. t":[2432],"process. the":[2432],"rocess. the ":[2432],"ocess. the s":[2432],"cess. the si":[2432],"ess. the sim":[2432],"ss. the simp":[2432],"s. the simpl":[2432],"ation will (":[2432],"tion will (u":[2432],"ion will (us":[2432],"on will (usu":[2432],"n will (usua":[2432]," will (usual":[2432],"will (usuall":[2432],"ill (usually":[2432],"ll (usually)":[2432],"l (usually) ":[2432]," (usually) s":[2432],"(usually) st":[2432],"usually) sto":[2432],"sually) stop":[2432],"ually) stop ":[2432],"ally) stop b":[2432],"lly) stop be":[2432],"ly) stop bef":[2432],"y) stop befo":[2432],") stop befor":[2432]," stop before":[2432],"stop before ":[2432],"top before t":[2432],"op before th":[2432],"p before the":[2432],"before the m":[2432],"efore the ma":[2432],"fore the max":[2432],"ore the max ":[2432],"re the max n":[2432],"e the max nu":[2432]," the max num":[2432],"the max numb":[2432],"he max numbe":[2432],"e max number":[2432]," iterations,":[2432,2433],"iterations, ":[2432,2433],"terations, b":[2432],"erations, bu":[2432],"rations, but":[2432],"ations, but ":[2432],"tions, but i":[2432],"ions, but it":[2432],"ons, but it ":[2432],"ns, but it a":[2432],"s, but it ac":[2432],", but it act":[2432]," but it actu":[2432],"but it actua":[2432],"ut it actual":[2432],"t it actuall":[2432]," it actually":[2432],"it actually ":[2432],"t actually a":[2432]," actually al":[2432],"actually all":[2432],"ctually all ":[2432],"tually all d":[2432],"ually all de":[2432],"ally all dep":[2432],"lly all depe":[2432],"ly all depen":[2432],"y all depend":[2432]," all depends":[2432],"all depends ":[2432],"ll depends o":[2432],"l depends on":[2432]," depends on ":[2432],"depends on t":[2432],"epends on th":[2432],"pends on the":[2432],"ends on the ":[2432],"nds on the n":[2432],"ds on the ne":[2432],"s on the nex":[2432],"n the next v":[2432]," the next va":[2432],"the next var":[2432],"he next vari":[2432],"e next varia":[2432]," next variab":[2432],"next variabl":[2432],"ext variable":[2432],"xt variable.":[2432],"t variable. ":[2432]," variable. d":[2432],"variable. de":[2432],"ariable. def":[2432],"riable. defa":[2432],"iable. defau":[2432],"able. defaul":[2432],"ble. default":[2432],"le. default ":[2432],"e. default :":[2432],". default : ":[2432]," default : 1":[2432],"default : 10":[2432],"efault : 100":[2432],"fault : 100.":[2432],"2. aggressiv":[2433],". aggressive":[2433]," aggressiven":[2433],"aggressivene":[2433],"ggressivenes":[2433],"gressiveness":[2433],"ressiveness ":[2433],"essiveness -":[2433],"ssiveness - ":[2433],"siveness - t":[2433],"iveness - th":[2433],"veness - the":[2433],"eness - the ":[2433],"ness - the t":[2433],"ess - the th":[2433],"ss - the thr":[2433],"s - the thre":[2433]," - the thres":[2433],"- the thresh":[2433]," the thresho":[2433],"the threshol":[2433],"he threshold":[2433],"e threshold ":[2433]," threshold t":[2433],"threshold th":[2433],"hreshold tha":[2433],"reshold that":[2433],"eshold that ":[2433],"shold that d":[2433],"hold that de":[2433],"old that dec":[2433],"ld that deci":[2433],"d that decid":[2433]," that decide":[2433],"that decides":[2433],"hat decides ":[2433],"at decides i":[2433],"t decides if":[2433]," decides if ":[2433],"decides if a":[2433],"ecides if a ":[2433],"cides if a t":[2433],"ides if a tr":[2433],"des if a tri":[2433],"es if a tria":[2433],"s if a trian":[2433]," if a triang":[2433],"if a triangl":[2433],"f a triangle":[2433]," a triangle ":[2433],"a triangle i":[2433]," triangle is":[2433],"triangle is ":[2433],"riangle is u":[2433],"iangle is up":[2433],"angle is up ":[2433],"ngle is up f":[2433],"gle is up fo":[2433],"le is up for":[2433],"e is up for ":[2433]," is up for a":[2433],"is up for a ":[2433],"s up for a d":[2433]," up for a de":[2433],"up for a del":[2433],"p for a dele":[2433]," for a delet":[2433],"for a deleti":[2433],"or a deletio":[2433],"r a deletion":[2433]," a deletion ":[2433],"a deletion i":[2433]," deletion is":[2433],"deletion is ":[2433],"eletion is d":[2433],"letion is de":[2433],"etion is dec":[2433],"tion is deci":[2433],"ion is decid":[2433],"on is decide":[2433],"n is decided":[2433]," is decided ":[2433],"is decided u":[2433],"s decided us":[2433]," decided usi":[2433],"decided usin":[2433],"ecided using":[2433],"cided using ":[2433],"ed using thi":[2433],"d using this":[2433]," using this ":[2433],"using this v":[2433],"sing this va":[2433],"ing this var":[2433],"ng this vari":[2433],"g this varia":[2433]," this variab":[2433],"this variabl":[2433],"his variable":[2433],"is variable.":[2433],"s variable. ":[2433]," variable. m":[2433],"variable. ma":[2433],"ariable. mak":[2433],"riable. maki":[2433],"iable. makin":[2433],"able. making":[2433],"ble. making ":[2433],"le. making i":[2433],"e. making it":[2433],". making it ":[2433]," making it t":[2433],"making it to":[2433],"aking it to ":[2433],"king it to a":[2433],"ing it to a ":[2433],"ng it to a l":[2433],"g it to a lo":[2433]," it to a low":[2433],"it to a low ":[2433],"t to a low v":[2433]," to a low va":[2433],"to a low val":[2433],"o a low valu":[2433]," a low value":[2433],"a low value ":[2433]," low value (":[2433],"low value (2":[2433],"ow value (2,":[2433],"w value (2, ":[2433]," value (2, f":[2433],"value (2, fo":[2433],"alue (2, for":[2433],"lue (2, for ":[2433],"ue (2, for e":[2433],"e (2, for ex":[2433]," (2, for exa":[2433],"(2, for exam":[2433],"2, for examp":[2433],"for example)":[2433],"or example) ":[2433],"r example) w":[2433]," example) wi":[2433],"example) wil":[2433],"xample) will":[2433],"ample) will ":[2433],"mple) will c":[2433],"ple) will ca":[2433],"le) will cau":[2433],"e) will caus":[2433],") will cause":[2433]," cause the d":[2433],"cause the de":[2433],"ause the dec":[2433],"use the deci":[2433],"se the decim":[2433],"e the decima":[2433],"decimation t":[2433],"ecimation to":[2433],"cimation to ":[2433],"imation to b":[2433],"mation to be":[2433],"tion to be a":[2433],"ion to be a ":[2433],"on to be a l":[2433],"n to be a li":[2433]," to be a lit":[2433],"to be a litt":[2433],"o be a littl":[2433]," be a little":[2433],"be a little ":[2433],"e a little s":[2433]," a little sl":[2433],"a little slo":[2433]," little slow":[2433],"little slowe":[2433],"ittle slower":[2433],"ttle slower ":[2433],"tle slower b":[2433],"le slower bu":[2433],"e slower but":[2433]," slower but ":[2433],"slower but m":[2433],"lower but mo":[2433],"ower but mor":[2433],"wer but more":[2433],"er but more ":[2433],"r but more p":[2433]," but more pe":[2433],"but more per":[2433],"ut more perc":[2433],"t more perci":[2433]," more percis":[2433],"more percise":[2433],"ore percise ":[2433],"re percise i":[2433],"e percise in":[2433]," percise in ":[2433],"percise in s":[2433],"ercise in se":[2433],"rcise in sel":[2433],"cise in sele":[2433],"ise in selec":[2433],"se in select":[2433],"e in selecti":[2433]," in selectin":[2433],"in selecting":[2433],"n selecting ":[2433]," selecting t":[2433],"selecting th":[2433],"electing the":[2433],"lecting the ":[2433],"ecting the t":[2433],"cting the tr":[2433],"ting the tri":[2433],"ing the tria":[2433],"ng the trian":[2433],"g the triang":[2433]," the triangl":[2433],"the triangle":[2433],"he triangles":[2433],"e triangles.":[2433]," triangles. ":[2433],"triangles. s":[2433],"riangles. se":[2433],"iangles. set":[2433],"angles. sett":[2433],"ngles. setti":[2433],"gles. settin":[2433],"les. setting":[2433],"es. settings":[2433],"s. settings ":[2433],". settings i":[2433]," settings it":[2433],"settings it ":[2433],"ettings it t":[2433],"ttings it to":[2433],"tings it to ":[2433],"ings it to a":[2433],"ngs it to a ":[2433],"gs it to a h":[2433],"s it to a hi":[2433]," it to a hig":[2433],"it to a high":[2433],"t to a high ":[2433]," to a high v":[2433],"to a high va":[2433],"o a high val":[2433]," a high valu":[2433],"a high value":[2433]," high value ":[2433],"high value (":[2433],"igh value (1":[2433],"gh value (15":[2433],"h value (15 ":[2433]," value (15 f":[2433],"value (15 fo":[2433],"alue (15 for":[2433],"lue (15 for ":[2433],"ue (15 for e":[2433],"e (15 for ex":[2433]," (15 for exa":[2433],"(15 for exam":[2433],"15 for examp":[2433],"5 for exampl":[2433],"mple) will p":[2433],"ple) will pr":[2433],"le) will pro":[2433],"e) will prob":[2433],") will proba":[2433],"l probably c":[2433]," probably ca":[2433],"probably cau":[2433],"robably caus":[2433],"obably cause":[2433],"bably cause ":[2433],"ably cause t":[2433],"bly cause th":[2433],"ly cause the":[2433],"y cause the ":[2433],"imation to e":[2433],"mation to en":[2433],"ation to end":[2433],"tion to end ":[2433],"ion to end i":[2433],"on to end in":[2433],"n to end in ":[2433]," to end in 1":[2433],"to end in 1 ":[2433],"o end in 1 o":[2433]," end in 1 or":[2433],"end in 1 or ":[2433],"nd in 1 or 2":[2433],"d in 1 or 2 ":[2433]," in 1 or 2 i":[2433],"in 1 or 2 it":[2433],"n 1 or 2 ite":[2433]," 1 or 2 iter":[2433],"1 or 2 itera":[2433]," or 2 iterat":[2433],"or 2 iterati":[2433],"r 2 iteratio":[2433]," 2 iteration":[2433],"2 iterations":[2433],"terations, s":[2433],"erations, si":[2433],"rations, sin":[2433],"ations, sinc":[2433],"tions, since":[2433],"ions, since ":[2433],"ons, since a":[2433],"ns, since a ":[2433],"s, since a l":[2433],", since a lo":[2433]," since a lot":[2433],"since a lot ":[2433],"ince a lot o":[2433],"nce a lot of":[2433],"ce a lot of ":[2433],"e a lot of t":[2433]," a lot of tr":[2433],"a lot of tri":[2433]," lot of tria":[2433],"lot of trian":[2433],"ot of triang":[2433],"t of triangl":[2433]," of triangle":[2433],"of triangles":[2433],"f triangles ":[2433],"riangles wil":[2433],"iangles will":[2433],"angles will ":[2433],"ngles will b":[2433],"gles will be":[2433],"les will be ":[2433],"es will be c":[2433],"s will be ch":[2433]," will be cho":[2433],"will be chos":[2433],"ill be chose":[2433],"ll be chosen":[2433],"l be chosen ":[2433]," be chosen f":[2433],"be chosen fo":[2433],"e chosen for":[2433]," chosen for ":[2433],"chosen for d":[2433],"hosen for de":[2433],"osen for del":[2433],"sen for dele":[2433],"en for delet":[2433],"n for deleti":[2433]," for deletio":[2433],"for deletion":[2433],"or deletion.":[2433],"r deletion. ":[2433]," deletion. a":[2433],"deletion. an":[2433],"eletion. any":[2433],"letion. anyh":[2433],"etion. anyho":[2433],"tion. anyhow":[2433],"ion. anyhow ":[2433],"on. anyhow o":[2433],"n. anyhow on":[2433],". anyhow onc":[2433]," anyhow once":[2433],"anyhow once ":[2433],"nyhow once t":[2433],"yhow once th":[2433],"how once the":[2433],"ow once the ":[2433],"w once the q":[2433]," once the qu":[2433],"once the qua":[2433],"nce the qual":[2433],"ce the quali":[2433],"e the qualit":[2433],"he quality i":[2433],"e quality is":[2433]," quality is ":[2433],"quality is r":[2433],"uality is re":[2433],"ality is rea":[2433],"lity is reac":[2433],"ity is reach":[2433],"ty is reache":[2433],"y is reached":[2433]," is reached ":[2433],"is reached t":[2433],"s reached th":[2433]," reached the":[2433],"reached the ":[2433],"eached the p":[2433],"ached the pr":[2433],"ched the pro":[2433],"hed the proc":[2433],"ed the proce":[2433],"d the proces":[2433]," the process":[2433,2434],"the process ":[2433,2434],"he process s":[2433],"e process st":[2433]," process sto":[2433],"process stop":[2433],"rocess stops":[2433],"ocess stops.":[2433],"cess stops. ":[2433],"ess stops. t":[2433],"ss stops. th":[2433],"s stops. the":[2433]," stops. the ":[2433],"stops. the q":[2433],"tops. the qu":[2433],"ops. the que":[2433],"ps. the ques":[2433],"s. the quest":[2433],". the questi":[2433]," the questio":[2433],"the question":[2433],"he question ":[2433],"e question -":[2433]," question - ":[2433],"question - d":[2433],"uestion - di":[2433],"estion - did":[2433],"stion - did ":[2433],"tion - did i":[2433],"ion - did it":[2433],"on - did it ":[2433],"n - did it c":[2433]," - did it ch":[2433],"- did it cho":[2433]," did it choo":[2433],"did it choos":[2433],"id it choose":[2433],"d it choose ":[2433]," it choose t":[2433],"it choose th":[2433],"t choose the":[2433]," choose the ":[2433],"choose the b":[2433],"hoose the be":[2433],"oose the bet":[2433],"ose the bett":[2433],"se the bette":[2433],"e the better":[2433],"the better t":[2433],"he better tr":[2433],"e better tri":[2433]," better tria":[2433],"better trian":[2433],"etter triang":[2433],"tter triangl":[2433],"ter triangle":[2433],"er triangles":[2433],"r triangles ":[2433]," triangles t":[2433],"triangles to":[2433],"riangles to ":[2433],"iangles to d":[2433],"angles to de":[2433],"ngles to dec":[2433],"gles to deci":[2433],"les to decim":[2433],"es to decima":[2433],"s to decimat":[2433]," to decimate":[2433],"to decimate!":[2433],"o decimate! ":[2433]," decimate! d":[2433],"decimate! de":[2433],"ecimate! def":[2433],"cimate! defa":[2433],"imate! defau":[2433],"mate! defaul":[2433],"ate! default":[2433],"te! default ":[2433],"e! default :":[2433],"! default : ":[2433]," default : 7":[2433],"default : 7.":[2433],"3. syncitera":[2434],". synciterat":[2434]," synciterati":[2434],"synciteratio":[2434],"ynciteration":[2434],"nciterations":[2434],"citerations ":[2434],"erations - t":[2434],"rations - th":[2434],"ations - the":[2434],"tions - the ":[2434],"ions - the n":[2434],"ons - the nu":[2434],"ns - the num":[2434],"s - the numb":[2434]," - the numbe":[2434],"- the number":[2434],"number of sy":[2434],"umber of syn":[2434],"mber of sync":[2434],"ber of synch":[2434],"er of synchr":[2434],"r of synchro":[2434]," of synchron":[2434],"of synchrono":[2434],"f synchronou":[2434]," synchronous":[2434],"ynchronous i":[2434],"nchronous it":[2434],"chronous ite":[2434],"hronous iter":[2434],"ronous itera":[2434],"onous iterat":[2434],"nous iterati":[2434],"ous iteratio":[2434],"us iteration":[2434],"s iterations":[2434],"iterations i":[2434],"terations in":[2434],"erations ins":[2434],"rations insi":[2434],"ations insid":[2434],"tions inside":[2434],"ions inside ":[2434],"ons inside t":[2434],"ns inside th":[2434],"s inside the":[2434],"inside the a":[2434],"nside the as":[2434],"side the asy":[2434],"ide the asyn":[2434],"de the async":[2434],"e the async ":[2434]," the async i":[2434],"the async it":[2434],"he async ite":[2434],"e async iter":[2434]," async itera":[2434],"async iterat":[2434],"sync iterati":[2434],"ync iteratio":[2434],"nc iteration":[2434],"c iterations":[2434]," iterations.":[2434],"iterations. ":[2434],"terations. r":[2434],"erations. ra":[2434],"rations. rat":[2434],"ations. rath":[2434],"tions. rathe":[2434],"ions. rather":[2434],"ons. rather ":[2434],"ns. rather h":[2434],"s. rather ha":[2434],". rather har":[2434]," rather hard":[2434],"rather hard ":[2434],"ather hard t":[2434],"ther hard to":[2434],"her hard to ":[2434],"er hard to e":[2434],"r hard to ex":[2434]," hard to exp":[2434],"hard to expl":[2434],"ard to expla":[2434],"rd to explai":[2434],"d to explain":[2434]," to explain,":[2434],"to explain, ":[2434],"o explain, b":[2434]," explain, bu":[2434],"explain, but":[2434],"xplain, but ":[2434],"plain, but a":[2434],"lain, but a ":[2434],"ain, but a l":[2434],"in, but a lo":[2434],"n, but a low":[2434],", but a lowe":[2434]," but a lower":[2434],"but a lower ":[2434],"ut a lower n":[2434],"t a lower nu":[2434]," a lower num":[2434],"a lower numb":[2434]," lower numbe":[2434],"lower number":[2434],"ower number ":[2434],"wer number w":[2434],"er number wi":[2434],"r number wil":[2434]," number will":[2434],"number will ":[2434],"umber will h":[2434],"mber will hu":[2434],"ber will hur":[2434],"er will hurt":[2434],"r will hurt ":[2434]," will hurt t":[2434],"will hurt th":[2434],"ill hurt the":[2434],"ll hurt the ":[2434],"l hurt the p":[2434]," hurt the pe":[2434],"hurt the per":[2434],"urt the perf":[2434],"rt the perfo":[2434],"t the perfor":[2434]," the perform":[2434],"the performa":[2434],"he performan":[2434],"erformance l":[2434],"rformance le":[2434],"formance les":[2434],"ormance less":[2434],"rmance less ":[2434],"mance less b":[2434],"ance less bu":[2434],"nce less but":[2434],"ce less but ":[2434],"e less but w":[2434]," less but wi":[2434],"less but wil":[2434],"ess but will":[2434],"ss but will ":[2434],"s but will m":[2434]," but will ma":[2434],"but will mak":[2434],"ut will make":[2434]," will make t":[2434],"will make th":[2434],"ill make the":[2434],"ll make the ":[2434],"l make the p":[2434]," make the pr":[2434],"make the pro":[2434],"ake the proc":[2434],"ke the proce":[2434],"e the proces":[2434],"he process t":[2434],"e process ta":[2434]," process tak":[2434],"process take":[2434],"rocess take ":[2434],"ocess take a":[2434],"cess take a ":[2434],"ess take a b":[2434],"ss take a bi":[2434],"s take a bit":[2434]," take a bit ":[2434],"take a bit m":[2434],"ake a bit mo":[2434],"ke a bit mor":[2434],"e a bit more":[2434]," bit more ti":[2434],"bit more tim":[2434],"it more time":[2434],"t more time.":[2434]," more time. ":[2434],"more time. i":[2434],"ore time. if":[2434],"re time. if ":[2434],"e time. if y":[2434]," time. if yo":[2434],"time. if you":[2434],"ime. if you ":[2434],"me. if you n":[2434],"e. if you ne":[2434],". if you nee":[2434],"f you need e":[2434]," you need ex":[2434],"you need exp":[2434],"ou need expl":[2434],"u need expla":[2434]," need explan":[2434],"need explana":[2434],"eed explanat":[2434],"ed explanati":[2434],"d explanatio":[2434],"explanations":[2434],"xplanations ":[2434],"planations l":[2434],"lanations lo":[2434],"anations loo":[2434],"nations look":[2434],"ations look ":[2434],"tions look a":[2434],"ions look at":[2434],"ons look at ":[2434],"ns look at t":[2434],"s look at th":[2434],"ook at the a":[2434],"ok at the as":[2434],"k at the asy":[2434]," at the asyn":[2434],"at the async":[2434],"t the asyncl":[2434]," the asynclo":[2434],"the asyncloo":[2434],"he asyncloop":[2434],"e asyncloop ":[2434]," asyncloop c":[2434],"asyncloop cl":[2434],"syncloop cla":[2434],"yncloop clas":[2434],"ncloop class":[2434],"cloop class ":[2434],"loop class i":[2434],"oop class in":[2434],"op class in ":[2434],"p class in b":[2434]," class in ba":[2434],"class in bab":[2434],"lass in baby":[2434],"ass in babyl":[2434],"ss in babylo":[2434],"in babylon.t":[2434],"n babylon.to":[2434]," babylon.too":[2434],"babylon.tool":[2434],"abylon.tools":[2434],"bylon.tools.":[2434],"ylon.tools.j":[2434],"lon.tools.js":[2434],"on.tools.js ":[2434],"n.tools.js o":[2434],".tools.js or":[2434],"tools.js or ":[2434],"ools.js or c":[2434],"ols.js or co":[2434],"ls.js or con":[2434],"s.js or cont":[2434],".js or conta":[2434],"js or contac":[2434],"s or contact":[2434]," or contact ":[2434],"or contact @":[2434],"r contact @r":[2434]," contact @ra":[2434],"contact @raa":[2434],"ontact @raan":[2434],"ntact @raana":[2434],"tact @raanan":[2434],"act @raananw":[2434],"ct @raananw ":[2434],"t @raananw .":[2434],"after settin":[2435],"fter setting":[2435],"ter setting ":[2435],"er setting t":[2435],"r setting th":[2435],"etting the v":[2435],"tting the va":[2435],"ting the var":[2435],"ing the vari":[2435],"ng the varia":[2435],"g the variab":[2435],"he variables":[2435],"e variables ":[2435]," variables y":[2435],"variables yo":[2435],"ariables you":[2435],"riables you ":[2435],"iables you r":[2435],"ables you ru":[2435],"bles you run":[2435],"les you run ":[2435],"es you run r":[2435],"s you run ru":[2435]," you run run":[2435],"you run run ":[2435],"ou run run t":[2435],"u run run th":[2435]," run run the":[2435],"run run the ":[2435],"un run the s":[2435],"n run the si":[2435]," run the sim":[2435],"run the simp":[2435],"un the simpl":[2435],"n the simpli":[2435],"the simplify":[2435],"he simplify ":[2435],"e simplify f":[2435]," simplify fu":[2435],"y function t":[2435]," function th":[2435],"function tha":[2435],"unction that":[2435],"nction that ":[2435]," that will s":[2435],"that will st":[2435],"hat will sta":[2435],"at will star":[2435],"t will start":[2435],"will start t":[2435],"ill start th":[2435],"ll start the":[2435],"l start the ":[2435]," start the e":[2435],"start the en":[2435],"tart the ent":[2435],"art the enti":[2435],"rt the entir":[2435],"t the entire":[2435]," the entire ":[2435],"the entire p":[2435],"he entire pr":[2435],"e entire pro":[2435]," entire proc":[2435],"entire proce":[2435],"ntire proces":[2435],"tire process":[2435],"ire process:":[2435],"fy(settings,":[2437],"y(settings, ":[2437],"(settings, s":[2437],"settings, su":[2437],"ettings, suc":[2437],"ttings, succ":[2437],"tings, succe":[2437],"ings, succes":[2437],"ngs, success":[2437],"gs, successc":[2437],"s, successca":[2437],", successcal":[2437]," successcall":[2437],"esscallback)":[2437],"sscallback);":[2437],"var myjsobj3":[2439],"ar myjsobj3 ":[2439],"r myjsobj3 =":[2439]," myjsobj3 = ":[2439],"myjsobj3 = {":[2439],"yjsobj3 = {}":[2439],"jsobj3 = {};":[2439],"for(myjsobj3":[2440],"or(myjsobj3)":[2440],"r(myjsobj3);":[2440],"var myjsobj4":[2441],"ar myjsobj4 ":[2441],"r myjsobj4 =":[2441]," myjsobj4 = ":[2441],"myjsobj4 = {":[2441],"yjsobj4 = {}":[2441],"jsobj4 = {};":[2441],"myjsobj4.has":[2442],"yjsobj4.hast":[2442],"jsobj4.hasta":[2442],"sobj4.hastag":[2442],"obj4.hastags":[2442],"bj4.hastags(":[2442],"j4.hastags()":[2442],"4.hastags();":[2442],".hastags(); ":[2442,2444,2446,2447,2460,2462],"hastags(); /":[2442,2444,2446,2447,2460,2462],"astags(); //":[2442,2444,2446,2447,2460,2462],"stags(); // ":[2442,2444,2446,2447,2460,2462],"tags(); // t":[2442,2446,2447,2462],"ags(); // ty":[2442,2462],"gs(); // typ":[2442,2462],"s(); // type":[2442,2462],"(); // typee":[2442,2462,2466],"); // typeer":[2442,2462,2465,2466],"; // typeerr":[2442,2462,2465,2466]," // typeerro":[2442,2462,2465,2466],"// typeerror":[2442,2462,2465,2466],"/ typeerror:":[2442,2462,2465,2466]," typeerror: ":[2442,2462,2465,2466],"typeerror: u":[2442,2462,2465,2466],"ypeerror: un":[2442,2462,2465,2466],"peerror: und":[2442,2462,2465,2466],"eerror: unde":[2442,2462,2465,2466],"error: undef":[2442,2462,2465,2466],"rror: undefi":[2442,2462,2465,2466],"ror: undefin":[2442,2462,2465,2466],"or: undefine":[2442,2462,2465,2466],"r: undefined":[2442,2462,2465,2466],": undefined ":[2442,2462,2465,2466]," undefined i":[2442,2462,2465,2466],"undefined is":[2442,2462,2465,2466],"ndefined is ":[2442,2462,2465,2466],"defined is n":[2442,2462,2465,2466],"efined is no":[2442,2462,2465,2466],"fined is not":[2442,2462,2465,2466],"ined is not ":[2442,2462,2465,2466],"ned is not a":[2442,2462,2465,2466],"ed is not a ":[2442,2462,2465,2466],"d is not a f":[2442,2462,2465,2466]," is not a fu":[2442,2462,2465,2466],"is not a fun":[2442,2462,2465,2466],"s not a func":[2442,2462,2465,2466]," not a funct":[2442,2462,2465,2466],"not a functi":[2442,2462,2465,2466],"ot a functio":[2442,2462,2465,2466],"t a function":[2442,2462,2465,2466],"bylon.tags.h":[2443,2445],"ylon.tags.ha":[2443,2445],"lon.tags.has":[2443,2445],"on.tags.hast":[2443,2445],"n.tags.hasta":[2443,2445],".tags.hastag":[2443,2445],"tags.hastags":[2443,2445],"ags.hastags(":[2443,2445],"gs.hastags(m":[2443,2445],"s.hastags(my":[2443,2445],".hastags(myj":[2443,2445],"hastags(myjs":[2443,2445],"astags(myjso":[2443,2445],"stags(myjsob":[2443,2445],"tags(myjsobj":[2443,2445],"ags(myjsobj4":[2443],"gs(myjsobj4)":[2443],"s(myjsobj4);":[2443],"(myjsobj4); ":[2443,2469],"myjsobj4); /":[2443,2469],"yjsobj4); //":[2443,2469],"jsobj4); // ":[2443,2469],"sobj4); // f":[2443],"obj4); // fa":[2443],"bj4); // fal":[2443],"j4); // fals":[2443],"4); // false":[2443],"myjsobj3.has":[2444],"yjsobj3.hast":[2444],"jsobj3.hasta":[2444],"sobj3.hastag":[2444],"obj3.hastags":[2444],"bj3.hastags(":[2444],"j3.hastags()":[2444],"3.hastags();":[2444],"tags(); // f":[2444,2460],"ags(); // fa":[2444,2460],"gs(); // fal":[2444,2460],"s(); // fals":[2444,2460],"(); // false":[2444,2460],"ags(myjsobj3":[2445],"gs(myjsobj3)":[2445],"s(myjsobj3);":[2445],"(myjsobj3); ":[2445],"myjsobj3); /":[2445],"yjsobj3); //":[2445],"jsobj3); // ":[2445],"sobj3); // f":[2445],"obj3); // fa":[2445],"bj3); // fal":[2445],"j3); // fals":[2445],"3); // false":[2445],"myjsobj2.has":[2446,2460,2462],"yjsobj2.hast":[2446,2460,2462],"jsobj2.hasta":[2446,2460,2462],"sobj2.hastag":[2446,2460,2462],"obj2.hastags":[2446,2460,2462],"bj2.hastags(":[2446,2460,2462],"j2.hastags()":[2446,2460,2462],"2.hastags();":[2446,2460,2462],"ags(); // tr":[2446,2447],"gs(); // tru":[2446,2447],"s(); // true":[2446,2447],"myjsobj1.has":[2447],"yjsobj1.hast":[2447],"jsobj1.hasta":[2447],"sobj1.hastag":[2447],"obj1.hastags":[2447],"bj1.hastags(":[2447],"j1.hastags()":[2447],"1.hastags();":[2447],"myjsobj1.mat":[2448,2449,2450,2451,2452,2453,2454,2455,2456,2458],"yjsobj1.matc":[2448,2449,2450,2451,2452,2453,2454,2455,2456,2458],"jsobj1.match":[2448,2449,2450,2451,2452,2453,2454,2455,2456,2458],"sobj1.matche":[2448,2449,2450,2451,2452,2453,2454,2455,2456,2458],"obj1.matches":[2448,2449,2450,2451,2452,2453,2454,2455,2456,2458],"bj1.matchest":[2448,2449,2450,2451,2452,2453,2454,2455,2456,2458],"j1.matchesta":[2448,2449,2450,2451,2452,2453,2454,2455,2456,2458],"1.matchestag":[2448,2449,2450,2451,2452,2453,2454,2455,2456,2458],".matchestags":[2448,2449,2450,2451,2452,2453,2454,2455,2456,2458,2463,2464,2465,2466],"estagsquery(":[2448,2449,2450,2451,2452,2453,2454,2455,2456,2458,2463,2464,2465,2466],"stagsquery(\"":[2448,2449,2450,2451,2452,2453,2454,2455,2456,2458,2463,2465],"tagsquery(\"t":[2448,2449,2450,2451,2452,2454,2455,2456,2458],"agsquery(\"ta":[2448,2449,2450,2451,2452,2454,2455,2456,2458],"gsquery(\"tag":[2448,2449,2450,2451,2452,2454,2455,2456,2458],"squery(\"tag1":[2448,2450,2451,2454,2455,2456,2458],"query(\"tag1\"":[2448],"uery(\"tag1\")":[2448],"ery(\"tag1\");":[2448],"ry(\"tag1\"); ":[2448],"y(\"tag1\"); /":[2448],"(\"tag1\"); //":[2448],"\"tag1\"); // ":[2448],"tag1\"); // t":[2448],"ag1\"); // tr":[2448],"g1\"); // tru":[2448],"1\"); // true":[2448],"squery(\"tag2":[2449],"query(\"tag2\"":[2449],"uery(\"tag2\")":[2449],"ery(\"tag2\");":[2449],"ry(\"tag2\"); ":[2449],"y(\"tag2\"); /":[2449],"(\"tag2\"); //":[2449],"\"tag2\"); // ":[2449],"tag2\"); // t":[2449,2450,2451],"ag2\"); // tr":[2449,2450,2451],"g2\"); // tru":[2449,2450,2451],"2\"); // true":[2449,2450,2451],"query(\"tag1 ":[2450,2451,2454,2455,2456,2458],"uery(\"tag1 |":[2450,2455],"ery(\"tag1 ||":[2450,2455],"ry(\"tag1 || ":[2450,2455],"y(\"tag1 || t":[2450,2455],"(\"tag1 || ta":[2450,2455],"\"tag1 || tag":[2450,2455],"tag1 || tag2":[2450],"ag1 || tag2\"":[2450],"g1 || tag2\")":[2450],"1 || tag2\");":[2450]," || tag2\"); ":[2450],"|| tag2\"); /":[2450],"| tag2\"); //":[2450],"uery(\"tag1 &":[2451,2454,2456,2458],"ery(\"tag1 &&":[2451,2454,2456,2458],"ry(\"tag1 && ":[2451,2454,2456,2458],"y(\"tag1 && t":[2451,2454],"(\"tag1 && ta":[2451,2454],"\"tag1 && tag":[2451,2454],"tag1 && tag2":[2451],"ag1 && tag2\"":[2451],"g1 && tag2\")":[2451],"1 && tag2\");":[2451]," && tag2\"); ":[2451],"&& tag2\"); /":[2451],"& tag2\"); //":[2451],"squery(\"tag3":[2452],"query(\"tag3\"":[2452],"uery(\"tag3\")":[2452],"ery(\"tag3\");":[2452],"ry(\"tag3\"); ":[2452],"y(\"tag3\"); /":[2452],"(\"tag3\"); //":[2452],"\"tag3\"); // ":[2452],"tag3\"); // f":[2452,2454,2458],"ag3\"); // fa":[2452,2454,2458],"g3\"); // fal":[2452,2454,2458],"3\"); // fals":[2452,2454,2458],"\"); // false":[2452,2454,2458,2463,2467],"tagsquery(\"!":[2453],"agsquery(\"!t":[2453],"gsquery(\"!ta":[2453],"squery(\"!tag":[2453],"query(\"!tag3":[2453],"uery(\"!tag3\"":[2453],"ery(\"!tag3\")":[2453],"ry(\"!tag3\");":[2453],"y(\"!tag3\"); ":[2453],"(\"!tag3\"); /":[2453],"\"!tag3\"); //":[2453],"!tag3\"); // ":[2453,2456,2458],"tag3\"); // t":[2453,2455,2456],"ag3\"); // tr":[2453,2455,2456],"g3\"); // tru":[2453,2455,2456],"3\"); // true":[2453,2455,2456],"tag1 && tag3":[2454],"ag1 && tag3\"":[2454],"g1 && tag3\")":[2454],"1 && tag3\");":[2454]," && tag3\"); ":[2454],"&& tag3\"); /":[2454],"& tag3\"); //":[2454]," tag3\"); // ":[2454,2455],"tag1 || tag3":[2455],"ag1 || tag3\"":[2455],"g1 || tag3\")":[2455],"1 || tag3\");":[2455]," || tag3\"); ":[2455],"|| tag3\"); /":[2455],"| tag3\"); //":[2455],"y(\"tag1 && !":[2456,2458],"(\"tag1 && !t":[2456,2458],"\"tag1 && !ta":[2456,2458],"tag1 && !tag":[2456,2458],"ag1 && !tag3":[2456,2458],"g1 && !tag3\"":[2456,2458],"1 && !tag3\")":[2456,2458]," && !tag3\");":[2456,2458],"&& !tag3\"); ":[2456,2458],"& !tag3\"); /":[2456,2458]," !tag3\"); //":[2456,2458],"myjsobj1.rem":[2457],"yjsobj1.remo":[2457],"jsobj1.remov":[2457],"sobj1.remove":[2457],"obj1.removet":[2457],"bj1.removeta":[2457],"j1.removetag":[2457],"1.removetags":[2457],".removetags(":[2457,2459],"removetags(\"":[2457,2459],"emovetags(\"t":[2457,2459],"movetags(\"ta":[2457,2459],"ovetags(\"tag":[2457,2459],"vetags(\"tag1":[2457],"etags(\"tag1\"":[2457],"tags(\"tag1\")":[2457],"ags(\"tag1\");":[2457],"myjsobj2.rem":[2459],"yjsobj2.remo":[2459],"jsobj2.remov":[2459],"sobj2.remove":[2459],"obj2.removet":[2459],"bj2.removeta":[2459],"j2.removetag":[2459],"2.removetags":[2459],"vetags(\"tag4":[2459],"etags(\"tag4 ":[2459],"tags(\"tag4 t":[2459],"ags(\"tag4 ta":[2459],"gs(\"tag4 tag":[2459],"s(\"tag4 tag3":[2459],"(\"tag4 tag3 ":[2459],"\"tag4 tag3 t":[2459],"tag4 tag3 ta":[2459],"ag4 tag3 tag":[2459],"g4 tag3 tag5":[2459],"4 tag3 tag5\"":[2459]," tag3 tag5\")":[2459],"tag3 tag5\");":[2459],"for(myjsobj2":[2461],"or(myjsobj2)":[2461],"r(myjsobj2);":[2461],"myjsobj3.mat":[2463,2464],"yjsobj3.matc":[2463,2464],"jsobj3.match":[2463,2464],"sobj3.matche":[2463,2464],"obj3.matches":[2463,2464],"bj3.matchest":[2463,2464],"j3.matchesta":[2463,2464],"3.matchestag":[2463,2464],"tagsquery(\"\"":[2463,2465],"agsquery(\"\")":[2463,2465],"gsquery(\"\");":[2463,2465],"squery(\"\"); ":[2463,2465],"query(\"\"); /":[2463,2465],"uery(\"\"); //":[2463,2465],"ery(\"\"); // ":[2463,2465],"ry(\"\"); // f":[2463],"y(\"\"); // fa":[2463],"(\"\"); // fal":[2463],"\"\"); // fals":[2463,2467],"stagsquery()":[2464,2466],"tagsquery();":[2464,2466],"agsquery(); ":[2464,2466],"gsquery(); /":[2464,2466],"squery(); //":[2464,2466],"query(); // ":[2464,2466],"uery(); // t":[2464,2466],"ery(); // tr":[2464],"ry(); // tru":[2464],"y(); // true":[2464],"myjsobj4.mat":[2465,2466],"yjsobj4.matc":[2465,2466],"jsobj4.match":[2465,2466],"sobj4.matche":[2465,2466],"obj4.matches":[2465,2466],"bj4.matchest":[2465,2466],"j4.matchesta":[2465,2466],"4.matchestag":[2465,2466],"ry(\"\"); // t":[2465],"y(\"\"); // ty":[2465],"(\"\"); // typ":[2465],"\"\"); // type":[2465],"\"); // typee":[2465],"ery(); // ty":[2466],"ry(); // typ":[2466],"y(); // type":[2466],"bylon.tags.m":[2467,2468,2469],"ylon.tags.ma":[2467,2468,2469],"lon.tags.mat":[2467,2468,2469],"on.tags.matc":[2467,2468,2469],"n.tags.match":[2467,2468,2469],".tags.matche":[2467,2468,2469],"atchesquery(":[2467,2468,2469],"tchesquery(m":[2467,2468,2469],"chesquery(my":[2467,2468,2469],"hesquery(myj":[2467,2468,2469],"esquery(myjs":[2467,2468,2469],"squery(myjso":[2467,2468,2469],"query(myjsob":[2467,2468,2469],"uery(myjsobj":[2467,2468,2469],"ery(myjsobj4":[2467,2468,2469],"ry(myjsobj4,":[2467,2468],"y(myjsobj4, ":[2467,2468],"(myjsobj4, \"":[2467],"myjsobj4, \"\"":[2467],"yjsobj4, \"\")":[2467],"jsobj4, \"\");":[2467],"sobj4, \"\"); ":[2467],"obj4, \"\"); /":[2467],"bj4, \"\"); //":[2467],"j4, \"\"); // ":[2467],"4, \"\"); // f":[2467],", \"\"); // fa":[2467]," \"\"); // fal":[2467],"(myjsobj4, u":[2468],"myjsobj4, un":[2468],"yjsobj4, und":[2468],"jsobj4, unde":[2468],"sobj4, undef":[2468],"obj4, undefi":[2468],"bj4, undefin":[2468],"j4, undefine":[2468],"4, undefined":[2468],", undefined)":[2468]," undefined);":[2468],"undefined); ":[2468],"ndefined); /":[2468],"defined); //":[2468],"efined); // ":[2468],"fined); // t":[2468],"ined); // tr":[2468],"ned); // tru":[2468],"ed); // true":[2468],"ry(myjsobj4)":[2469],"y(myjsobj4);":[2469],"sobj4); // t":[2469],"obj4); // tr":[2469],"bj4); // tru":[2469],"j4); // true":[2469],"### rules to":[2471],"## rules to ":[2471],"# rules to r":[2471]," rules to re":[2471],"* the tags \"":[2472]," the tags \"t":[2472],"the tags \"tr":[2472],"he tags \"tru":[2472],"e tags \"true":[2472]," tags \"true\"":[2472],"tags \"true\" ":[2472],"ags \"true\" a":[2472],"gs \"true\" an":[2472],"s \"true\" and":[2472]," \"true\" and ":[2472],"\"true\" and \"":[2472],"true\" and \"f":[2472],"rue\" and \"fa":[2472],"ue\" and \"fal":[2472],"e\" and \"fals":[2472],"\" and \"false":[2472]," and \"false\"":[2472],"and \"false\" ":[2472],"nd \"false\" a":[2472],"d \"false\" ar":[2472]," \"false\" are":[2472],"\"false\" are ":[2472],"false\" are r":[2472],"alse\" are re":[2472],"lse\" are res":[2472],"se\" are rese":[2472],"e\" are reser":[2472],"\" are reserv":[2472]," are reserve":[2472],"are reserved":[2472],"re reserved ":[2472],"e reserved a":[2472]," reserved an":[2472],"reserved and":[2472],"eserved and ":[2472],"served and c":[2472],"erved and ca":[2472],"rved and can":[2472],"ved and cann":[2472],"ed and canno":[2472],"d and cannot":[2472]," cannot be u":[2472],"cannot be us":[2472],"annot be use":[2472],"nnot be used":[2472],"not be used ":[2472],"ot be used a":[2472],"t be used as":[2472],"be used as t":[2472],"e used as ta":[2472]," used as tag":[2472],"used as tags":[2472],"sed as tags.":[2472],"* a tag cann":[2473,2474]," a tag canno":[2473,2474],"a tag cannot":[2473,2474]," tag cannot ":[2473,2474],"tag cannot s":[2473],"ag cannot st":[2473],"g cannot sta":[2473]," cannot star":[2473],"cannot start":[2473],"annot start ":[2473],"nnot start w":[2473],"not start wi":[2473],"ot start wit":[2473],"t start with":[2473],"start with \"":[2473],"tart with \"|":[2473],"art with \"||":[2473],"rt with \"||\"":[2473],"t with \"||\",":[2473]," with \"||\", ":[2473],"with \"||\", \"":[2473],"ith \"||\", \"&":[2473],"th \"||\", \"&&":[2473],"h \"||\", \"&&\"":[2473]," \"||\", \"&&\",":[2473],"\"||\", \"&&\", ":[2473],"||\", \"&&\", o":[2473],"|\", \"&&\", or":[2473],"\", \"&&\", or ":[2473],", \"&&\", or '":[2473]," \"&&\", or '!":[2473],"\"&&\", or '!'":[2473],"tag cannot c":[2474],"ag cannot co":[2474],"g cannot con":[2474]," cannot cont":[2474],"cannot conta":[2474],"annot contai":[2474],"nnot contain":[2474],"not contain ":[2474],"ot contain w":[2474],"t contain wh":[2474]," contain whi":[2474],"contain whit":[2474],"ontain white":[2474],"ntain whites":[2474],"tain whitesp":[2474],"ain whitespa":[2474],"in whitespac":[2474],"n whitespace":[2474]," whitespaces":[2474],"### use in b":[2475],"## use in ba":[2475],"# use in bab":[2475]," use in baby":[2475],"use in babyl":[2475],"se in babylo":[2475],"e in babylon":[2475],"since it's p":[2476],"ince it's po":[2476],"nce it's pos":[2476],"ce it's poss":[2476],"e it's possi":[2476]," it's possib":[2476],"it's possibl":[2476],"t's possible":[2476],"'s possible ":[2476],"ossible to u":[2476],"ssible to us":[2476],"sible to use":[2476],"ible to use ":[2476],"ble to use t":[2476],"le to use ta":[2476],"e to use tag":[2476]," to use tags":[2476],"to use tags ":[2476],"o use tags o":[2476]," use tags on":[2476],"use tags on ":[2476],"se tags on a":[2476],"e tags on an":[2476],"ipt object a":[2476],"pt object an":[2476],"t object and":[2476],"bject and si":[2476],"ject and sin":[2476],"ect and sinc":[2476],"ct and since":[2476],"t and since ":[2476]," and since m":[2476],"and since me":[2476],"nd since mes":[2476],"d since mesh":[2476]," since meshe":[2476],"since meshes":[2476],"ince meshes ":[2476],"nce meshes a":[2476],"ce meshes ar":[2476],"meshes are j":[2476],"eshes are ja":[2476],"shes are jav":[2476],"hes are java":[2476],"es are javas":[2476],"s are javasc":[2476]," are javascr":[2476],"are javascri":[2476],"ript objects":[2476],"ipt objects,":[2476],"pt objects, ":[2476],"t objects, i":[2476]," objects, it":[2476],"objects, it'":[2476],"bjects, it's":[2476],"jects, it's ":[2476],"ects, it's p":[2476],"cts, it's po":[2476],"ts, it's pos":[2476],"s, it's poss":[2476],", it's possi":[2476],"ossible to a":[2476],"ssible to ad":[2476],"sible to add":[2476],"ible to add ":[2476],"ble to add t":[2476],"le to add ta":[2476],"e to add tag":[2476]," to add tags":[2476],"to add tags ":[2476],"o add tags o":[2476]," add tags on":[2476],"add tags on ":[2476],"dd tags on t":[2476],"d tags on th":[2476]," tags on the":[2476],"tags on them":[2476],"ags on them ":[2476],"gs on them a":[2476],"s on them an":[2476]," on them and":[2476],"on them and ":[2476],"n them and t":[2476]," them and to":[2476],"them and to ":[2476],"hem and to r":[2476],"em and to re":[2476],"m and to ret":[2476]," and to retr":[2476],"and to retri":[2476],"nd to retrie":[2476],"o retrieve t":[2476]," retrieve th":[2476],"retrieve the":[2476],"etrieve them":[2476],"trieve them ":[2476],"rieve them a":[2476],"ieve them ac":[2476],"eve them acc":[2476],"ve them acco":[2476],"e them accor":[2476]," them accord":[2476],"them accordi":[2476],"hem accordin":[2476],"em according":[2476],"m according ":[2476],"rding to a t":[2476],"ding to a ta":[2476],"ing to a tag":[2476],"ng to a tags":[2476],"g to a tags ":[2476]," to a tags q":[2476],"to a tags qu":[2476],"o a tags que":[2476]," tags query.":[2476],"var meshes =":[2478],"ar meshes = ":[2478],"r meshes = m":[2478]," meshes = my":[2478],"meshes = mys":[2478],"eshes = mysc":[2478],"shes = mysce":[2478],"hes = myscen":[2478],"es = myscene":[2478],"s = myscene.":[2478,2489]," = myscene.g":[2478,2485,2489],"= myscene.ge":[2478,2485,2489]," myscene.get":[2478,2485,2489],"myscene.getm":[2478,2485,2489],"yscene.getme":[2478,2485,2489],"scene.getmes":[2478,2485,2489],"cene.getmesh":[2478,2485,2489],"ene.getmeshe":[2478,2485,2489],"ne.getmeshes":[2478,2485,2489],"e.getmeshesb":[2478,2485,2489],".getmeshesby":[2478,2485,2489],"getmeshesbyt":[2478,2485,2489],"etmeshesbyta":[2478,2485,2489],"tmeshesbytag":[2478,2485,2489],"meshesbytags":[2478,2485,2489],"eshesbytags(":[2478,2485,2489],"shesbytags(\"":[2478,2485,2489],"hesbytags(\"t":[2478],"esbytags(\"ta":[2478],"sbytags(\"tag":[2478],"bytags(\"tag1":[2478],"ytags(\"tag1 ":[2478],"tags(\"tag1 &":[2478],"ags(\"tag1 &&":[2478],"gs(\"tag1 && ":[2478],"s(\"tag1 && (":[2478],"(\"tag1 && (t":[2478],"\"tag1 && (ta":[2478]," && !!!tag5\"":[2478],"&& !!!tag5\")":[2478],"& !!!tag5\");":[2478],"all tags add":[2480],"ll tags adde":[2480],"l tags added":[2480]," tags added ":[2480],"tags added t":[2480],"ags added to":[2480],"gs added to ":[2480],"s added to m":[2480]," added to me":[2480],"added to mes":[2480],"dded to mesh":[2480],"ded to meshe":[2480],"ed to meshes":[2480],"d to meshes,":[2480]," to meshes, ":[2480],"to meshes, c":[2480],"o meshes, ca":[2480]," meshes, cam":[2480],"es, cameras,":[2480],"s, cameras, ":[2480],", cameras, l":[2480]," cameras, li":[2480],"cameras, lig":[2480],"ameras, ligh":[2480],"meras, light":[2480],"eras, lights":[2480],"ras, lights.":[2480],"as, lights..":[2480],"s, lights...":[2480],", lights... ":[2480]," lights... a":[2480],"lights... ar":[2480],"ights... are":[2480],"ghts... are ":[2480],"hts... are s":[2480],"ts... are sa":[2480],"s... are sav":[2480],"... are save":[2480],".. are saved":[2480],". are saved ":[2480]," are saved t":[2480],"are saved to":[2480],"re saved to ":[2480],"e saved to t":[2480]," saved to th":[2480],"saved to the":[2480],"aved to the ":[2480],"ved to the s":[2480]," the scene f":[2480],"the scene fi":[2480],"he scene fil":[2480],"e scene file":[2480]," scene files":[2480],"scene files ":[2480],"cene files (":[2480],"ene files (s":[2480],"ne files (se":[2480],"e files (see":[2480]," files (see ":[2480],"files (see [":[2480],"iles (see [.":[2480],"les (see [.b":[2480],"es (see [.ba":[2480],"s (see [.bab":[2480]," (see [.baby":[2480],"(see [.babyl":[2480],"see [.babylo":[2480],"ee [.babylon":[2480],"e [.babylon ":[2480]," [.babylon f":[2480],"[.babylon fi":[2480],"abylon file ":[2480],"bylon file f":[2480],"ylon file fo":[2480],"lon file for":[2480],"on file form":[2480],"n file forma":[2480],"file format]":[2480],"ile format](":[2480],"le format](h":[2480],"e format](ht":[2480]," format](htt":[2480],"format](http":[2480],"ormat](https":[2480],"rmat](https:":[2480],"mat](https:/":[2480],"at](https://":[2480],"babylon.js/w":[2480],"abylon.js/wi":[2480],"bylon.js/wik":[2480],"ylon.js/wiki":[2480],"lon.js/wiki/":[2480],"on.js/wiki/b":[2480],"n.js/wiki/ba":[2480],".js/wiki/bab":[2480],"js/wiki/baby":[2480],"s/wiki/babyl":[2480],"/wiki/babylo":[2480],"wiki/babylon":[2480],"iki/babylon.":[2480],"ki/babylon.j":[2480],"i/babylon.js":[2480],"/babylon.js-":[2480],"babylon.js-f":[2480],"abylon.js-fi":[2480],"bylon.js-fil":[2480],"ylon.js-file":[2480],"lon.js-file-":[2480],"on.js-file-f":[2480],"n.js-file-fo":[2480],".js-file-for":[2480],"js-file-form":[2480],"s-file-forma":[2480],"-file-format":[2480],"file-format)":[2480],"ile-format))":[2480],"le-format)) ":[2480],"e-format)) a":[2480],"-format)) an":[2480],"format)) and":[2480],"ormat)) and ":[2480],"rmat)) and r":[2480],"mat)) and re":[2480],"at)) and rel":[2480],"t)) and relo":[2480],")) and reloa":[2480],") and reload":[2480]," and reloade":[2480],"and reloaded":[2480],"nd reloaded ":[2480],"d reloaded f":[2480]," reloaded fr":[2480],"reloaded fro":[2480],"eloaded from":[2480],"oaded from t":[2480],"aded from th":[2480],"ded from the":[2480],"ed from them":[2480],"d from them.":[2480],"## what to d":[2481],"# what to do":[2481]," what to do ":[2481],"what to do w":[2481],"hat to do wi":[2481],"at to do wit":[2481],"t to do with":[2481]," to do with ":[2481],"to do with t":[2481],"o do with th":[2481]," do with the":[2481],"do with them":[2481],"o with them?":[2481],"it's up to y":[2482],"t's up to yo":[2482],"'s up to you":[2482],"s up to you!":[2482],"can use them":[2483],"an use them ":[2483],"n use them t":[2483]," use them to":[2483],"use them to ":[2483],"se them to r":[2483],"e them to re":[2483]," them to ret":[2483],"them to retr":[2483],"hem to retri":[2483],"em to retrie":[2483],"m to retriev":[2483],"o retrieve a":[2483],"eve all the ":[2483],"ve all the m":[2483],"e all the me":[2483]," all the mes":[2483],"all the mesh":[2483],"ll the meshe":[2483],"l the meshes":[2483],"he meshes th":[2483],"e meshes tha":[2483]," meshes that":[2483],"meshes that ":[2483],"eshes that s":[2483],"shes that sh":[2483],"hes that sho":[2483],"es that shou":[2483],"s that shoul":[2483],"hat should b":[2483],"at should be":[2483]," should be l":[2483],"should be li":[2483],"hould be lig":[2483],"ould be ligh":[2483],"uld be light":[2483],"ld be lighte":[2483],"d be lighted":[2483]," be lighted ":[2483],"be lighted b":[2483],"e lighted by":[2483]," lighted by ":[2483],"lighted by t":[2483],"ighted by th":[2483],"ghted by the":[2483],"hted by the ":[2483],"ted by the l":[2483],"ed by the li":[2483],"d by the lig":[2483]," by the ligh":[2483],"by the light":[2483],"y the light ":[2483]," the light \"":[2483],"the light \"l":[2483],"he light \"li":[2483],"e light \"lig":[2483]," light \"ligh":[2483],"light \"light":[2483],"ight \"light1":[2483],"ght \"light1\"":[2483],"ht \"light1\":":[2483],"var meshesto":[2485],"ar meshestol":[2485],"r meshestoli":[2485]," meshestolig":[2485],"meshestoligh":[2485],"eshestolight":[2485],"shestolightb":[2485],"hestolightby":[2485],"estolightbyl":[2485],"stolightbyli":[2485],"tolightbylig":[2485],"olightbyligh":[2485],"lightbylight":[2485],"ightbylight1":[2485],"ghtbylight1 ":[2485],"htbylight1 =":[2485],"tbylight1 = ":[2485],"bylight1 = m":[2485],"ylight1 = my":[2485],"light1 = mys":[2485],"ight1 = mysc":[2485],"ght1 = mysce":[2485],"ht1 = myscen":[2485],"t1 = myscene":[2485],"1 = myscene.":[2485],"hesbytags(\"m":[2485],"esbytags(\"mu":[2485],"sbytags(\"mus":[2485],"bytags(\"must":[2485],"ytags(\"mustb":[2485],"tags(\"mustbe":[2485],"ags(\"mustbel":[2485],"gs(\"mustbeli":[2485],"s(\"mustbelig":[2485],"(\"mustbeligh":[2485],"\"mustbelight":[2485],"mustbelighte":[2485],"ustbelighted":[2485],"stbelightedb":[2485],"tbelightedby":[2485],"belightedbyl":[2485],"elightedbyli":[2485],"lightedbylig":[2485],"ightedbyligh":[2485],"ghtedbylight":[2485],"htedbylight1":[2485],"tedbylight1\"":[2485],"edbylight1\")":[2485],"dbylight1\");":[2485],"or make some":[2487],"r make some ":[2487]," make some g":[2487],"make some gr":[2487],"ake some gre":[2487],"ke some gree":[2487],"e some green":[2487]," some green ":[2487],"some green g":[2487],"ome green gh":[2487],"me green gho":[2487],"e green ghos":[2487]," green ghost":[2487],"green ghosts":[2487],"reen ghosts ":[2487],"een ghosts a":[2487],"en ghosts ap":[2487],"n ghosts app":[2487]," ghosts appe":[2487],"ghosts appea":[2487],"hosts appear":[2487],"osts appear ":[2487],"sts appear w":[2487],"ts appear wh":[2487],"s appear whe":[2487]," appear when":[2487],"ppear when y":[2487],"pear when yo":[2487],"ear when you":[2487],"ar when you ":[2487],"r when you w":[2487],"en you want:":[2487],"var ghosts =":[2489],"ar ghosts = ":[2489],"r ghosts = m":[2489]," ghosts = my":[2489],"ghosts = mys":[2489],"hosts = mysc":[2489],"osts = mysce":[2489],"sts = myscen":[2489],"ts = myscene":[2489],"hesbytags(\"g":[2489],"esbytags(\"gh":[2489],"sbytags(\"gho":[2489],"bytags(\"ghos":[2489],"ytags(\"ghost":[2489],"tags(\"ghost ":[2489],"ags(\"ghost &":[2489],"gs(\"ghost &&":[2489],"s(\"ghost && ":[2489],"(\"ghost && g":[2489],"\"ghost && gr":[2489],"ghost && gre":[2489],"host && gree":[2489],"ost && green":[2489],"st && green\"":[2489],"t && green\")":[2489]," && green\");":[2489],"for(var inde":[2490],"or(var index":[2490],"r(var index=":[2490],"(var index=0":[2490],"var index=0;":[2490],"ar index=0; ":[2490],"r index=0; i":[2490]," index=0; in":[2490],"index=0; ind":[2490],"ndex=0; inde":[2490],"dex=0; index":[2490],"ex=0; index ":[2490],"x=0; index <":[2490],"=0; index < ":[2490],"0; index < g":[2490],"; index < gh":[2490]," index < gho":[2490],"index < ghos":[2490],"ndex < ghost":[2490],"dex < ghosts":[2490],"ex < ghosts.":[2490],"x < ghosts.l":[2490]," < ghosts.le":[2490],"< ghosts.len":[2490]," ghosts.leng":[2490],"ghosts.lengt":[2490],"hosts.length":[2490],"osts.length;":[2490],"sts.length; ":[2490],"ts.length; i":[2490],"s.length; in":[2490],".length; ind":[2490],"length; inde":[2490],"ength; index":[2490],"ngth; index+":[2490],"gth; index++":[2490],"th; index++)":[2490],"h; index++) ":[2490],"    ghosts[i":[2491],"   ghosts[in":[2491],"  ghosts[ind":[2491]," ghosts[inde":[2491],"ghosts[index":[2491],"hosts[index]":[2491],"osts[index].":[2491],"sts[index].i":[2491],"ts[index].is":[2491],"s[index].isv":[2491],"[index].isvi":[2491],"index].isvis":[2491],"ndex].isvisi":[2491],"dex].isvisib":[2491],"ex].isvisibl":[2491],"x].isvisible":[2491],"].isvisible ":[2491],".isvisible =":[2491],"isvisible = ":[2491],"svisible = t":[2491],"visible = tr":[2491],"isible = tru":[2491],"sible = true":[2491],"ible = true;":[2491]," - an opacit":[2493],"- an opacity":[2493],"ty texture d":[2493],"y texture de":[2493]," texture def":[2493],"texture defi":[2493],"exture defin":[2493],"xture define":[2493],"ture defined":[2493]," - the opaci":[2494],"- the opacit":[2494],"he opacity f":[2494],"e opacity fr":[2494]," opacity fre":[2494],"opacity fres":[2494],"pacity fresn":[2494],"acity fresne":[2494],"city fresnel":[2494],"ity fresnel ":[2494],"ty fresnel e":[2494],"y fresnel ef":[2494],"snel effect ":[2494],"nel effect a":[2494],"el effect ac":[2494],"l effect act":[2494]," effect acti":[2494],"effect activ":[2494],"ffect active":[2494],"n case of an":[2495,2499]," case of ano":[2495,2499],"case of anot":[2495,2499],"ase of anoth":[2495,2499],"se of anothe":[2495,2499],"e of another":[2495,2499]," of another ":[2495,2499],"of another t":[2495,2499],"f another ty":[2495,2499]," another typ":[2495,2499],"another type":[2495,2499],"nother type ":[2495,2499],"other type o":[2495,2499],"ther type of":[2495,2499],"her type of ":[2495,2499],"er type of m":[2495,2499],"r type of ma":[2495,2499]," type of mat":[2495,2499],"type of mate":[2495,2499],"ype of mater":[2495,2499],"pe of materi":[2495,2499],"e of materia":[2495,2499],"of material,":[2495,2499],"f material, ":[2495,2499]," material, i":[2495,2499],"terial, if t":[2495,2499],"erial, if th":[2495,2499],"rial, if the":[2495,2499],"ial, if the ":[2495,2499],"al, if the m":[2495,2499],"l, if the ma":[2495,2499],", if the mat":[2495,2499]," if the mate":[2495,2499],"if the mater":[2495,2499],"f the materi":[2495,2499],"he material'":[2495,2499],"e material's":[2495,2499]," material's ":[2495,2499],"material's `":[2495,2499],"aterial's `.":[2495,2499],"terial's `.n":[2495,2499],"erial's `.ne":[2495,2499],"rial's `.nee":[2495,2499],"ial's `.need":[2495,2499],"al's `.needa":[2495,2499],"l's `.needal":[2495,2499],"'s `.needalp":[2495,2499],"s `.needalph":[2495,2499]," `.needalpha":[2495,2499],"`.needalphab":[2495],".needalphabl":[2495],"needalphable":[2495],"eedalphablen":[2495],"edalphablend":[2495],"dalphablendi":[2495],"alphablendin":[2495],"lphablending":[2495],"phablending(":[2495],"hablending()":[2495],"ablending()`":[2495],"blending()` ":[2495],"lending()` f":[2495],"ending()` fu":[2495],"nding()` fun":[2495],"ding()` func":[2495],"ing()` funct":[2495,2499],"ng()` functi":[2495,2499],"g()` functio":[2495,2499],")` function ":[2495,2499],"` function r":[2495,2499]," function re":[2495,2499],"function ret":[2495,2499],"unction retu":[2495,2499],"nction retur":[2495,2499],"ction return":[2495,2499],"tion returns":[2495,2499],"ion returns ":[2495,2499],"on returns `":[2495,2499],"n returns `t":[2495,2499]," returns `tr":[2495,2499],"returns `tru":[2495,2499],"eturns `true":[2495,2499],"turns `true`":[2495,2499],"sted meshes:":[2496],"ted meshes:*":[2496],"ial, if it h":[2497],"al, if it ha":[2497],"l, if it has":[2497],", if it has:":[2497]," - a diffuse":[2498],"- a diffuse ":[2498],"use texture ":[2498],"se texture w":[2498],"e texture wi":[2498]," texture wit":[2498],"texture with":[2498],"exture with ":[2498],"xture with t":[2498],"ture with th":[2498],"ure with the":[2498],"re with the ":[2498],"e with the p":[2498]," with the pr":[2498],"with the pro":[2498],"ith the prop":[2498],"th the prope":[2498],"h the proper":[2498],"property `.h":[2498],"roperty `.ha":[2498],"operty `.has":[2498],"perty `.hasa":[2498],"erty `.hasal":[2498],"rty `.hasalp":[2498],"ty `.hasalph":[2498],"y `.hasalpha":[2498]," `.hasalpha`":[2498],"`.hasalpha` ":[2498],".hasalpha` s":[2498],"hasalpha` se":[2498],"asalpha` set":[2498],"salpha` set ":[2498],"ha` set to `":[2498],"a` set to `t":[2498],"` set to `tr":[2498]," set to `tru":[2498],"set to `true":[2498],"et to `true`":[2498],"`.needalphat":[2499],".needalphate":[2499],"needalphates":[2499],"eedalphatest":[2499],"edalphatesti":[2499],"dalphatestin":[2499],"alphatesting":[2499],"lphatesting(":[2499],"phatesting()":[2499],"hatesting()`":[2499],"atesting()` ":[2499],"testing()` f":[2499],"esting()` fu":[2499],"sting()` fun":[2499],"ting()` func":[2499],"que meshes:*":[2500],"ue meshes:**":[2500]," mesh that d":[2501],"mesh that do":[2501],"esh that doe":[2501],"sh that does":[2501],"h that does ":[2501]," that does n":[2501],"that does no":[2501],"hat does not":[2501],"at does not ":[2501],"t does not f":[2501]," does not fi":[2501],"does not fit":[2501],"oes not fit ":[2501],"es not fit i":[2501],"s not fit in":[2501]," not fit int":[2501],"not fit into":[2501],"ot fit into ":[2501],"t fit into o":[2501]," fit into on":[2501],"fit into one":[2501],"it into one ":[2501],"t into one o":[2501]," into one of":[2501],"into one of ":[2501],"nto one of t":[2501],"one of the a":[2501],"ne of the ab":[2501],"e of the abo":[2501]," of the abov":[2501],"of the above":[2501],"f the above ":[2501]," the above c":[2501],"the above ca":[2501],"he above cat":[2501],"e above cate":[2501]," above categ":[2501],"above catego":[2501],"bove categor":[2501],"ove categori":[2501],"ve categorie":[2501],"e categories":[2501],"occasionally":[2502],"ccasionally,":[2502],"casionally, ":[2502],"asionally, y":[2502],"sionally, yo":[2502],"ionally, you":[2502],"onally, you ":[2502],"nally, you m":[2502],"ally, you ma":[2502],"lly, you may":[2502],"ly, you may ":[2502],"y, you may h":[2502],"u may have s":[2502]," may have so":[2502],"may have som":[2502],"ay have some":[2502],"y have some ":[2502]," have some o":[2502],"have some of":[2502],"ave some of ":[2502],"ve some of y":[2502],"e some of yo":[2502]," some of you":[2502],"some of your":[2502],"ome of your ":[2502],"me of your m":[2502],"e of your me":[2502],"f your meshe":[2502],"our meshes f":[2502],"ur meshes fa":[2502],"r meshes fal":[2502]," meshes fall":[2502],"meshes falli":[2502],"eshes fallin":[2502],"shes falling":[2502],"hes falling ":[2502],"es falling i":[2502],"s falling in":[2502]," falling int":[2502],"falling into":[2502],"alling into ":[2502],"lling into t":[2502],"ling into th":[2502],"ing into the":[2502],"ng into the ":[2502],"g into the w":[2502]," into the wr":[2502],"into the wro":[2502],"nto the wron":[2502],"to the wrong":[2502],"o the wrong ":[2502]," the wrong c":[2502],"the wrong ca":[2502],"he wrong cat":[2502],"e wrong cate":[2502]," wrong categ":[2502],"wrong catego":[2502],"rong categor":[2502],"ong category":[2502],"ng category,":[2502],"g category, ":[2502]," category, e":[2502],"category, e.":[2502],"ategory, e.g":[2502],"tegory, e.g.":[2502],"egory, e.g. ":[2502],"gory, e.g. a":[2502],"ory, e.g. an":[2502],"ry, e.g. an ":[2502],"y, e.g. an a":[2502],", e.g. an al":[2502]," e.g. an alp":[2502],"e.g. an alph":[2502],".g. an alpha":[2502],"g. an alpha ":[2502],". an alpha t":[2502]," an alpha te":[2502],"an alpha tes":[2502],"n alpha test":[2502],"tested mesh ":[2502],"ested mesh u":[2502],"sted mesh un":[2502],"ted mesh unn":[2502],"ed mesh unne":[2502],"d mesh unnec":[2502]," mesh unnece":[2502],"mesh unneces":[2502],"esh unnecess":[2502],"sh unnecessa":[2502],"h unnecessar":[2502]," unnecessari":[2502],"unnecessaril":[2502],"nnecessarily":[2502],"ecessarily m":[2502],"cessarily ma":[2502],"essarily mar":[2502],"ssarily mark":[2502],"sarily marke":[2502],"arily marked":[2502],"rily marked ":[2502],"ily marked a":[2502],"ly marked as":[2502],"y marked as ":[2502]," marked as a":[2502],"marked as al":[2502],"arked as alp":[2502],"rked as alph":[2502],"ked as alpha":[2502],"ed as alpha-":[2502],"d as alpha-b":[2502]," as alpha-bl":[2502],"as alpha-ble":[2502],"pha-blended,":[2502],"ha-blended, ":[2502],"a-blended, o":[2502],"-blended, or":[2502],"blended, or ":[2502],"lended, or a":[2502],"ended, or a ":[2502],"nded, or a m":[2502],"ded, or a me":[2502],"ed, or a mes":[2502],"d, or a mesh":[2502],", or a mesh ":[2502]," or a mesh s":[2502],"or a mesh st":[2502],"r a mesh sta":[2502]," a mesh stay":[2502],"a mesh stayi":[2502]," mesh stayin":[2502],"mesh staying":[2502],"esh staying ":[2502],"sh staying o":[2502],"h staying op":[2502]," staying opa":[2502],"staying opaq":[2502],"taying opaqu":[2502],"aying opaque":[2502],"ying opaque ":[2502],"ing opaque w":[2502],"ng opaque wh":[2502],"g opaque whe":[2502]," opaque when":[2502],"opaque when ":[2502],"paque when i":[2502],"aque when it":[2502],"que when it ":[2502],"ue when it s":[2502],"e when it sh":[2502]," when it sho":[2502],"when it shou":[2502],"hen it shoul":[2502],"en it should":[2502],"n it shouldn":[2502]," it shouldn'":[2502],"it shouldn't":[2502],"t shouldn't.":[2502]," shouldn't. ":[2502],"shouldn't. t":[2502],"houldn't. th":[2502],"ouldn't. thi":[2502],"uldn't. this":[2502],"ldn't. this ":[2502],"dn't. this w":[2502],"n't. this wi":[2502],"'t. this wil":[2502],"t. this will":[2502]," this will g":[2502],"this will gi":[2502],"his will giv":[2502],"is will give":[2502],"s will give ":[2502]," will give y":[2502],"will give yo":[2502],"ill give you":[2502],"ll give you ":[2502],"l give you w":[2502]," give you we":[2502],"give you wei":[2502],"ive you weir":[2502],"ve you weird":[2502],"e you weird ":[2502]," you weird g":[2502],"you weird gl":[2502],"ou weird gli":[2502],"u weird glit":[2502]," weird glitc":[2502],"weird glitch":[2502],"eird glitche":[2502],"ird glitches":[2502],"rd glitches,":[2502],"d glitches, ":[2502]," glitches, w":[2502],"glitches, wh":[2502],"litches, whi":[2502],"itches, whic":[2502],"tches, which":[2502],"ches, which ":[2502],"hes, which c":[2502],"es, which ca":[2502],"s, which can":[2502],", which can ":[2502]," which can s":[2502],"which can so":[2502],"hich can som":[2502],"ich can some":[2502],"ch can somet":[2502],"h can someti":[2502]," can sometim":[2502],"can sometime":[2502],"an sometimes":[2502],"n sometimes ":[2502],"metimes be v":[2502],"etimes be ve":[2502],"times be ver":[2502],"imes be very":[2502],"mes be very ":[2502],"es be very a":[2502],"s be very an":[2502]," be very ann":[2502],"be very anno":[2502],"e very annoy":[2502]," very annoyi":[2502],"very annoyin":[2502],"ery annoying":[2502],"ry annoying.":[2502],"y annoying. ":[2502]," annoying. y":[2502],"annoying. yo":[2502],"nnoying. you":[2502],"noying. you ":[2502],"oying. you s":[2502],"ying. you sh":[2502],"ing. you sho":[2502],"ng. you shou":[2502],"g. you shoul":[2502],". you should":[2502],"you should r":[2502],"ou should re":[2502],"u should ref":[2502]," should refe":[2502],"should refer":[2502],"hould refer ":[2502],"ould refer t":[2502],"uld refer to":[2502],"ld refer to ":[2502],"d refer to t":[2502],"is article t":[2502],"s article to":[2502]," article to ":[2502],"article to c":[2502],"rticle to ch":[2502],"ticle to che":[2502],"icle to chec":[2502],"cle to check":[2502],"le to check ":[2502],"e to check h":[2502]," to check ho":[2502],"to check how":[2502],"o check how ":[2502]," check how y":[2502],"check how yo":[2502],"heck how you":[2502],"eck how your":[2502],"ck how your ":[2502],"k how your m":[2502]," how your me":[2502],"ur meshes an":[2502],"r meshes and":[2502]," meshes and ":[2502],"meshes and m":[2502],"eshes and ma":[2502],"shes and mat":[2502],"hes and mate":[2502],"es and mater":[2502],"s and materi":[2502],"nd materials":[2502],"d materials ":[2502]," materials p":[2502],"materials pr":[2502],"aterials pro":[2502],"terials prop":[2502],"erials prope":[2502],"rials proper":[2502],"ials propert":[2502],"als properti":[2502],"ls propertie":[2502],"s properties":[2502],"roperties ar":[2502],"operties are":[2502],"perties are ":[2502],"erties are s":[2502],"rties are se":[2502],"ties are set":[2502],"ies are set.":[2502],"you're welco":[2503],"ou're welcom":[2503],"u're welcome":[2503],"'re welcome ":[2503],"re welcome t":[2503],"e welcome to":[2503]," welcome to ":[2503],"welcome to u":[2503],"elcome to us":[2503],"lcome to use":[2503],"come to use ":[2503],"ome to use t":[2503],"me to use th":[2503],"e to use thi":[2503],"o use this [":[2503]," use this [p":[2503],"use this [pl":[2503],"se this [pla":[2503],"e this [play":[2503]," this [playg":[2503],"this [playgr":[2503],"his [playgro":[2503],"is [playgrou":[2503],"s [playgroun":[2503]," [playground":[2503,2514],"[playground ":[2503],"und example]":[2503],"nd example](":[2503],"d example](h":[2503],"le](http://b":[2503],"ites.net/#1p":[2503],"tes.net/#1ph":[2503],"es.net/#1phy":[2503],"s.net/#1phyb":[2503],".net/#1phyb0":[2503],"net/#1phyb0#":[2503],"et/#1phyb0#6":[2503],"t/#1phyb0#6)":[2503],"/#1phyb0#6) ":[2503],"#1phyb0#6) t":[2503],"1phyb0#6) to":[2503],"phyb0#6) to ":[2503],"hyb0#6) to e":[2503],"yb0#6) to ex":[2503],"b0#6) to exp":[2503],"0#6) to expe":[2503],"#6) to exper":[2503],"6) to experi":[2503],") to experim":[2503],"experiment o":[2503],"xperiment on":[2503],"periment on ":[2503],"eriment on t":[2503],"riment on th":[2503],"iment on the":[2503],"ment on the ":[2503],"ent on the d":[2503],"nt on the di":[2503],"t on the dif":[2503]," on the diff":[2503],"on the diffe":[2503],"n the differ":[2503],"different th":[2503],"ifferent thi":[2503],"fferent thin":[2503],"ferent thing":[2503],"erent things":[2503],"rent things ":[2503],"ent things e":[2503],"nt things ex":[2503],"t things exp":[2503]," things expl":[2503],"things expla":[2503],"hings explai":[2503],"ings explain":[2503],"ngs explaine":[2503],"gs explained":[2503]," explained h":[2503],"explained he":[2503],"xplained her":[2503],"plained here":[2503],"lained here.":[2503],"ained here. ":[2503],"ined here. p":[2503],"ned here. pr":[2503],"ed here. pre":[2503],"d here. pres":[2503]," here. press":[2503],"here. pressi":[2503],"ere. pressin":[2503],"re. pressing":[2503],"e. pressing ":[2503],". pressing f":[2503]," pressing f9":[2503],"pressing f9 ":[2503],"ressing f9 w":[2503],"essing f9 wi":[2503],"ssing f9 wil":[2503],"sing f9 will":[2503],"ing f9 will ":[2503],"ng f9 will s":[2503],"g f9 will sw":[2503]," f9 will swi":[2503],"f9 will swit":[2503],"9 will switc":[2503]," will switch":[2503],"will switch ":[2503],"ill switch b":[2503],"ll switch be":[2503],"l switch bet":[2503],"ch between n":[2503],"h between no":[2503]," between nor":[2503],"between norm":[2503],"etween norma":[2503],"tween normal":[2503],"ween normal ":[2503],"een normal r":[2503],"en normal re":[2503],"n normal ren":[2503]," normal rend":[2503],"normal rende":[2503],"ormal render":[2503],"rmal render ":[2503],"mal render a":[2503],"al render an":[2503],"l render and":[2503]," render and ":[2503],"render and d":[2503],"ender and de":[2503],"nder and dep":[2503],"der and dept":[2503],"er and depth":[2503],"r and depth ":[2503]," and depth b":[2503],"and depth bu":[2503],"nd depth buf":[2503],"d depth buff":[2503],"pth buffer r":[2503],"th buffer re":[2503],"h buffer ren":[2503]," buffer rend":[2503],"buffer rende":[2503],"uffer render":[2503],"ffer render.":[2503],"## things to":[2504],"# things to ":[2504]," things to d":[2504],"things to do":[2504],"hings to do ":[2504],"ings to do a":[2504],"ngs to do an":[2504],"gs to do and":[2504],"s to do and ":[2504]," to do and n":[2504],"to do and no":[2504],"o do and not":[2504]," do and not ":[2504],"do and not t":[2504],"o and not to":[2504]," and not to ":[2504],"and not to d":[2504],"nd not to do":[2504],"- make sure ":[2505]," sure your a":[2505],"sure your al":[2505],"ure your alp":[2505],"re your alph":[2505],"e your alpha":[2505]," your alpha ":[2505,2508],"your alpha b":[2505],"our alpha bl":[2505],"ur alpha ble":[2505],"ded meshes d":[2505],"ed meshes do":[2505],"d meshes do ":[2505]," meshes do n":[2505],"meshes do no":[2505],"eshes do not":[2505],"shes do not ":[2505],"hes do not i":[2505],"es do not in":[2505],"s do not int":[2505]," do not inte":[2505],"do not inter":[2505],"o not inters":[2505]," not interse":[2505],"not intersec":[2505],"ot intersect":[2505],"t intersect,":[2505]," intersect, ":[2505],"intersect, a":[2505],"ntersect, as":[2505],"tersect, as ":[2505],"ersect, as t":[2505],"rsect, as th":[2505],"sect, as thi":[2505],"ect, as this":[2505],"ct, as this ":[2505],"t, as this w":[2505],", as this wi":[2505]," as this wil":[2505],"as this will":[2505],"s this will ":[2505]," this will i":[2505],"this will in":[2505],"his will ine":[2505],"is will inev":[2505],"s will inevi":[2505]," will inevit":[2505],"will inevita":[2505],"ill inevitab":[2505],"ll inevitabl":[2505],"l inevitably":[2505]," inevitably ":[2505],"inevitably l":[2505],"nevitably le":[2505],"evitably lea":[2505],"vitably lead":[2505],"itably lead ":[2505],"tably lead t":[2505],"ably lead to":[2505],"bly lead to ":[2505],"ly lead to r":[2505],"y lead to re":[2505]," lead to ren":[2505],"lead to rend":[2505],"ead to rende":[2505],"ad to render":[2505],"d to render ":[2505]," to render g":[2505],"to render gl":[2505],"o render gli":[2505]," render glit":[2505],"render glitc":[2505],"ender glitch":[2505],"nder glitche":[2505],"der glitches":[2505],"er glitches.":[2505],"- avoid havi":[2506]," avoid havin":[2506],"avoid having":[2506],"void having ":[2506],"oid having h":[2506],"id having he":[2506],"d having hea":[2506]," having heav":[2506],"having heavi":[2506],"aving heavil":[2506],"ving heavily":[2506],"ing heavily ":[2506],"ng heavily s":[2506],"g heavily st":[2506]," heavily str":[2506],"heavily stre":[2506],"eavily stret":[2506],"avily stretc":[2506],"vily stretch":[2506],"ily stretche":[2506],"ly stretched":[2506],"y stretched ":[2506]," stretched a":[2506],"stretched al":[2506],"tretched alp":[2506],"retched alph":[2506],"etched alpha":[2506],"tched alpha ":[2506],"ched alpha b":[2506],"hed alpha bl":[2506],"ed alpha ble":[2506],"d alpha blen":[2506],"ded meshes (":[2506],"ed meshes (i":[2506],"d meshes (i.":[2506]," meshes (i.e":[2506],"meshes (i.e.":[2506],"eshes (i.e. ":[2506],"shes (i.e. l":[2506],"hes (i.e. la":[2506],"es (i.e. lar":[2506],"s (i.e. larg":[2506]," (i.e. large":[2506],"(i.e. large ":[2506],"i.e. large p":[2506],".e. large pl":[2506],"e. large pla":[2506],". large plan":[2506]," large plane":[2506],"large planes":[2506],"arge planes)":[2506],"rge planes);":[2506],"ge planes); ":[2506],"e planes); s":[2506]," planes); si":[2506],"planes); sin":[2506],"lanes); sinc":[2506],"anes); since":[2506],"nes); since ":[2506],"es); since t":[2506],"s); since th":[2506],"); since the":[2506],"; since the ":[2506]," since the c":[2506],"since the ce":[2506],"ince the cen":[2506],"nce the cent":[2506],"ce the cente":[2506],"e the center":[2506]," center of i":[2506],"center of it":[2506],"enter of its":[2506],"nter of its ":[2506],"ter of its b":[2506],"er of its bo":[2506],"r of its bou":[2506]," of its boun":[2506],"of its bound":[2506],"f its boundi":[2506]," its boundin":[2506],"its bounding":[2506],"ts bounding ":[2506],"s bounding s":[2506],"ding sphere ":[2506],"ing sphere i":[2506],"ng sphere is":[2506],"g sphere is ":[2506]," sphere is u":[2506],"sphere is us":[2506],"phere is use":[2506],"here is used":[2506],"ere is used ":[2506],"re is used f":[2506],"e is used fo":[2506]," is used for":[2506],"is used for ":[2506],"s used for d":[2506]," used for de":[2506],"used for dep":[2506],"sed for dept":[2506],"ed for depth":[2506],"d for depth ":[2506]," for depth s":[2506],"for depth so":[2506],"or depth sor":[2506],"r depth sort":[2506]," depth sorti":[2506,2513],"depth sortin":[2506,2513],"epth sorting":[2506,2513],"pth sorting,":[2506],"th sorting, ":[2506],"h sorting, d":[2506]," sorting, do":[2506],"sorting, doi":[2506],"orting, doin":[2506],"rting, doing":[2506],"ting, doing ":[2506],"ing, doing t":[2506],"ng, doing th":[2506],"g, doing thi":[2506],", doing this":[2506]," doing this ":[2506],"doing this m":[2506],"oing this ma":[2506],"ing this may":[2506],"ng this may ":[2506],"g this may r":[2506]," this may re":[2506],"this may res":[2506],"his may resu":[2506],"is may resul":[2506],"s may result":[2506]," may result ":[2506],"may result i":[2506],"ay result in":[2506],"y result in ":[2506]," result in a":[2506],"result in a ":[2506],"esult in a m":[2506],"sult in a me":[2506],"ult in a mes":[2506],"lt in a mesh":[2506],"t in a mesh ":[2506]," in a mesh b":[2506],"in a mesh be":[2506],"n a mesh bei":[2506]," a mesh bein":[2506],"a mesh being":[2506]," mesh being ":[2506],"mesh being s":[2506],"esh being so":[2506],"sh being sor":[2506],"h being sort":[2506]," being sorte":[2506],"being sorted":[2506],"eing sorted ":[2506],"ing sorted a":[2506],"ng sorted as":[2506],"g sorted as ":[2506]," sorted as f":[2506],"sorted as fa":[2506],"orted as far":[2506],"rted as far ":[2506],"ted as far a":[2506],"ed as far aw":[2506],"d as far awa":[2506]," as far away":[2506],"as far away ":[2506],"s far away f":[2506]," far away fr":[2506],"far away fro":[2506],"ar away from":[2506],"r away from ":[2506]," away from t":[2506],"away from th":[2506],"way from the":[2506],"ay from the ":[2506],"y from the c":[2506],"the camera b":[2506],"he camera bu":[2506],"e camera but":[2506]," camera but ":[2506],"camera but a":[2506],"amera but ac":[2506],"mera but act":[2506],"era but actu":[2506],"ra but actua":[2506],"a but actual":[2506]," but actuall":[2506],"but actually":[2506],"ut actually ":[2506],"t actually c":[2506]," actually cl":[2506],"actually clo":[2506],"ctually clos":[2506],"tually close":[2506],"ually closer":[2506],"ally closer ":[2506],"lly closer t":[2506],"ly closer to":[2506],"y closer to ":[2506]," closer to m":[2506],"closer to ma":[2506],"loser to man":[2506],"oser to many":[2506],"ser to many ":[2506],"er to many o":[2506],"r to many ot":[2506]," to many oth":[2506],"to many othe":[2506],"o many other":[2506]," many other ":[2506],"many other m":[2506],"any other me":[2506],"ny other mes":[2506],"y other mesh":[2506],"ther meshes.":[2506],"- use alpha ":[2507]," use alpha t":[2507],"use alpha te":[2507],"se alpha tes":[2507],"e alpha test":[2507],"alpha test a":[2507],"lpha test as":[2507],"pha test as ":[2507],"ha test as m":[2507],"a test as mu":[2507]," test as muc":[2507],"test as much":[2507],"est as much ":[2507],"st as much a":[2507],"t as much as":[2507]," as much as ":[2507],"as much as p":[2507],"s much as po":[2507]," much as pos":[2507],"much as poss":[2507],"uch as possi":[2507],"ch as possib":[2507],"h as possibl":[2507],"as possible;":[2507],"s possible; ":[2507]," possible; t":[2507],"possible; th":[2507],"ossible; thi":[2507],"ssible; this":[2507],"sible; this ":[2507],"ible; this m":[2507],"ble; this ma":[2507],"le; this may":[2507],"e; this may ":[2507],"; this may l":[2507]," this may lo":[2507],"this may loo":[2507],"his may look":[2507],"is may look ":[2507],"s may look p":[2507]," may look pe":[2507],"may look per":[2507],"ay look perf":[2507],"y look perfe":[2507]," look perfec":[2507],"look perfect":[2507],"ook perfect ":[2507],"ok perfect f":[2507],"k perfect fo":[2507]," perfect for":[2507],"perfect for ":[2507],"erfect for a":[2507],"rfect for a ":[2507],"fect for a p":[2507],"ect for a pi":[2507],"ct for a pix":[2507],"t for a pixe":[2507]," for a pixel":[2507],"for a pixel ":[2507],"or a pixel a":[2507],"r a pixel ar":[2507]," a pixel art":[2507],"a pixel art ":[2507]," pixel art s":[2507],"pixel art st":[2507],"ixel art sty":[2507],"xel art styl":[2507],"el art style":[2507],"l art style,":[2507]," art style, ":[2507],"art style, o":[2507],"rt style, or":[2507],"t style, or ":[2507]," style, or i":[2507],"style, or if":[2507],"tyle, or if ":[2507],"yle, or if t":[2507],"le, or if th":[2507],"e, or if the":[2507],", or if the ":[2507]," or if the t":[2507],"or if the tr":[2507],"r if the tra":[2507]," if the tran":[2507],"if the trans":[2507],"f the transp":[2507]," the transpa":[2507],"the transpar":[2507],"he transpare":[2507],"e transparen":[2507],"ransparent p":[2507],"ansparent pa":[2507],"nsparent par":[2507],"sparent part":[2507],"parent parts":[2507],"arent parts ":[2507],"rent parts b":[2507],"ent parts bo":[2507],"nt parts bou":[2507],"t parts boun":[2507]," parts bound":[2507],"parts bounda":[2507],"arts boundar":[2507],"rts boundari":[2507],"ts boundarie":[2507],"s boundaries":[2507]," boundaries ":[2507],"boundaries a":[2507],"oundaries ar":[2507],"undaries are":[2507],"ndaries are ":[2507],"daries are s":[2507],"aries are st":[2507],"ries are str":[2507],"ies are stra":[2507],"es are strai":[2507],"s are straig":[2507]," are straigh":[2507],"are straight":[2507],"re straight ":[2507],"e straight h":[2507]," straight ho":[2507],"straight hor":[2507],"traight hori":[2507],"raight horiz":[2507],"aight horizo":[2507],"ight horizon":[2507],"ght horizont":[2507],"ht horizonta":[2507],"t horizontal":[2507],"horizontal o":[2507],"orizontal or":[2507],"rizontal or ":[2507],"izontal or v":[2507],"zontal or ve":[2507],"ontal or ver":[2507],"ntal or vert":[2507],"tal or verti":[2507],"al or vertic":[2507],"l or vertica":[2507]," or vertical":[2507],"or vertical ":[2507],"r vertical l":[2507]," vertical li":[2507],"vertical lin":[2507],"ertical line":[2507],"rtical lines":[2507],"tical lines.":[2507],"- to get rid":[2508]," to get rid ":[2508],"to get rid o":[2508],"o get rid of":[2508]," get rid of ":[2508],"get rid of j":[2508],"et rid of ja":[2508],"t rid of jag":[2508]," rid of jagg":[2508],"rid of jagge":[2508],"id of jagged":[2508],"d of jagged ":[2508]," of jagged e":[2508],"of jagged ed":[2508],"f jagged edg":[2508]," jagged edge":[2508],"jagged edges":[2508],"agged edges ":[2508],"gged edges o":[2508],"ged edges on":[2508],"ed edges on ":[2508],"d edges on y":[2508]," edges on yo":[2508],"edges on you":[2508],"dges on your":[2508],"ges on your ":[2508],"es on your a":[2508],"s on your al":[2508]," on your alp":[2508],"on your alph":[2508],"n your alpha":[2508],"your alpha t":[2508],"our alpha te":[2508],"ur alpha tes":[2508],"r alpha test":[2508],"ed meshes, u":[2508],"d meshes, us":[2508]," meshes, use":[2508],"meshes, use ":[2508],"eshes, use a":[2508],"shes, use an":[2508],"hes, use ant":[2508],"es, use anti":[2508],"s, use anti-":[2508],", use anti-a":[2508]," use anti-al":[2508],"use anti-ali":[2508],"se anti-alia":[2508],"e anti-alias":[2508]," anti-aliasi":[2508],"anti-aliasin":[2508],"nti-aliasing":[2508],"ti-aliasing ":[2508],"i-aliasing f":[2508],"-aliasing fo":[2508],"aliasing for":[2508],"liasing for ":[2508],"iasing for y":[2508],"asing for yo":[2508],"sing for you":[2508],"ing for your":[2508],"ng for your ":[2508],"g for your s":[2508]," for your sc":[2508],"for your sce":[2508],"or your scen":[2508],"r your scene":[2508],"your scene (":[2508],"our scene ([":[2508],"ur scene ([f":[2508],"r scene ([fx":[2508]," scene ([fxa":[2508],"scene ([fxaa":[2508],"cene ([fxaap":[2508],"ene ([fxaapo":[2508],"ne ([fxaapos":[2508],"e ([fxaapost":[2508]," ([fxaapostp":[2508],"([fxaapostpr":[2508],"[fxaapostpro":[2508],"postprocess]":[2508],"ostprocess](":[2508],"stprocess](p":[2508],"tprocess](pa":[2508],"process](pag":[2508],"rocess](page":[2508],"ocess](page.":[2508],"cess](page.p":[2508],"ess](page.ph":[2508],"ss](page.php":[2508],"s](page.php?":[2508],"ge.php?p=224":[2508],"e.php?p=2243":[2508],".php?p=22431":[2508],"php?p=22431)":[2508],"hp?p=22431))":[2508],"p?p=22431));":[2508],"?p=22431)); ":[2508],"p=22431)); w":[2508],"=22431)); wh":[2508],"22431)); whe":[2508],"2431)); when":[2508],"431)); when ":[2508],"31)); when u":[2508],"1)); when us":[2508],")); when usi":[2508],"); when usin":[2508],"; when using":[2508]," when using ":[2508,2560],"when using a":[2508],"hen using an":[2508],"en using ant":[2508],"n using anti":[2508]," using anti-":[2508],"using anti-a":[2508],"sing anti-al":[2508],"ing anti-ali":[2508],"ng anti-alia":[2508],"g anti-alias":[2508],"ti-aliasing,":[2508],"i-aliasing, ":[2508],"-aliasing, y":[2508],"aliasing, yo":[2508],"liasing, you":[2508],"iasing, you ":[2508],"asing, you c":[2508],"sing, you ca":[2508],"g, you can e":[2508],"u can even d":[2508]," can even di":[2508],"can even dis":[2508],"an even disa":[2508],"n even disab":[2508]," even disabl":[2508],"even disable":[2508],"ven disable ":[2508],"en disable t":[2508],"isable the b":[2508],"sable the bu":[2508],"able the bui":[2508],"ble the buil":[2508],"le the built":[2508],"e the built-":[2508]," the built-i":[2508],"the built-in":[2508],"he built-in ":[2508],"e built-in s":[2508]," built-in sm":[2508,2509],"built-in smo":[2508,2509],"uilt-in smoo":[2508,2509],"ilt-in smoot":[2508,2509],"lt-in smooth":[2508,2509],"t-in smoothi":[2508,2509],"-in smoothin":[2508,2509],"in smoothing":[2508,2509],"n smoothing ":[2508,2509]," smoothing o":[2508],"smoothing of":[2508],"moothing of ":[2508],"oothing of w":[2508],"othing of we":[2508],"thing of web":[2508],"hing of webg":[2508],"ing of webgl":[2508],"ng of webgl ":[2508],"g of webgl w":[2508]," of webgl wh":[2508],"of webgl whe":[2508],"f webgl when":[2508]," webgl when ":[2508],"webgl when c":[2508],"ebgl when cr":[2508],"bgl when cre":[2508],"gl when crea":[2508],"l when creat":[2508],"n creating t":[2508]," creating th":[2508],"creating the":[2508],"reating the ":[2508],"eating the e":[2508],"ating the en":[2508],"ting the eng":[2508],"ing the engi":[2508],"ng the engin":[2508],"g the engine":[2508],"the engine o":[2508],"he engine ob":[2508],"e engine obj":[2508]," engine obje":[2508],"engine objec":[2508],"ngine object":[2508],"gine object:":[2508],"`engine = ne":[2509],"ne(canvas, f":[2509],"e(canvas, fa":[2509],"(canvas, fal":[2509],"canvas, fals":[2509],"anvas, false":[2509],"nvas, false)":[2509],"vas, false);":[2509],"as, false); ":[2509],"s, false); /":[2509],", false); //":[2509]," false); // ":[2509],"false); // b":[2509],"alse); // bu":[2509],"lse); // bui":[2509],"se); // buil":[2509],"e); // built":[2509],"); // built-":[2509],"; // built-i":[2509]," // built-in":[2509],"// built-in ":[2509],"/ built-in s":[2509]," smoothing w":[2509],"smoothing wi":[2509],"moothing wil":[2509],"oothing will":[2509],"othing will ":[2509],"thing will b":[2509],"hing will be":[2509],"ing will be ":[2509],"ng will be d":[2509],"g will be di":[2509],"will be disa":[2509],"ill be disab":[2509],"ll be disabl":[2509],"l be disable":[2509]," be disabled":[2509],"be disabled`":[2509],"this may hel":[2510],"his may help":[2510],"is may help ":[2510],"s may help y":[2510]," may help yo":[2510],"may help you":[2510],"ay help you ":[2510],"y help you w":[2510]," help you wi":[2510],"help you wit":[2510],"elp you with":[2510],"lp you with ":[2510],"p you with v":[2510]," you with vi":[2510],"you with vis":[2510],"ou with visi":[2510],"u with visib":[2510]," with visibl":[2510],"with visible":[2510],"ith visible ":[2510],"th visible s":[2510],"h visible se":[2510]," visible sea":[2510],"visible seam":[2510],"isible seams":[2510],"sible seams ":[2510],"ible seams b":[2510],"ble seams be":[2510],"le seams bet":[2510],"e seams betw":[2510]," seams betwe":[2510],"seams betwee":[2510],"eams between":[2510],"ams between ":[2510],"ms between m":[2510],"s between me":[2510]," between mes":[2510],"between mesh":[2510],"etween meshe":[2510],"tween meshes":[2510],"ween meshes ":[2510],"een meshes &":[2510],"en meshes & ":[2510],"n meshes & o":[2510]," meshes & ot":[2510],"meshes & oth":[2510],"eshes & othe":[2510],"shes & other":[2510],"hes & other ":[2510],"es & other s":[2510],"s & other si":[2510]," & other sim":[2510],"& other simi":[2510],"er similar i":[2510],"r similar is":[2510]," similar iss":[2510],"similar issu":[2510],"imilar issue":[2510],"milar issues":[2510],"ilar issues.":[2510],"- do not for":[2511]," do not forg":[2511],"do not forge":[2511],"o not forget":[2511]," not forget ":[2511],"not forget t":[2511],"ot forget to":[2511]," forget to e":[2511],"forget to en":[2511],"orget to ena":[2511],"rget to enab":[2511],"get to enabl":[2511],"et to enable":[2511],"t to enable ":[2511]," to enable b":[2511],"to enable ba":[2511],"o enable bac":[2511]," enable back":[2511],"enable backf":[2511],"nable backfa":[2511],"able backfac":[2511],"ble backface":[2511],"le backface ":[2511],"e backface c":[2511],"ce culling w":[2511],"e culling wi":[2511]," culling wit":[2511],"culling with":[2511],"ulling with ":[2511],"lling with a":[2511],"ling with al":[2511],"ing with alp":[2511],"ng with alph":[2511],"g with alpha":[2511]," with alpha ":[2511],"with alpha b":[2511],"ith alpha bl":[2511],"th alpha ble":[2511],"h alpha blen":[2511],"nded meshes!":[2511],"- use render":[2512],"ing groups t":[2512],"ng groups to":[2512],"g groups to ":[2512]," groups to h":[2512],"groups to ha":[2512],"roups to hav":[2512],"oups to have":[2512],"ups to have ":[2512],"ps to have b":[2512],"s to have be":[2512]," to have bet":[2512],"to have bett":[2512],"o have bette":[2512]," have better":[2512],"have better ":[2512],"ave better c":[2512],"ve better co":[2512],"e better con":[2512]," better cont":[2512],"better contr":[2512],"etter contro":[2512],"tter control":[2512],"ter control ":[2512],"er control o":[2512],"r control ov":[2512]," control ove":[2512],"control over":[2512],"ontrol over ":[2512],"ntrol over t":[2512],"trol over th":[2512],"rol over the":[2512],"ol over the ":[2512],"l over the o":[2512]," over the or":[2512],"over the ord":[2512],"ver the orde":[2512],"er the order":[2512],"r the order ":[2512],"r in which y":[2512],"n which your":[2512]," which your ":[2512],"which your m":[2512],"hich your me":[2512],"ich your mes":[2512],"ch your mesh":[2512],"h your meshe":[2512],"meshes are d":[2512],"eshes are di":[2512],"shes are dis":[2512],"hes are disp":[2512],"es are displ":[2512],"s are displa":[2512]," are display":[2512],"are displaye":[2512],"re displayed":[2512],"e displayed.":[2512]," displayed. ":[2512],"displayed. t":[2512],"isplayed. th":[2512],"splayed. the":[2512],"played. thes":[2512],"layed. these":[2512],"ayed. these ":[2512],"yed. these a":[2512],"ed. these ar":[2512],"d. these are":[2512],". these are ":[2512]," these are e":[2512],"these are es":[2512],"hese are esp":[2512],"ese are espe":[2512],"se are espec":[2512],"e are especi":[2512]," are especia":[2512],"are especial":[2512],"re especiall":[2512],"e especially":[2512]," especially ":[2512],"especially u":[2512],"specially us":[2512],"pecially use":[2512],"ecially usef":[2512],"cially usefu":[2512],"ially useful":[2512],"ally useful ":[2512],"lly useful i":[2512],"ly useful if":[2512],"y useful if ":[2512]," useful if y":[2512],"useful if yo":[2512],"seful if you":[2512],"eful if you ":[2512],"ful if you k":[2512],"ul if you kn":[2512],"l if you kno":[2512]," if you know":[2512],"if you know ":[2512],"f you know t":[2512]," know that s":[2512],"know that so":[2512],"now that som":[2512],"ow that some":[2512],"w that some ":[2512]," that some m":[2512],"that some me":[2512],"hat some mes":[2512],"at some mesh":[2512],"t some meshe":[2512]," some meshes":[2512],"some meshes ":[2512],"ome meshes w":[2512],"me meshes wi":[2512],"e meshes wil":[2512],"es will be a":[2512]," will be abo":[2512],"will be abov":[2512],"ill be above":[2512],"ll be above ":[2512],"l be above o":[2512]," be above ot":[2512],"be above oth":[2512],"e above othe":[2512]," above other":[2512],"above others":[2512],"bove others ":[2512],"ove others 1":[2512],"ve others 10":[2512],"e others 100":[2512]," others 100%":[2512],"others 100% ":[2512],"thers 100% o":[2512],"hers 100% of":[2512],"ers 100% of ":[2512],"rs 100% of t":[2512],"s 100% of th":[2512]," 100% of the":[2512],"100% of the ":[2512],"00% of the t":[2512],"0% of the ti":[2512],"% of the tim":[2512],"f the time (":[2512]," the time (f":[2512],"the time (fo":[2512],"he time (for":[2512],"e time (for ":[2512]," time (for e":[2512],"time (for ex":[2512],"ime (for exa":[2512],"me (for exam":[2512],"e (for examp":[2512]," example, an":[2512],"example, an ":[2512],"xample, an o":[2512],"ample, an ov":[2512],"mple, an ove":[2512],"ple, an over":[2512],"le, an overl":[2512],"e, an overla":[2512],", an overlay":[2512]," an overlaye":[2512],"an overlayed":[2512],"n overlayed ":[2512]," overlayed u":[2512],"overlayed ui":[2512],"verlayed ui ":[2512],"erlayed ui d":[2512],"rlayed ui dr":[2512],"layed ui dra":[2512],"ayed ui draw":[2512],"yed ui drawn":[2512],"ed ui drawn ":[2512],"d ui drawn o":[2512]," ui drawn on":[2512],"ui drawn on ":[2512],"i drawn on t":[2512]," drawn on to":[2512],"drawn on top":[2512],"rawn on top ":[2512],"awn on top o":[2512],"wn on top of":[2512],"n on top of ":[2512],"top of the s":[2512],"op of the sc":[2512],"p of the sce":[2512],"f the scene)":[2512]," the scene).":[2512],"- a mesh's a":[2513]," a mesh's al":[2513],"a mesh's alp":[2513]," mesh's alph":[2513],"mesh's alpha":[2513],"esh's alphai":[2513],"sh's alphain":[2513],"h's alphaind":[2513],"'s alphainde":[2513],"s alphaindex":[2513]," alphaindex ":[2513],"alphaindex p":[2513],"lphaindex pr":[2513],"phaindex pro":[2513],"haindex prop":[2513],"aindex prope":[2513],"index proper":[2513],"ndex propert":[2513],"dex property":[2513],"ex property ":[2513],"x property c":[2513],"rty can be v":[2513],"ty can be ve":[2513],"y can be ver":[2513]," can be very":[2513],"can be very ":[2513],"an be very u":[2513],"n be very us":[2513]," be very use":[2513],"be very usef":[2513],"e very usefu":[2513]," very useful":[2513],"very useful ":[2513],"ery useful a":[2513],"ry useful as":[2513],"y useful as ":[2513]," useful as w":[2513],"useful as we":[2513],"seful as wel":[2513],"eful as well":[2513],"ful as well,":[2513],"ul as well, ":[2513],"l as well, s":[2513],", since they":[2513]," since they ":[2513],"since they a":[2513],"ince they al":[2513],"nce they all":[2513],"ce they allo":[2513],"e they allow":[2513]," they allow ":[2513],"they allow y":[2513],"hey allow yo":[2513],"ey allow you":[2513],"y allow you ":[2513],"low you to o":[2513],"ow you to ov":[2513],"w you to ove":[2513],"override the":[2513],"verride the ":[2513],"erride the d":[2513],"rride the de":[2513],"ride the dep":[2513],"ide the dept":[2513],"de the depth":[2513]," the depth s":[2513],"the depth so":[2513],"he depth sor":[2513],"e depth sort":[2513],"pth sorting ":[2513],"th sorting o":[2513],"h sorting of":[2513]," sorting of ":[2513],"sorting of a":[2513],"orting of al":[2513],"rting of alp":[2513],"ting of alph":[2513],"ing of alpha":[2513],"ng of alpha-":[2513],"g of alpha-b":[2513],"ed meshes. a":[2513],"d meshes. al":[2513]," meshes. als":[2513],"meshes. also":[2513],"eshes. also ":[2513],"shes. also t":[2513],"hes. also th":[2513],"es. also thi":[2513],"s. also this":[2513],". also this ":[2513]," also this p":[2513],"also this pr":[2513],"lso this pro":[2513],"so this prop":[2513],"o this prope":[2513],"s property d":[2513]," property do":[2513],"property doe":[2513],"roperty does":[2513],"operty does ":[2513],"perty does n":[2513],"erty does no":[2513],"rty does not":[2513],"ty does not ":[2513],"y does not s":[2513],"does not suf":[2513],"oes not suff":[2513],"es not suffe":[2513],"s not suffer":[2513]," not suffer ":[2513],"not suffer f":[2513],"ot suffer fr":[2513],"t suffer fro":[2513]," suffer from":[2513],"suffer from ":[2513],"uffer from t":[2513],"ffer from th":[2513],"fer from the":[2513],"er from the ":[2513],"r from the s":[2513]," from the sa":[2513],"from the sam":[2513],"rom the same":[2513],"om the same ":[2513],"m the same l":[2513]," the same li":[2513],"the same lim":[2513],"he same limi":[2513],"e same limit":[2513]," same limita":[2513],"same limitat":[2513],"ame limitati":[2513],"me limitatio":[2513],"e limitation":[2513]," limitation ":[2513],"limitation a":[2513],"imitation as":[2513],"mitation as ":[2513],"itation as r":[2513],"tation as re":[2513],"ation as ren":[2513],"tion as rend":[2513],"ion as rende":[2513],"on as render":[2513],"n as renderi":[2513]," as renderin":[2513],"as rendering":[2513],"ing groups (":[2513],"ng groups (4":[2513],"g groups (4 ":[2513]," groups (4 l":[2513],"groups (4 la":[2513],"roups (4 lay":[2513],"oups (4 laye":[2513],"ups (4 layer":[2513],"ps (4 layers":[2513],"s (4 layers ":[2513]," (4 layers a":[2513],"(4 layers at":[2513],"4 layers at ":[2513]," layers at m":[2513],"layers at mo":[2513],"ayers at mos":[2513],"yers at most":[2513],"ers at most)":[2513],"rs at most),":[2513],"s at most), ":[2513]," at most), a":[2513],"at most), an":[2513],"t most), and":[2513]," most), and ":[2513],"most), and o":[2513],"ost), and on":[2513],"st), and onl":[2513],"t), and only":[2513],"), and only ":[2513],", and only h":[2513]," and only ha":[2513],"and only has":[2513],"nd only has ":[2513],"d only has a":[2513]," only has an":[2513],"only has an ":[2513],"nly has an e":[2513],"ly has an ef":[2513],"y has an eff":[2513]," has an effe":[2513],"has an effec":[2513],"as an effect":[2513],"s an effect ":[2513]," an effect o":[2513],"an effect on":[2513],"n effect on ":[2513],"effect on al":[2513],"ffect on alp":[2513],"fect on alph":[2513],"ect on alpha":[2513],"ct on alpha-":[2513],"t on alpha-b":[2513]," on alpha-bl":[2513],"on alpha-ble":[2513],"n alpha-blen":[2513],"l free to te":[2514]," free to tes":[2514],"free to test":[2514],"ree to test ":[2514],"ee to test i":[2514],"e to test it":[2514]," to test it ":[2514],"to test it o":[2514],"o test it on":[2514]," test it on ":[2514],"test it on t":[2514],"est it on th":[2514],"st it on the":[2514],"t it on the ":[2514]," it on the [":[2514],"it on the [p":[2514],"t on the [pl":[2514]," on the [pla":[2514],"on the [play":[2514],"n the [playg":[2514]," the [playgr":[2514],"the [playgro":[2514],"he [playgrou":[2514],"e [playgroun":[2514],"[playground]":[2514],"ound.com/#1i":[2514],"und.com/#1ig":[2514],"nd.com/#1ig8":[2514],"d.com/#1ig87":[2514],".com/#1ig874":[2514],"com/#1ig874)":[2514],"finally, the":[2515],"inally, thes":[2515],"nally, these":[2515],"ally, these ":[2515],"lly, these e":[2515],"ly, these ef":[2515],"y, these eff":[2515],", these effe":[2515]," these effec":[2515],"se effects c":[2515],"e effects ca":[2515]," effects can":[2515],"effects can ":[2515],"ffects can b":[2515],"fects can be":[2515],"cts can be p":[2515],"ts can be pr":[2515],"s can be pre":[2515]," can be pret":[2515],"can be prett":[2515],"an be pretty":[2515],"n be pretty ":[2515]," be pretty i":[2515],"be pretty in":[2515],"e pretty int":[2515]," pretty inte":[2515],"pretty inten":[2515],"retty intens":[2515],"etty intensi":[2515],"tty intensiv":[2515],"ty intensive":[2515],"y intensive ":[2515]," intensive o":[2515],"intensive on":[2515],"ntensive on ":[2515],"tensive on t":[2515],"ensive on th":[2515],"nsive on the":[2515],"sive on the ":[2515],"ive on the g":[2515],"ve on the gp":[2515],"e on the gpu":[2515]," on the gpu.":[2515],"on the gpu. ":[2515],"n the gpu. a":[2515]," the gpu. a ":[2515],"the gpu. a l":[2515],"he gpu. a lo":[2515],"e gpu. a low":[2515]," gpu. a lowe":[2515],"gpu. a lower":[2515],"pu. a lower ":[2515],"u. a lower b":[2515],". a lower bl":[2515]," a lower blu":[2515],"a lower blur":[2515]," lower blur ":[2515],"lower blur e":[2515],"ower blur ef":[2515],"wer blur eff":[2515],"er blur effe":[2515],"r blur effec":[2515],"lur effect (":[2515],"ur effect (i":[2515],"r effect (i.":[2515]," effect (i.e":[2515],"effect (i.e.":[2515],"ffect (i.e. ":[2515],"fect (i.e. s":[2515],"ect (i.e. sm":[2515],"ct (i.e. sma":[2515],"t (i.e. smal":[2515]," (i.e. small":[2515],"(i.e. smalle":[2515],"i.e. smaller":[2515],".e. smaller ":[2515],"e. smaller b":[2515],". smaller bl":[2515]," smaller blu":[2515],"smaller blur":[2515],"maller blur ":[2515],"aller blur r":[2515],"ller blur ra":[2515],"ler blur rad":[2515],"er blur radi":[2515],"r blur radiu":[2515]," blur radius":[2515],"blur radius)":[2515],"lur radius) ":[2515],"ur radius) w":[2515],"r radius) wi":[2515]," radius) wil":[2515],"radius) will":[2515],"adius) will ":[2515],"dius) will b":[2515],"ius) will be":[2515],"us) will be ":[2515],"s) will be l":[2515],") will be le":[2515]," will be les":[2515],"will be less":[2515],"ill be less ":[2515],"ll be less d":[2515],"l be less de":[2515]," be less dem":[2515],"be less dema":[2515],"e less deman":[2515]," less demand":[2515],"less demandi":[2515],"ess demandin":[2515],"ss demanding":[2515],"s demanding,":[2515]," demanding, ":[2515],"demanding, s":[2515],"emanding, so":[2515],"manding, so ":[2515],"anding, so y":[2515],"nding, so yo":[2515],"ding, so you":[2515],"ing, so you ":[2515],"ng, so you c":[2515],"g, so you ca":[2515],", so you can":[2515]," so you can ":[2515],"so you can t":[2515],"o you can tr":[2515],"u can try to":[2515]," can try to ":[2515],"can try to l":[2515],"an try to lo":[2515],"n try to low":[2515]," try to lowe":[2515],"try to lower":[2515],"ry to lower ":[2515],"y to lower a":[2515]," to lower ap":[2515],"to lower ape":[2515],"o lower aper":[2515]," lower apert":[2515],"lower apertu":[2515],"ower apertur":[2515],"wer aperture":[2515],"er aperture ":[2515],"r aperture i":[2515],"aperture ins":[2515],"perture inst":[2515],"erture inste":[2515],"rture instea":[2515],"ture instead":[2515],"ure instead ":[2515],"re instead o":[2515,2538],"e instead of":[2515,2538],"instead of d":[2515],"nstead of di":[2515],"stead of dis":[2515],"tead of disa":[2515],"ead of disab":[2515],"ad of disabl":[2515],"d of disabli":[2515]," of disablin":[2515],"of disabling":[2515],"f disabling ":[2515]," disabling i":[2515],"disabling it":[2515],"isabling it ":[2515],"sabling it a":[2515],"abling it al":[2515],"bling it alt":[2515],"ling it alto":[2515],"ing it altog":[2515],"ng it altoge":[2515],"g it altoget":[2515]," it altogeth":[2515],"it altogethe":[2515],"t altogether":[2515]," altogether.":[2515],"altogether. ":[2515],"ltogether. h":[2515],"together. hi":[2515],"ogether. hig":[2515],"gether. high":[2515],"ether. highl":[2515],"ther. highli":[2515],"her. highlig":[2515],"er. highligh":[2515],"r. highlight":[2515],". highlight ":[2515]," highlight e":[2515],"highlight en":[2515],"ighlight enh":[2515],"ghlight enha":[2515],"hlight enhan":[2515],"light enhanc":[2515],"ight enhanci":[2515],"ght enhancin":[2515],"ht enhancing":[2515],"t enhancing ":[2515]," enhancing i":[2515],"enhancing is":[2515],"nhancing is ":[2515],"hancing is a":[2515],"ancing is al":[2515],"ncing is als":[2515],"cing is also":[2515],"ing is also ":[2515],"ng is also q":[2515],"g is also qu":[2515]," is also qui":[2515],"is also quit":[2515],"s also quite":[2515]," also quite ":[2515],"also quite i":[2515],"lso quite in":[2515],"so quite int":[2515],"o quite inte":[2515]," quite inten":[2515],"quite intens":[2515],"uite intensi":[2515],"ite intensiv":[2515],"te intensive":[2515],"e intensive,":[2515]," intensive, ":[2515],"intensive, s":[2515],"ntensive, so":[2515],"tensive, so ":[2515],"ensive, so b":[2515],"nsive, so be":[2515],"sive, so be ":[2515],"ive, so be s":[2515],"ve, so be su":[2515],"e, so be sur":[2515],", so be sure":[2515]," so be sure ":[2515],"so be sure t":[2515],"o be sure th":[2515]," sure that t":[2515],"sure that th":[2515],"ure that thi":[2515],"re that this":[2515],"e that this ":[2515]," that this e":[2515],"that this ef":[2515],"hat this eff":[2515],"at this effe":[2515],"t this effec":[2515],"his effect c":[2515],"is effect co":[2515],"s effect con":[2515]," effect cont":[2515],"effect contr":[2515],"ffect contri":[2515],"fect contrib":[2515],"ect contribu":[2515],"ct contribut":[2515],"t contribute":[2515],"contribute t":[2515],"ontribute to":[2515],"ntribute to ":[2515],"tribute to t":[2515],"ribute to th":[2515],"ibute to the":[2515],"bute to the ":[2515],"ute to the q":[2515],"te to the qu":[2515],"e to the qua":[2515]," to the qual":[2515],"to the quali":[2515],"o the qualit":[2515],"quality of y":[2515],"uality of yo":[2515],"ality of you":[2515],"lity of your":[2515],"ity of your ":[2515],"ty of your r":[2515],"y of your re":[2515]," of your ren":[2515],"of your rend":[2515],"f your rende":[2515]," your render":[2515],"your render ":[2515],"our render i":[2515],"ur render if":[2515],"r render if ":[2515]," render if y":[2515],"render if yo":[2515],"ender if you":[2515],"nder if you ":[2515],"der if you h":[2515],"er if you ha":[2515],"r if you hav":[2515],"f you have i":[2515]," you have it":[2515],"you have it ":[2515],"ou have it a":[2515],"u have it ac":[2515]," have it act":[2515],"have it acti":[2515],"ave it activ":[2515],"ve it active":[2515],"e it active.":[2515],"tepath(path,":[2517],"epath(path, ":[2517],"path(path, k":[2517],"ath(path, k)":[2517],"th(path, k);":[2517],"  mesh = cre":[2518]," createxxx(n":[2518],"createxxx(nu":[2518],"reatexxx(nul":[2518],"eatexxx(null":[2518],"atexxx(null,":[2518],"texxx(null, ":[2518],"exxx(null, p":[2518],"xxx(null, pa":[2518],"xx(null, pat":[2518],"x(null, path":[2518],"ull, path, n":[2518],"ll, path, nu":[2518],"l, path, nul":[2518],", path, null":[2518]," path, null,":[2518],"path, null, ":[2518],"ath, null, .":[2518],"th, null, ..":[2518],"h, null, ...":[2518],", null, ...,":[2518]," null, ..., ":[2518],"null, ..., n":[2518],"ull, ..., nu":[2518],"ll, ..., nul":[2518],"l, ..., null":[2518],", ..., null,":[2518]," ..., null, ":[2518],"..., null, m":[2518],".., null, me":[2518],"., null, mes":[2518],"ayground/?17":[2521],"playground/#":[2522],"layground/#2":[2522],"ayground/#21":[2522],"yground/#21e":[2522],"ground/#21ew":[2522],"round/#21ewa":[2522],"ound/#21ewa7":[2522],"## using a s":[2523],"# using a sh":[2523]," using a sha":[2523],"using a shad":[2523],"sing a shade":[2523],"ing a shader":[2523],"ng a shaders":[2523],"g a shaderst":[2523],"haderstore f":[2523],"aderstore fo":[2523],"derstore for":[2523],"erstore for ":[2523],"rstore for s":[2523],"store for sh":[2523],"tore for sha":[2523],"ore for shad":[2523],"re for shade":[2523],"e for shader":[2523]," for shader ":[2523,2542],"for shader s":[2523,2542],"or shader st":[2523,2542],"r shader sto":[2523,2542]," shader stor":[2523,2542],"shader stora":[2523,2542],"hader storag":[2523,2542],"ader storage":[2523,2542],"der storage ":[2523,2542],"er storage #":[2523,2542],"r storage ##":[2523,2542]," storage ###":[2523,2542],"so use the s":[2524],"o use the sh":[2524]," use the sha":[2524],"use the shad":[2524],"se the shade":[2524],"e the shader":[2524]," the shaders":[2524],"the shaderst":[2524],"he shadersto":[2524],"e shaderstor":[2524],"haderstore t":[2524],"aderstore to":[2524],"derstore to ":[2524],"erstore to w":[2524],"rstore to wr":[2524],"store to wri":[2524],"tore to writ":[2524],"ore to write":[2524],"re to write ":[2524],"e to write a":[2524],"to write a s":[2524],"o write a sh":[2524]," write a sha":[2524],"write a shad":[2524],"rite a shade":[2524],"ite a shader":[2524],"te a shader ":[2524],"e a shader i":[2524]," a shader in":[2524],"a shader inl":[2524]," shader inli":[2524],"shader inlin":[2524],"hader inline":[2524],"ader inline ":[2524],"der inline a":[2524],"er inline an":[2524],"r inline and":[2524]," inline and ":[2524],"inline and u":[2524],"nline and us":[2524],"line and use":[2524],"ine and use ":[2524],"ne and use i":[2524],"and use it i":[2524],"nd use it in":[2524],"d use it in ":[2524]," use it in a":[2524],"use it in a ":[2524],"se it in a c":[2524],"e it in a cu":[2524]," it in a cus":[2524],"it in a cust":[2524],"t in a custo":[2524]," in a custom":[2524],"in a customp":[2524],"n a custompr":[2524]," a custompro":[2524,2538],"a customproc":[2524,2538]," customproce":[2524,2538,2560],"uraltexture.":[2524],"an be done e":[2525],"n be done ea":[2525]," be done eas":[2525],"be done easi":[2525],"e done easil":[2525]," done easily":[2525],"done easily ":[2525],"one easily u":[2525],"ne easily us":[2525],"e easily usi":[2525]," easily usin":[2525],"easily using":[2525],"asily using ":[2525],"sily using t":[2525],"ily using th":[2525],"y using the ":[2525]," using the *":[2525],"using the **":[2525],"sing the **b":[2525],"ing the **ba":[2525],"ng the **bab":[2525],"g the **baby":[2525]," the **babyl":[2525],"the **babylo":[2525],"he **babylon":[2525],"e **babylon.":[2525]," **babylon.e":[2525],"**babylon.ef":[2525],"*babylon.eff":[2525],"babylon.effe":[2525,2527],"abylon.effec":[2525,2527],"bylon.effect":[2525,2527],"ylon.effect.":[2525,2527],"lon.effect.s":[2525,2527],"on.effect.sh":[2525,2527],"n.effect.sha":[2525,2527],".effect.shad":[2525,2527],"effect.shade":[2525,2527],"ffect.shader":[2525,2527],"fect.shaders":[2525,2527],"ect.shaderst":[2525],"ct.shadersto":[2525],"t.shaderstor":[2525],".shaderstore":[2525],"shaderstore*":[2525],"haderstore**":[2525],"aderstore** ":[2525],"derstore** a":[2525],"erstore** ar":[2525],"rstore** arr":[2525],"store** arra":[2525],"tore** array":[2525],"ore** array ":[2525],"re** array :":[2525],"e** array : ":[2525],"ect.shaderss":[2527],"ct.shadersst":[2527],"t.shaderssto":[2527],".shadersstor":[2527],"shadersstore":[2527],"hadersstore[":[2527],"adersstore[\"":[2527],"dersstore[\"l":[2527],"ersstore[\"li":[2527],"rsstore[\"lin":[2527],"sstore[\"line":[2527],"store[\"lines":[2527],"tore[\"linesp":[2527],"ore[\"linespi":[2527],"re[\"linespix":[2527],"e[\"linespixe":[2527],"[\"linespixel":[2527],"\"linespixels":[2527,2545],"linespixelsh":[2527,2545,2557],"inespixelsha":[2527,2545,2557],"nespixelshad":[2527,2545,2557],"espixelshade":[2527,2545,2557],"spixelshader":[2527,2545,2557],"pixelshader\"":[2527,2545],"ixelshader\"]":[2527],"xelshader\"] ":[2527],"elshader\"] =":[2527],"       \"#ifd":[2528],"      \"#ifde":[2528],"     \"#ifdef":[2528],"    \"#ifdef ":[2528],"   \"#ifdef g":[2528],"  \"#ifdef gl":[2528]," \"#ifdef gl_":[2528],"\"#ifdef gl_e":[2528],"ifdef gl_es\\":[2528],"fdef gl_es\\n":[2528],"def gl_es\\n\"":[2528],"ef gl_es\\n\" ":[2528],"f gl_es\\n\" +":[2528],"       \"prec":[2529],"      \"preci":[2529],"     \"precis":[2529],"    \"precisi":[2529],"   \"precisio":[2529],"  \"precision":[2529]," \"precision ":[2529],"\"precision h":[2529],"ighp float;\\":[2529],"ghp float;\\n":[2529],"hp float;\\n\"":[2529],"p float;\\n\" ":[2529]," float;\\n\" +":[2529],"       \"#end":[2530],"      \"#endi":[2530],"     \"#endif":[2530],"    \"#endif\\":[2530],"   \"#endif\\n":[2530],"  \"#endif\\n\\":[2530]," \"#endif\\n\\n":[2530],"\"#endif\\n\\n\"":[2530],"#endif\\n\\n\" ":[2530],"endif\\n\\n\" +":[2530],"       \"vary":[2531],"      \"varyi":[2531],"     \"varyin":[2531],"    \"varying":[2531],"   \"varying ":[2531],"  \"varying v":[2531]," \"varying ve":[2531],"\"varying vec":[2531],"g vec2 vuv; ":[2531,2549]," vec2 vuv; \\":[2531],"vec2 vuv; \\n":[2531],"ec2 vuv; \\n\"":[2531],"c2 vuv; \\n\" ":[2531],"2 vuv; \\n\" +":[2531],"       \"void":[2532],"      \"void ":[2532],"     \"void m":[2532],"    \"void ma":[2532],"   \"void mai":[2532],"  \"void main":[2532]," \"void main(":[2532],"\"void main(v":[2532],"ain(void) {\\":[2532],"in(void) {\\n":[2532],"n(void) {\\n\"":[2532],"(void) {\\n\" ":[2532],"void) {\\n\" +":[2532],"       \" gl_":[2533],"      \" gl_f":[2533],"     \" gl_fr":[2533],"    \" gl_fra":[2533],"   \" gl_frag":[2533],"  \" gl_fragc":[2533]," \" gl_fragco":[2533],"\" gl_fragcol":[2533],"lor = vec4(v":[2533,2551],"or = vec4(vu":[2533,2551],"r = vec4(vuv":[2533,2551]," = vec4(vuv.":[2533,2551],"= vec4(vuv.x":[2533,2551]," vec4(vuv.x,":[2533,2551],"vec4(vuv.x,v":[2533,2551],"ec4(vuv.x,vu":[2533,2551],"c4(vuv.x,vuv":[2533,2551],"4(vuv.x,vuv.":[2533,2551],"(vuv.x,vuv.y":[2533,2551],"vuv.x,vuv.y,":[2533,2551],"uv.x,vuv.y,-":[2533,2551],"v.x,vuv.y,-v":[2533,2551],".x,vuv.y,-vu":[2533,2551],"x,vuv.y,-vuv":[2533,2551],",vuv.y,-vuv.":[2533,2551],"vuv.y,-vuv.x":[2533,2551],"uv.y,-vuv.x,":[2533,2551],"v.y,-vuv.x, ":[2533,2551],".y,-vuv.x, 1":[2533,2551],"y,-vuv.x, 1.":[2533,2551],",-vuv.x, 1.0":[2533,2551],"-vuv.x, 1.0)":[2533,2551],"vuv.x, 1.0);":[2533,2551],"uv.x, 1.0);\\":[2533],"v.x, 1.0);\\n":[2533],".x, 1.0);\\n\"":[2533],"x, 1.0);\\n\" ":[2533],", 1.0);\\n\" +":[2533],"       \"}\\n\"":[2534],"      \"}\\n\" ":[2534],"     \"}\\n\" +":[2534],"te that your":[2537]," that your s":[2537],"that your sh":[2537],"hat your sha":[2537],"at your shad":[2537],"t your shade":[2537]," your shader":[2537,2538,2543],"our shader n":[2537],"ur shader na":[2537],"r shader nam":[2537]," shader name":[2537],"shader name ":[2537],"hader name s":[2537],"ader name sh":[2537],"der name sho":[2537],"er name shou":[2537],"r name shoul":[2537]," name should":[2537],"name should ":[2537],"ame should b":[2537],"me should be":[2537],"should be su":[2537],"hould be suf":[2537],"ould be suff":[2537],"uld be suffi":[2537],"ld be suffix":[2537],"d be suffixe":[2537]," be suffixed":[2537],"be suffixed ":[2537],"e suffixed w":[2537]," suffixed wi":[2537],"suffixed wit":[2537],"uffixed with":[2537],"ffixed with ":[2537],"fixed with *":[2537],"ixed with **":[2537],"xed with **p":[2537],"ed with **pi":[2537],"d with **pix":[2537]," with **pixe":[2537],"with **pixel":[2537],"ith **pixels":[2537],"th **pixelsh":[2537],"h **pixelsha":[2537]," **pixelshad":[2537],"**pixelshade":[2537],"*pixelshader":[2537],"pixelshader*":[2537],"ixelshader**":[2537],"xelshader** ":[2537],"elshader** a":[2537],"lshader** as":[2537],"shader** as ":[2537],"hader** as t":[2537],"ader** as th":[2537],"der** as the":[2537],"er** as the ":[2537],"r** as the p":[2537],"** as the pr":[2537],"* as the pro":[2537]," as the proc":[2537],"as the proce":[2537],"s the proced":[2537]," the procedu":[2537],"the procedur":[2537],"he procedura":[2537],"al texture s":[2537],"l texture sh":[2537]," texture sha":[2537],"texture shad":[2537],"exture shade":[2537],"xture shader":[2537],"ture shader ":[2537],"ure shader i":[2537],"re shader is":[2537],"e shader is ":[2537]," shader is a":[2537],"shader is al":[2537],"hader is alw":[2537],"ader is alwa":[2537],"der is alway":[2537],"er is always":[2537],"r is always ":[2537]," is always a":[2537],"is always a ":[2537],"s always a p":[2537]," always a pi":[2537],"always a pix":[2537],"lways a pixe":[2537],"ways a pixel":[2537],"ays a pixel ":[2537],"ys a pixel s":[2537],"s a pixel sh":[2537]," a pixel sha":[2537],"a pixel shad":[2537]," pixel shade":[2537],"pixel shader":[2537],"ixel shader.":[2537],"xel shader. ":[2537],"el shader. b":[2537],"l shader. ba":[2537]," shader. bab":[2537],"shader. baby":[2537],"hader. babyl":[2537],"ader. babylo":[2537],"der. babylon":[2537],"er. babylon.":[2537],"r. babylon.j":[2537],"omatically u":[2537],"matically un":[2537],"atically und":[2537],"tically unde":[2537],"ically under":[2537],"cally unders":[2537],"ally underst":[2537],"lly understa":[2537],"ly understan":[2537],"y understand":[2537],"nderstand it":[2537],"derstand it ":[2537],"erstand it i":[2537],"rstand it is":[2537],"stand it is ":[2537],"tand it is a":[2537],"and it is a ":[2537],"nd it is a p":[2537],"d it is a pi":[2537]," it is a pix":[2537],"it is a pixe":[2537],"t is a pixel":[2537]," is a pixel ":[2537],"is a pixel s":[2537],"o use this s":[2538]," use this sh":[2538],"use this sha":[2538],"se this shad":[2538],"e this shade":[2538]," this shader":[2538],"this shader,":[2538],"his shader, ":[2538],"is shader, y":[2538],"s shader, yo":[2538]," shader, you":[2538],"shader, you ":[2538],"hader, you j":[2538],"ader, you ju":[2538],"der, you jus":[2538],"er, you just":[2538],"r, you just ":[2538],"t have to cr":[2538,2543,2555]," have to cre":[2538,2543,2555],"have to crea":[2538,2543,2555],"ave to creat":[2538,2543,2555],"ve to create":[2538,2543,2555]," create a cu":[2538],"create a cus":[2538],"reate a cust":[2538],"eate a custo":[2538],"ate a custom":[2538],"te a customp":[2538],"e a custompr":[2538],"raltexture a":[2538],"altexture an":[2538],"ltexture and":[2538],"exture and p":[2538],"xture and pu":[2538],"ture and put":[2538],"ure and put ":[2538],"re and put t":[2538],"e and put th":[2538]," and put the":[2538],"and put the ":[2538],"nd put the n":[2538],"d put the na":[2538]," put the nam":[2538],"put the name":[2538],"ut the name ":[2538],"t the name o":[2538],"he name of y":[2538],"e name of yo":[2538]," name of you":[2538],"name of your":[2538],"ame of your ":[2538],"me of your s":[2538],"e of your sh":[2538]," of your sha":[2538],"of your shad":[2538],"f your shade":[2538],"our shader i":[2538],"ur shader in":[2538],"r shader in ":[2538]," shader in t":[2538],"shader in th":[2538],"hader in the":[2538],"ader in the ":[2538],"der in the s":[2538],"er in the st":[2538],"r in the sto":[2538]," in the stor":[2538],"in the store":[2538],"n the store ":[2538]," the store i":[2538],"the store in":[2538],"he store ins":[2538],"e store inst":[2538]," store inste":[2538],"store instea":[2538],"tore instead":[2538],"ore instead ":[2538],"instead of t":[2538],"nstead of th":[2538],"stead of the":[2538],"tead of the ":[2538],"ead of the p":[2538],"ad of the pa":[2538],"d of the pat":[2538]," of the path":[2538],"of the path ":[2538],"f the path t":[2538],"th to the fi":[2538],"h to the fil":[2538]," to the file":[2538],"to the files":[2538],"o the files.":[2538],"var custompr":[2540,2558],"ar custompro":[2540,2558],"r customproc":[2540,2558]," customproct":[2540,2558],"customprocte":[2540,2558],"ustomproctex":[2540,2558],"stomproctext":[2540,2558],"tomproctext ":[2540,2558],"omproctext =":[2540,2558],"mproctext = ":[2540,2558],"proctext = n":[2540,2558],"roctext = ne":[2540,2558],"octext = new":[2540,2558],"ctext = new ":[2540,2558],"text = new b":[2540,2558],"ext = new ba":[2540,2558],"xt = new bab":[2540,2558],"altexture(\"c":[2540,2558],"ltexture(\"cu":[2540,2558],"texture(\"cus":[2540,2558],"exture(\"cust":[2540,2558],"xture(\"custo":[2540,2558],"ture(\"custom":[2540,2558],"ure(\"customt":[2540,2558],"re(\"customte":[2540,2558],"e(\"customtex":[2540,2558],"(\"customtext":[2540,2558],"\"customtext\"":[2540,2558],"customtext\",":[2540,2558],"ustomtext\", ":[2540,2558],"stomtext\", \"":[2540],"tomtext\", \"l":[2540],"omtext\", \"li":[2540],"mtext\", \"lin":[2540],"text\", \"line":[2540],"ext\", \"lines":[2540],"xt\", \"lines\"":[2540],"t\", \"lines\",":[2540],"\", \"lines\", ":[2540],", \"lines\", 1":[2540]," \"lines\", 10":[2540],"\"lines\", 102":[2540],"lines\", 1024":[2540],"ines\", 1024,":[2540],"nes\", 1024, ":[2540],"es\", 1024, s":[2540],"s\", 1024, sc":[2540],"## using a d":[2542],"# using a do":[2542]," using a dom":[2542],"using a dom ":[2542],"sing a dom e":[2542],"ing a dom el":[2542],"ng a dom ele":[2542],"g a dom elem":[2542]," a dom eleme":[2542],"a dom elemen":[2542]," dom element":[2542,2555,2560],"dom element ":[2542,2560],"om element f":[2542],"m element fo":[2542]," element for":[2542],"element for ":[2542],"lement for s":[2542],"ement for sh":[2542],"ment for sha":[2542],"ent for shad":[2542],"nt for shade":[2542],"t for shader":[2542],"finally you ":[2543],"inally you c":[2543],"nally you ca":[2543],"ally you can":[2543],"lly you can ":[2543],"ly you can a":[2543],"y you can al":[2543],"n also use *":[2543]," also use **":[2543],"also use **d":[2543],"lso use **do":[2543],"so use **dom":[2543],"o use **dom ":[2543]," use **dom e":[2543],"use **dom el":[2543],"se **dom ele":[2543],"e **dom elem":[2543]," **dom eleme":[2543],"**dom elemen":[2543],"*dom element":[2543],"dom elements":[2543],"om elements*":[2543],"m elements**":[2543]," elements** ":[2543],"elements** t":[2543],"lements** to":[2543],"ements** to ":[2543],"ments** to s":[2543],"ents** to st":[2543],"nts** to sto":[2543],"ts** to stor":[2543],"s** to store":[2543],"** to store ":[2543],"* to store y":[2543]," to store yo":[2543],"to store you":[2543],"o store your":[2543]," store your ":[2543],"store your s":[2543],"tore your sh":[2543],"ore your sha":[2543],"re your shad":[2543],"e your shade":[2543],"your shader.":[2543],"our shader. ":[2543],"ur shader. y":[2543],"r shader. yo":[2543]," shader. you":[2543],"shader. you ":[2543],"hader. you j":[2543],"ader. you ju":[2543],"der. you jus":[2543],"er. you just":[2543],"r. you just ":[2543],". you just h":[2543]," create a sc":[2543],"create a scr":[2543],"reate a scri":[2543],"eate a scrip":[2543],"ate a script":[2543],"te a script ":[2543],"e a script t":[2543]," a script ta":[2543],"a script tag":[2543]," script tag ":[2543],"script tag i":[2543],"cript tag in":[2543],"ript tag in ":[2543],"ipt tag in y":[2543],"pt tag in yo":[2543],"t tag in you":[2543]," tag in your":[2543],"tag in your ":[2543],"ag in your h":[2543],"g in your ht":[2543]," in your htm":[2543],"in your html":[2543],"n your html ":[2543]," your html f":[2543],"your html fi":[2543],"our html fil":[2543],"ur html file":[2543],"r html file ":[2543]," html file l":[2543],"html file li":[2543],"tml file lik":[2543],"ml file like":[2543],"l file like ":[2543]," file like t":[2543],"file like th":[2543],"ile like thi":[2543],"le like this":[2543],"e like this:":[2543],"<script type":[2545],"script type=":[2545],"cript type=\"":[2545],"ript type=\"a":[2545],"ipt type=\"ap":[2545],"pt type=\"app":[2545],"t type=\"appl":[2545]," type=\"appli":[2545],"type=\"applic":[2545],"ype=\"applica":[2545],"pe=\"applicat":[2545],"e=\"applicati":[2545],"=\"applicatio":[2545],"\"application":[2545],"application/":[2545],"pplication/p":[2545],"plication/pi":[2545],"lication/pix":[2545],"ication/pixe":[2545],"cation/pixel":[2545],"ation/pixels":[2545],"tion/pixelsh":[2545],"ion/pixelsha":[2545],"on/pixelshad":[2545],"n/pixelshade":[2545],"/pixelshader":[2545],"ixelshader\" ":[2545],"xelshader\" i":[2545],"elshader\" id":[2545],"lshader\" id=":[2545],"shader\" id=\"":[2545],"hader\" id=\"l":[2545],"ader\" id=\"li":[2545],"der\" id=\"lin":[2545],"er\" id=\"line":[2545],"r\" id=\"lines":[2545],"\" id=\"linesp":[2545]," id=\"linespi":[2545],"id=\"linespix":[2545],"d=\"linespixe":[2545],"=\"linespixel":[2545],"ixelshader\">":[2545],"        #ifd":[2546],"       #ifde":[2546],"      #ifdef":[2546],"     #ifdef ":[2546],"        prec":[2547],"       preci":[2547],"      precis":[2547],"     precisi":[2547],"        #end":[2548],"       #endi":[2548],"      #endif":[2548],"        vary":[2549],"       varyi":[2549],"      varyin":[2549],"     varying":[2549],"        void":[2550],"       void ":[2550],"      void m":[2550],"     void ma":[2550],"           g":[2551],"          gl":[2551],"         gl_":[2551],"        gl_f":[2551],"       gl_fr":[2551],"      gl_fra":[2551],"e a simple o":[2555]," a simple ob":[2555],"a simple obj":[2555],"ple object c":[2555],"le object co":[2555],"e object con":[2555]," object cont":[2555],"object conta":[2555],"bject contai":[2555],"ject contain":[2555],"ect containi":[2555],"ct containin":[2555],"t containing":[2555],"containing o":[2555],"ontaining on":[2555],"ntaining one":[2555],"taining one ":[2555],"aining one p":[2555],"ining one pr":[2555],"ning one pro":[2555],"ing one prop":[2555],"ng one prope":[2555],"g one proper":[2555]," one propert":[2555],"one property":[2555],"ne property ":[2555],"e property w":[2555]," property wh":[2555],"property whi":[2555],"roperty whic":[2555],"operty which":[2555],"perty which ":[2555],"erty which i":[2555],"rty which is":[2555],"ty which is ":[2555],"y which is n":[2555]," which is na":[2555],"which is nam":[2555],"hich is name":[2555],"ich is named":[2555],"ch is named ":[2555],"h is named *":[2555]," is named **":[2555],"is named **f":[2555],"s named **fr":[2555]," named **fra":[2555],"named **frag":[2555],"amed **fragm":[2555],"med **fragme":[2555],"ed **fragmen":[2555],"d **fragment":[2555]," **fragmente":[2555],"**fragmentel":[2555],"*fragmentele":[2555],"fragmentelem":[2555,2557],"ragmenteleme":[2555,2557],"agmentelemen":[2555,2557],"gmentelement":[2555,2557],"mentelement*":[2555],"entelement**":[2555],"ntelement** ":[2555],"telement** a":[2555],"element** an":[2555],"lement** and":[2555],"ement** and ":[2555],"ment** and c":[2555],"ent** and co":[2555],"nt** and con":[2555],"t** and cont":[2555],"** and conta":[2555],"* and contai":[2555]," and contain":[2555],"and contains":[2555],"nd contains ":[2555],"d contains t":[2555],"ntains the i":[2555],"tains the id":[2555],"ains the id ":[2555],"ins the id i":[2555],"ns the id id":[2555],"s the id ide":[2555]," the id iden":[2555],"the id ident":[2555],"he id identi":[2555],"e id identif":[2555]," id identify":[2555],"id identifyi":[2555],"d identifyin":[2555]," identifying":[2555],"identifying ":[2555],"dentifying t":[2555],"entifying th":[2555],"ntifying the":[2555],"tifying the ":[2555],"ifying the s":[2555],"fying the sc":[2555],"ying the scr":[2555],"ing the scri":[2555],"ng the scrip":[2555],"g the script":[2555]," the script ":[2555],"the script d":[2555],"he script do":[2555],"e script dom":[2555]," script dom ":[2555],"script dom e":[2555],"cript dom el":[2555],"ript dom ele":[2555],"ipt dom elem":[2555],"pt dom eleme":[2555],"t dom elemen":[2555],"dom element.":[2555],"var linessha":[2557],"ar linesshad":[2557],"r linesshade":[2557]," linesshader":[2557,2558],"linesshader ":[2557],"inesshader =":[2557],"nesshader = ":[2557],"esshader = {":[2557],"sshader = { ":[2557],"shader = { f":[2557],"hader = { fr":[2557],"ader = { fra":[2557],"der = { frag":[2557],"er = { fragm":[2557],"r = { fragme":[2557]," = { fragmen":[2557],"= { fragment":[2557]," { fragmente":[2557],"{ fragmentel":[2557]," fragmentele":[2557],"mentelement:":[2557],"entelement: ":[2557],"ntelement: '":[2557],"telement: 'l":[2557],"element: 'li":[2557],"lement: 'lin":[2557],"ement: 'line":[2557],"ment: 'lines":[2557],"ent: 'linesp":[2557],"nt: 'linespi":[2557],"t: 'linespix":[2557],": 'linespixe":[2557]," 'linespixel":[2557],"'linespixels":[2557],"pixelshader'":[2557],"ixelshader' ":[2557],"xelshader' }":[2557],"elshader' };":[2557],"stomtext\", l":[2558],"tomtext\", li":[2558],"omtext\", lin":[2558],"mtext\", line":[2558],"text\", lines":[2558],"ext\", liness":[2558],"xt\", linessh":[2558],"t\", linessha":[2558],"\", linesshad":[2558],", linesshade":[2558],"linesshader,":[2558],"inesshader, ":[2558],"nesshader, 1":[2558],"esshader, 10":[2558],"sshader, 102":[2558],"shader, 1024":[2558],"hader, 1024,":[2558],"ader, 1024, ":[2558],"der, 1024, s":[2558],"er, 1024, sc":[2558],"r, 1024, sce":[2558],"**note :** w":[2560],"*note :** wh":[2560],"note :** whe":[2560],"ote :** when":[2560],"te :** when ":[2560],"e :** when u":[2560]," :** when us":[2560],":** when usi":[2560],"** when usin":[2560],"* when using":[2560],"when using s":[2560],"hen using sh":[2560],"en using sha":[2560],"n using shad":[2560],"ing shaderst":[2560],"ng shadersto":[2560],"g shaderstor":[2560],"haderstore o":[2560],"aderstore or":[2560],"derstore or ":[2560],"erstore or d":[2560],"rstore or do":[2560],"store or dom":[2560],"tore or dom ":[2560],"ore or dom e":[2560],"re or dom el":[2560],"e or dom ele":[2560]," or dom elem":[2560],"or dom eleme":[2560],"r dom elemen":[2560],"om element s":[2560],"m element sh":[2560]," element sha":[2560],"element shad":[2560],"lement shade":[2560],"ement shader":[2560],"ent shader f":[2560],"nt shader fo":[2560],"t shader for":[2560]," shader for ":[2560],"shader for c":[2560],"hader for cu":[2560],"ader for cus":[2560],"der for cust":[2560],"er for custo":[2560],"r for custom":[2560]," for custom ":[2560],"for custom p":[2560],"or custom pr":[2560],"r custom pro":[2560],"l textures :":[2560]," textures : ":[2560],"textures : t":[2560],"extures : th":[2560],"xtures : the":[2560],"tures : the ":[2560],"ures : the c":[2560],"res : the co":[2560],"es : the con":[2560],"s : the conf":[2560]," : the confi":[2560],": the config":[2560],"onfig.json f":[2560],"nfig.json fi":[2560],"fig.json fil":[2560],"ig.json file":[2560],"g.json file ":[2560],".json file i":[2560],"json file is":[2560],"son file is ":[2560],"on file is n":[2560],"n file is no":[2560]," file is not":[2560],"file is not ":[2560],"ile is not n":[2560],"le is not ne":[2560],"e is not nee":[2560]," is not need":[2560],"is not neede":[2560],"s not needed":[2560]," not needed ":[2560],"not needed a":[2560],"ot needed an":[2560],"t needed any":[2560]," needed anym":[2560],"needed anymo":[2560],"eeded anymor":[2560],"eded anymore":[2560],"ded anymore ":[2560],"ed anymore a":[2560],"d anymore an":[2560]," anymore and":[2560],"anymore and ":[2560],"nymore and y":[2560],"ymore and yo":[2560],"more and you":[2560],"ore and you ":[2560],"re and you c":[2560],"e and you ca":[2560]," and you can":[2560],"and you can ":[2560],"nd you can j":[2560],"d you can ju":[2560],"u can just u":[2560]," can just us":[2560],"can just use":[2560],"an just use ":[2560],"n just use s":[2560]," just use se":[2560],"just use set":[2560],"ust use setf":[2560],"st use setfl":[2560],"t use setflo":[2560]," use setfloa":[2560],"use setfloat":[2560],"se setfloat ":[2560],"e setfloat o":[2560]," setfloat or":[2560],"setfloat or ":[2560],"etfloat or s":[2560],"tfloat or se":[2560],"float or set":[2560],"loat or setv":[2560],"oat or setve":[2560],"at or setvec":[2560],"t or setvect":[2560]," or setvecto":[2560],"or setvector":[2560],"r setvector3":[2560]," setvector3 ":[2560],"setvector3 (":[2560],"etvector3 (a":[2560],"tvector3 (an":[2560],"vector3 (and":[2560],"ector3 (and ":[2560],"ctor3 (and s":[2560],"tor3 (and so":[2560],"or3 (and so ":[2560],"r3 (and so o":[2560],"3 (and so on":[2560]," (and so on)":[2560],"(and so on),":[2560],"and so on), ":[2560],"nd so on), a":[2560],"d so on), an":[2560]," so on), and":[2560],"so on), and ":[2560],"o on), and s":[2560]," on), and se":[2560],"on), and set":[2560],"n), and sett":[2560],"), and sette":[2560],", and settex":[2560]," and settext":[2560],"and settextu":[2560],"nd settextur":[2560],"d settexture":[2560]," settexture ":[2560],"settexture o":[2560],"ettexture on":[2560],"ttexture on ":[2560],"texture on t":[2560],"exture on th":[2560],"xture on the":[2560],"ure on the c":[2560],"re on the cu":[2560],"e on the cus":[2560]," on the cust":[2560],"on the custo":[2560]," the customp":[2560],"the custompr":[2560],"he custompro":[2560],"e customproc":[2560],"raltexture w":[2560],"altexture wi":[2560],"ltexture wil":[2560],"texture will":[2560],"exture will ":[2560],"xture will g":[2560],"ture will gi":[2560],"ure will giv":[2560],"re will give":[2560],"e will give ":[2560]," will give v":[2560],"will give va":[2560],"ill give val":[2560],"ll give valu":[2560],"l give value":[2560]," give values":[2560],"give values ":[2560],"ive values a":[2560],"ve values an":[2560],"e values and":[2560]," values and ":[2560],"values and s":[2560],"alues and sa":[2560],"lues and sam":[2560],"ues and samp":[2560],"es and sampl":[2560],"s and sample":[2560]," and sampler":[2560],"and sampler2":[2560],"nd sampler2d":[2560],"d sampler2d ":[2560],"sampler2d to":[2560],"ampler2d to ":[2560],"mpler2d to t":[2560],"pler2d to th":[2560],"ler2d to the":[2560],"er2d to the ":[2560],"r2d to the s":[2560],"2d to the sh":[2560],"see the expl":[2561],"ee the expla":[2561],"e the explan":[2561]," the explana":[2561],"the explanat":[2561],"he explanati":[2561],"xplanation a":[2561],"planation ab":[2561],"lanation abo":[2561],"anation abov":[2561],"nation above":[2561],"ation above ":[2561],"tion above t":[2561],"ion above to":[2561],"on above to ":[2561],"n above to u":[2561]," above to un":[2561],"above to und":[2561],"bove to unde":[2561],"ove to under":[2561],"ve to unders":[2561],"e to underst":[2561]," to understa":[2561],"to understan":[2561],"o understand":[2561],"understand w":[2561],"nderstand wh":[2561],"derstand wha":[2561],"erstand what":[2561],"rstand what ":[2561],"stand what e":[2561],"tand what ea":[2561],"and what eac":[2561],"nd what each":[2561],"d what each ":[2561]," what each v":[2561],"what each va":[2561],"hat each var":[2561],"at each vari":[2561],"t each varia":[2561]," each variab":[2561],"each variabl":[2561],"ach variable":[2561],"ch variable ":[2561],"h variable i":[2561]," variable is":[2561],"variable is.":[2561],"*(to be expa":[2563],"(to be expan":[2563],"to be expand":[2563],"o be expande":[2563]," be expanded":[2563],"be expanded)":[2563],"e expanded)*":[2563],"_(edition in":[2564],"(edition in ":[2564],"edition in p":[2564],"dition in pr":[2564],"ition in pro":[2564],"tion in prog":[2564],"ion in progr":[2564],"on in progre":[2564],"n in progres":[2564]," in progress":[2564],"in progress)":[2564],"n progress)_":[2564],"el free to p":[2565],"l free to pl":[2565]," free to pla":[2565],"free to play":[2565],"ree to play ":[2565],"ee to play w":[2565],"e to play wi":[2565],"lay with thi":[2565],"ay with this":[2565],"y with this ":[2565]," with this s":[2565],"with this sc":[2565],"ith this sce":[2565],"th this scen":[2565],"h this scene":[2565]," this scene.":[2565],"this scene..":[2565],"his scene...":[2565],"is scene... ":[2565],"s scene... [":[2565]," scene... [a":[2565],"scene... [at":[2565],"cene... [at ":[2565],"ene... [at o":[2565],"ne... [at ou":[2565],"e... [at our":[2565],"... [at our ":[2565],".. [at our o":[2565],". [at our on":[2565]," [at our onl":[2565],"[at our onli":[2565],"at our onlin":[2565],"t our online":[2565]," our online ":[2565],"our online p":[2565],"ur online pl":[2565],"r online pla":[2565]," online play":[2565],"online playg":[2565],"nline playgr":[2565],"line playgro":[2565],"ine playgrou":[2565],"ne playgroun":[2565],"und.com/#24c":[2565],"nd.com/#24c4":[2565],"d.com/#24c4k":[2565],".com/#24c4kc":[2565],"com/#24c4kc)":[2565],"om/#24c4kc).":[2565]}],"data":[{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"---"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"---"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"---"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"---"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"---"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"---"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"---"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"---"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"---"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"---"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"---"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"---"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"---"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"---"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"---"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"---"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"---"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"---"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"---"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"---"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"---"},{"src":"tutorials/How_to_use_Tiled_Grounds","name":"How to use Tiled Grounds","text":"---"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"---"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"---"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"---"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"---"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"---"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"---"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"---"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"---"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"---"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"---"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"---"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"ID_PAGE: 22511"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"PG_TITLE: Adding Your Own Physics Engine Plugin to Babylon.js"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"ID_PAGE: 22411"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"PG_TITLE: How Rotations and Translations Work"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"ID_PAGE: 22491"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"PG_TITLE: How to Create Your Own File Importer"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"ID_PAGE: 25096"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"PG_TITLE: How to dynamically morph a mesh "},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"ID_PAGE: 22451"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"PG_TITLE: How to Merge Meshes"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"ID_PAGE: 22531"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"PG_TITLE: How to use Actions"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"ID_PAGE: 22551"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"PG_TITLE: How to use AssetsManager"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"ID_PAGE: 22421"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"PG_TITLE: How to use Bones and Skeletons"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"ID_PAGE: 25364"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"PG_TITLE: How to use Blend Modes"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"ID_PAGE: 25091"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"PG_TITLE: How to use Curve3"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"ID_PAGE: 24825"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"PG_TITLE: How to use DepthRenderer to get depth values"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"ID_PAGE: 22481"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"PG_TITLE: How to use FresnelParameters"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"ID_PAGE: 22571"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"PG_TITLE: How to use Instances"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"ID_PAGE: 22591"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"PG_TITLE: How to use LOD"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"ID_PAGE: 22461"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"PG_TITLE: How to use Multi-Views"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"ID_PAGE: 22471"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"PG_TITLE: How to use Lens Flares"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"ID_PAGE: 25090"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"PG_TITLE: How to use Path3D"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"ID_PAGE: 22431"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"PG_TITLE: How to use PostProcesses"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"ID_PAGE: 22441"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"PG_TITLE: How to use PostProcessRenderPipeline"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"ID_PAGE: 22601"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"PG_TITLE: How to use Procedural Textures"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"ID_PAGE: 22581"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"PG_TITLE: How to use SceneOptimizer"},{"src":"tutorials/How_to_use_Tiled_Grounds","name":"How to use Tiled Grounds","text":"ID_PAGE: 22541"},{"src":"tutorials/How_to_use_Tiled_Grounds","name":"How to use Tiled Grounds","text":"PG_TITLE: How to use Tiled Grounds"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"ID_PAGE: 22502"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"PG_TITLE: How to use VirtualJoysticksCamera"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"ID_PAGE: 24822"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"PG_TITLE: In-Browser Mesh Simplification (Auto-LOD)"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"ID_PAGE: 22521"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"PG_TITLE: How to use the Tags System"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"ID_PAGE: 25363"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"PG_TITLE: Layermasks and Multi-Cam Textures"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"ID_PAGE: 22561"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"PG_TITLE: Optimizing Your Scene with Octrees"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"ID_PAGE: 25100"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"PG_TITLE: Transparency and How Meshes Are Rendered"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"ID_PAGE: 22611"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"PG_TITLE: Using the Debug Layer"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"ID_PAGE: 24841"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"PG_TITLE: Using depth-of-field and other lens effects"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"ID_PAGE: 25362"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"PG_TITLE: Using the HDR Rendering Pipeline"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"ID_PAGE: 24837"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"PG_TITLE: Using the SSAO rendering pipeline"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"ID_PAGE: 24840"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"PG_TITLE: Using the Volumetric LightScattering post-process"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"---"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"Basically Babylon.js comes with a plugin already defined for cannon.js"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"# Define your plugin"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"---"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"Babylon.js provides many ways to locate and rotate your meshes."},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"The basic way to define the position of a mesh is the following:"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"---"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"By default, babylon.js comes with an importer for .babylon files."},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"You can also create your own importer by providing a specific object to the ```BABYLON.SceneLoader.RegisterPlugin``` function."},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"---"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"###What is morphing ?"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"This part is about the way to morph some kind of meshes.   "},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"---"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"If you want to merge meshes into a new one, you can use the following code:"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"Note: Careful, when you merge cloned mesh, you need to update the world matrix of the mesh with computeWorldMatrix before calling the function."},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"---"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"Actions are a simple way to add interactions in your scenes. An action is launched when its trigger is fired."},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"For instance, you can specify that when the user clicks (or touches) a mesh, an action is executed."},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"---"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"In order to help developers load multiple assets, Babylon.js (starting with version 1.14) introduced the AssetsManager class."},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"This class can be used to import meshes into a scene or load text and binary files."},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"---"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"Babylon.js supports bones animations for your meshes."},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"![Bones](http://www.babylonjs.com/Screenshots/bones.jpg)"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"---"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"# Introduction to Blend Modes ##"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"A *blend mode* determines how, when rendering a mesh, new on-screen pixels will be mixed with existing pixels."},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"---"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"BabylonJS provides an object to manage some math curves for you : **Curve3**."},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"This object allow you to generate 3D curves according to some complex math function. You can then get an array of successive points (_Vector3_) representing the curve."},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"---"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"BABYLON.DepthRenderer is a tool used to generate depth texture (a texture that contains depth buffer and which can be used to read scene depth values)."},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"Using it is pretty straightforward:"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"---"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"Babylon.js 1.14 introduced new parameters for the StandardMaterial: _FresnelParameters_."},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"![](http://www.babylonjs.com/Screenshots/fresnel.jpg)"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"---"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"Instances are an excellent way to use hardware accelerated rendering to draw a huge number of identical meshes (let's imagine a forest or an army)."},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"Instances are built from a mesh with the following code:"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"---"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"Babylon.js comes with an integrated support for level of detail."},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"This feature allows you to specify different meshes based on distance to viewer."},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"---"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"Babylon.js is able to render multi views of the same scene."},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"## Active cameras"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"---"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"Babylon.js allows you to simply create lens flares effect:"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"![Lens flares](http://www.babylonjs.com/Screenshots/lens.jpg)"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"---"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"**Path3D** is a math object.  "},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"Given an array of successive _Vector3_, it allows you to construct a path in space by computing on each point a triplet of vectors, the tangent, the normal and the binormal to keep direction and consistency (reduction of rotations).  "},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"Here is the model inspired from  : http://www.cs.cmu.edu/afs/andrew/scs/cs/15-462/web/old/asst2camera.html  "},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"---"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"Postprocesses allow you to create 2D effects on top of your scene."},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"A postprocess is linked to a camera and can be part of a chain of postprocesses where each postprocess uses the result of the previous one as input for its own processing."},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"---"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"Post Process Renders pipelines allow you to create a chain of post processes and attach it to a camera."},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"A render pipeline can be managed by enabling and disabling some effects and displaying a specific pass for debugging."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"---"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"In classic texturing, we use 2D images, often pictures that have been shaped specifically to match an object. Let’s imagine you are creating a medieval fantasy game, working on a dwarf pub, where there are multiple, big, \"old school\" wooden tables. With classic 2D texturing, you have 3 choices:"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- Create a single texture and use it on all of the tables (but every table is going to look the same)"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"---"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"Rendering a scene on a browser is a great experience because you can reach a lot of different users and hardware. But the main associated caveat is that you can encounter very low end devices."},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"The SceneOptimizer tool is designed to help you reach a specific framerate by gracefully degrading rendering quality at runtime."},{"src":"tutorials/How_to_use_Tiled_Grounds","name":"How to use Tiled Grounds","text":"---"},{"src":"tutorials/How_to_use_Tiled_Grounds","name":"How to use Tiled Grounds","text":"We're headed for Célian Garcia's document!"},{"src":"tutorials/How_to_use_Tiled_Grounds","name":"How to use Tiled Grounds","text":"Please click [right here](http://makina-corpus.com/blog/metier/2014/how-to-use-multimaterials-with-a-tiled-ground-in-babylonjs)"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"---"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"The VirtualJoysticksCamera will create a Babylon.js camera that can move within your games, thanks to 2 touch-enabled joysticks drawn on the left &amp; right sides of the screen. It’s designed to be controlled via your 2 thumbs."},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"It derives from the [FreeCamera](https://github.com/BabylonJS/Babylon.js/blob/master/Babylon/Cameras/babylon.freeCamera.js) to provide a FPS-like experience and instantiates 2 [VirtualJoystick](http://doc.babylonjs.com/page.php?p=25064) for you, automatically."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"---"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"#About"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"Level of Details is a powerful tool that was added to BabylonJS in version 2.0 . The concept is rather simple - When the camera is in a certain distance from the mesh, lowering the amount of faces displayed will increase performance without the user noticing the reduction."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"---"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"## Concepts"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"Tag? You may already have heard or read this word before. Let's see some generic concepts."},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"---"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"##Different meshes for multiple cameras using Layermasks#"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"---"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"A `layerMask` is a number assigned to each mesh and camera.&nbsp; It is used at the bit level to indicate whether lights and cameras should shine-upon or show the mesh.&nbsp; The default value, 0x0FFFFFFF, will cause the mesh to be shined upon shown by any stock light and camera."},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"---"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"Octrees are a really powerful data structure that can quickly select entities based on space coordinates."},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"More on wikipedia: http://en.wikipedia.org/wiki/Octree"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"---"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"This article has been written to help you understand how things are drawn on screen, and how transparency is handled in BabylonJS. Feel free to contribute in whatever way seems fit to you!"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"# General Considerations"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"---"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"The main goal of the debug layer is to provide a fully functional UI to help you debug a scene and find potential culprits."},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"## Using the UI"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"---"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"BABYLON.LensRenderingPipeline is a predefined chain of postprocesses that helps achieving photograph-like realism."},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"---"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"The HDR Rendering pipeline is a set of multiple post-processes. It tends to simulate the eye adaptation to the light and darkness and also simulate the most realistic glare."},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"The train demo (focus on the tunnel) : http://reath.free.fr/HDR/test.html"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"---"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"BABYLON.SSAORenderingPipeline is a rendering pipeline (chained post-processes) that will compute the ambient occlusion of a given scene from the screen space."},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"You can find an example in our playground [here](http://www.babylonjs-playground.com/?24)"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"---"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"BABYLON.VolumetricLightScatteringPostProcess is a post-process that will compute the light scattering according to a light source mesh."},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"Don't hesitate to perform your tests using the playground [here](http://www.babylonjs-playground.com/?25)"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"You can create your own plugin by creating a class that provides the following interface:"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"* ```function initialize()```: Must initialize your engine"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"* ```function setGravity(gravity)```: Used by Babylon.js to set the current gravity"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"* ```function runOneStep(delta)```: babylon.js will call this function for each frame, giving you the delta time between current and previous frame. This is the responsibility of the plugin to update meshes' position and rotation accordingly to the physics simulation."},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```javascript"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"mesh.position = new BABYLON.Vector3(x, y, z);"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"The translation is applied **AFTER** the rotation which can be set with euler angles or quaternions:"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```javascript"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"mesh.rotation = new BABYLON.Vector3(x, y, z); // Euler"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"This object must have three properties:"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"* A list of supported file extensions (```extensions```)"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"* An ```importMesh``` function to import specific meshes"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"* A ```load``` function to import complete scene"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"For now, it concerns only ribbons, tubes, extruded shapes and lines.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"When talking about morphing, we mean here changing the vertices positions of an existing mesh. Indices remain unchanged. This means the mesh keeps the same number of vertices, the same faces between vertices and it remains the same object in your code."},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"Only its vertices change their coordinates.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"If you handle a box or another fixed basic shape, it's quite easy to access to vertices positions because your mesh has an expected shape. For example, you can guess a box has 4 vertices per face.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"But when handling parametric shapes like ribbons, tubes, etc, it becomes very difficult to guess how and where vertices were positioned by the mesh constructor algorithm. For a tube, for instance, you only know the axis path you gave to build it (and radius, tessellation, of course).   "},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"**Note: This article covers the internal merging process. You can also use ```BABYLON.VertexData``` object and its ```merge()``` function for a simpler solution.**"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"```javascript"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"var mergeMeshes = function (meshName, arrayObj, scene) {"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var arrayPos = [];"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var arrayNormal = [];"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"# How to use it"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"To use actions, you have to attach an `BABYLON.ActionManager` to a mesh or to your scene:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`mesh.actionManager = new BABYLON.ActionManager(scene);`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"Once the ActionManager is created, you can start registering actions:"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"## Using AssetsManager"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"To use it, you just have to instantiate it with a current scene:"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"```javascript"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"var assetsManager = new BABYLON.AssetsManager(scene);"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"### Basics"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"Basically a skeleton (```BABYLON.Skeleton```) contains a hierarchy of bones (```BABYLON.Bone```). A bone is defined by a name, a parent (can be null) and a transformation matrix."},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"Here are the constructors:"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"```"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"BABYLON.Skeleton = function (name, id, scene)"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"This may sound trivial as most of the time new pixels simply replace existing ones, which is not really what we may call _blending_ at all. However, in the case of alpha-blended meshes, new pixels do not simply overwrite existing ones: they are _combined_ according to how transparent the mesh is. This is an example of the most simple blending operation available (and also the default one): `BABYLON.Engine.ALPHA_COMBINE`."},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"Other blend modes exist, and allow you to achieve advanced visual effects."},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"# Available Blend Modes #"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"##Quadratic Bezier curve"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"http://en.wikipedia.org/wiki/B%C3%A9zier_curve#Quadratic_curves"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"![Wikipedia Quadratic Bezier Curve](http://upload.wikimedia.org/wikipedia/commons/3/3d/B%C3%A9zier_2_big.gif)"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```javascript"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"```"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"var renderer = scene.enableDepthRenderer();"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"```"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"Starting from there, the scene will fill for you the renderer with depth values. All active meshes (Meshes which are visible from the current camera point of view) are drawn by the DepthRenderer. "},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"There are 4 of them:"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"* ```StandardMaterial.diffuseFresnelParameters```"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"* ```StandardMaterial.opacityFresnelParameters```"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"* ```StandardMaterial.reflectionFresnelParameters```"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"* ```StandardMaterial.emissiveFresnelParameters```"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"```javascript"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"var mesh = newMeshes[0];"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"for (var index = 0; index < 100; index++) {"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"    var newInstance = mesh.createInstance(\"i\" + index);"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"}"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"```"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"For instance, here is how to define 4 levels of details for a given mesh:"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"```javascript"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"var knot00 = BABYLON.Mesh.CreateTorusKnot(\"knot0\", 0.5, 0.2, 128, 64, 2, 3, scene);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"var knot01 = BABYLON.Mesh.CreateTorusKnot(\"knot1\", 0.5, 0.2, 32, 16, 2, 3, scene);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"var knot02 = BABYLON.Mesh.CreateTorusKnot(\"knot2\", 0.5, 0.2, 24, 12, 2, 3, scene);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"var knot03 = BABYLON.Mesh.CreateTorusKnot(\"knot3\", 0.5, 0.2, 16, 8, 2, 3, scene);"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"Basically, a scene has a ```scene.activeCamera``` property to define the point of view. But you can also define many active cameras with the following code:"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"```javascript"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"scene.activeCameras.push(camera);"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"scene.activeCameras.push(camera2);"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"```"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"To do so, you have to first create a LensFlareSystem:"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"```javascript"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"var lensFlareSystem = new BABYLON.LensFlareSystem(\"lensFlareSystem\", light0, scene);"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"```"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"Each triplet can then be used as a local system coordinate. You could set for example a camera on each normal sliding along a curve."},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"Here is a simple example of the visualisation of the triplets on a sinus curve : http://www.babylonjs-playground.com/#2DLXYB  "},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"Please zoom in and rotate : tangents in red, normals in blue, binormal in green.  "},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"Another example to show how the triplets slightly rotate when the curve goes more into depth  : http://www.babylonjs-playground.com/#2DLXYB#1  "},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"# Base postprocess"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"Every postprocess is based upon ```BABYLON.PostProcess``` which uses this constructor:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"BABYLON.PostProcess = function (name, fragmentUrl, parameters, samplers, ratio, camera, samplingMode, engine, reusable)"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"## Base Render Pipeline"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"![](https://raw.githubusercontent.com/michael-korbas/Babylon.js/Docs/Docs/RenderPipeline/Resources/Architecture.png)"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"Renders Pipelines are composed of serval classes."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- Create a collection of various wood textures and apply them randomly to each table"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- Create a separate texture for each table, insuring that they each look different "},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"No choice seems to be a good one."},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"# Basic usage"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"The main function you have to know is ```BABYLON.SceneOptimizer.OptimizeAsync()```. You can call this function when you want to optimize your scene. The simplest call you can do is the following:"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"```javascript"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"BABYLON.SceneOptimizer.OptimizeAsync(scene),"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"```"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"**Note:** We’re using the [W3C Pointer Events](http://www.w3.org/TR/pointerevents/) model. To enable touch on all devices &amp; platforms, we’re using our [Hand.js polyfill](http://handjs.codeplex.com/) library. Don’t forget to include it in your project, otherwise the virtual joysticks will only work in IE."},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"### Using the BABYLON.VirtualJoysticksCamera camera"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"It’s the same concept as all our cameras, 1 line of code to activate all the magic. For instance, here is how to create a virtual joysticks camera at the center of the world:"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"LOD requires the developer to add a few meshes to the original mesh. One of the ways to create those meshes is simplification. Many 3D tools offer various simplification algorithms. It is sometimes called Decimation."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"Starting Version 2.0, Babylon.js offers an In-browser simplification functionality that works asynchronous while trying not to disturb the rendering process. Ths LOD levels will be automatically added to the scene after finishing the calculation."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"#Usage - Simplifying a mesh"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"### Tags are used:"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"- as an index term assigned to a piece of information"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"- to pass parameters to subroutines"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"- as components of the HTML markup language"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"- as labels for specific revisions of a project"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"The feature is used primarily when multiple cameras are active at the same time.&nbsp; If you wish to have a mesh that is always visible on the screen and pickable, e.g. a button, you might add a second camera and light to the scene to exclusively show and light it.&nbsp; "},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"You'll need the 2nd camera to ONLY see the button.&nbsp; The button should also only be visible once. "},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"Notice that the default `layerMask` starts with the first 4 bits being 0, or off.&nbsp; If the 2nd camera and button were to both have a `layerMask` with one of the 4 values below, then the 2nd camera would only see the button:"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"- 0x10000000"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"- 0x20000000"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"Babylon.js supports octrees through a class named ```BABYLON.Octree```. Dedicated functions are available to help you create these octrees when required:"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"# Optimizing meshes selection for rendering"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"If your scene has a lot of meshes, it can be useful to create an octree to speed visible meshes selection (e.g. finding meshes the camera can see). To do so, just call this function:"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"```javascript"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"var octree = scene.createOrUpdateSelectionOctree(capacity, maxDepth)"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"A general rule of thumb in real-time 3D rendering is that drawing several overlapping opaque objects is always easier than non-opaque ones. This is due to the fact that opaque objects are compatible with the use of a depth buffer, and thus no specific order is required when rendering them."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"A depth buffer is a surface using the same dimensions as the screen, and holding for every pixel the following information: how far from the camera was the last pixel drawn here. With this information, we can draw as many objects as we want and always be sure that we will never draw something that was supposed to be hidden by another object. BabylonJS offers access to this information with a special DepthRenderer object, as described [here](http://doc.babylonjs.com/page.php?p=24825). "},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"Rendering objects without a depth buffer would require resorting to an old-school technique called [*Painter's Algorithm*](http://en.wikipedia.org/wiki/Painter's_algorithm), which is extremely simple: draw further objects first. Sky, then backdrop, etc. all the way to foreground objects. This is basically ordering objects by distance from camera (a.k.a. depth), and clearly not enough for most cases."},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"You can display the debug layer by calling:"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```javascript"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"scene.debugLayer.show();"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"You can also display the debug layer by choosing a camera if you use multiple cameras:"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"![DoF example](http://imgur.com/I26fggX.png)  "},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"_An example of what can be achieved with this postprocess pipeline._"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"You can see a live example of it here: [http://www.babylonjs-playground.com/#DX6AV#4](http://www.babylonjs-playground.com/#DX6AV#4)"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"## Instancing the pipeline ##"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```javascript"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"var hdr = new BABYLON.HDRRenderingPipeline(\"pipeline_name\", scene, ratio, originalPostProcess, cameras);"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"The parameter ```originalPostProcess``` is the base color post-process for the pipeline. If ```null```, a ```BABYLON.PassPostProcess``` is created by default."},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"The post-processes chain is defined by:"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"* Original scene color post-process: saves the original scene color"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"* SSAO post-process"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"* Horizontal blur post-process"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"* Vertical blur post-process"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"* Combine post-process: blends the Vertical blur post-process output with the original scene color"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"## How to use it ? Easily ##"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"var vls = new BABYLON.VolumetricLightScatteringPostProcess('vls', 1.0, camera, lightSourceMesh, samplesNum, BABYLON.Texture.BILINEAR_SAMPLINGMODE, engine, false);"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"*** Parameters ***"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"* ```function registerMesh(mesh, impostor, options)```: babylon.js will call this function when the user wants to create a physics impostor for a mesh. ```options``` parameter contains 3 values: ```mass```, ```friction``` and ```restitution```. Possible values for ```impostor``` are the following:"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"&nbsp; * NoImpostor = 0;"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"&nbsp; * SphereImpostor = 1;"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"&nbsp; * BoxImpostor = 2;"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"&nbsp; * PlaneImpostor = 3;"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"&nbsp; * CompoundImpostor = 4;"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"&nbsp; * MeshImpostor = 4;"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"* ```function registerMeshesAsCompound(parts, options)```: Babylon.js will call this function for compound objects. ```parts``` parameter contains an array of ```{mesh, impostor}```. ```options``` parameter is the same as above."},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"mesh.rotationQuaternion = new BABYLON.Quaternion(x, y, z, w); // Quaternion"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"The rotation is computed in the object local space. ```rotation``` will be used if ```rotationQuaternion``` property is null (This is the default behavior). ```rotationQuaternion``` is used if both are set."},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"**You MUST use rotationQuaternion when creating physics objects.**"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"If you want to apply a translation of the local space you have to use the following code:"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```javascript"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"mesh.setPositionWithLocalVector(new BABYLON.Vector3(x, y, z));"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"You can also get the current position of the object but in local space and not in parent space with the following code:"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"Here is a sample importer object:"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"```javascript"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"    BABYLON.SceneLoader.RegisterPlugin({"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"        extensions: \".babylon\","},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"        importMesh: function (meshesNames, scene, data, rootUrl, meshes, particleSystems, skeletons) {"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"            return true;"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"        },"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"        load: function (scene, data, rootUrl) {"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"            return true;"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"        }"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"    });"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"So you will learn here how to update the shape of an existing mesh and how to morph it in the render loop.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"###Ribbon"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"#####_ribbon updatable parameter : pathArray_ "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"_(reminder : only points positions can change in the path array, not the number of points. Please see the summary at the bottom of this page for more details)_ "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"Let's create a ribbon.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"As explained in the Ribbon tutorial part, a good way to create a ribbon is to fill many arrays with _Vector3_ with two _for_ loops : one for each path, another one for the array of paths : the _pathArray_.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"Here we create a simple plane ribbon in the xOz plane   "},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var arrayUv = [];"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var arrayUv2 = [];"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var arrayColor = [];"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var arrayMatricesIndices = [];"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var arrayMatricesWeights = [];"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var arrayIndice = [];"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var savedPosition = [];"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var savedNormal = [];"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var newMesh = new BABYLON.Mesh(meshName, scene);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var UVKind = true;"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var UV2Kind = true;"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var ColorKind = true;"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"```javascript"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"mesh.actionManager.registerAction(new BABYLON.InterpolateValueAction(BABYLON.ActionManager.OnPickTrigger, light, \"diffuse\", BABYLON.Color3.Black(), 1000));"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"```"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"For instance this action will animate the `light.diffuse` property to black in 1000ms when the user picks the mesh."},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"You can also chain actions:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"```javascript"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"mesh.actionManager.registerAction(new BABYLON.InterpolateValueAction(BABYLON.ActionManager.OnPickTrigger, light, \"diffuse\", BABYLON.Color3.Black(), 1000))"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"        .then(new BABYLON.SetValueAction(BABYLON.ActionManager.NothingTrigger, mesh.material, \"wireframe\", false));"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"```"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"Then you can add tasks to the manager:"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"```javascript"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"var meshTask = assetsManager.addMeshTask(\"skull task\", \"\", \"./\", \"skull.babylon\");"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"```"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"Each task provides an ```onSuccess``` and an ```onError``` callback:"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"```javascript"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"BABYLON.Bone = function (name, skeleton, parentBone, matrix)"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"```"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"Inside a skeleton, bones can be found inside the ```skeleton.bones``` array."},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"A bone can contain [animations](http://doc.babylonjs.com/page.php?p=22081) to animate its ```matrix``` property."},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"### Preparing mesh"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"A skeleton can be applied to a mesh through the ```mesh.skeleton``` property."},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"You should note that babylon.js supports up to **4 bones influences per vertex**."},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"All the available blend modes are listed below:"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"| Blend Mode | Effect | Additional Info |"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"|-------------------------------- |---------------- | -------------------- |"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"| `BABYLON.Engine.ALPHA_COMBINE` | This is the default blend mode for alpha-blended meshes. Blending is modulated by the alpha value of the pixel being drawn. | This is the default blend mode. |"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"| `BABYLON.Engine.ALPHA_ADD` | This blend mode will effectively _add_ the new pixel and existing pixel values, giving off a ghost-like effect and brightening what's behind the mesh. | |"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"| `BABYLON.Engine.ALPHA_SUBTRACT` | The new pixel value is subtracted from the existing one, giving off an \"inverted color\" effect. | Blending is **not** modulated by alpha value. |"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"| `BABYLON.Engine.ALPHA_MULTIPLY` | The new and existing pixel values are multiplied, thus what's behind the rendered mesh is darkened. This is more or less the opposite of the ALPHA_ADD effect. | Blending is **not** modulated by alpha value. |"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"| `BABYLON.Engine.ALPHA_MAXIMIZED` | This blend mode is similar to ALPHA_ADD, but gives off a less vibrant and saturated effect. | |"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var bezier2 = BABYLON.Curve3.CreateQuadraticBezier(origin, control, destination, nb_of_points);"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* **origin** : _Vector3_ the origin point,"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* **control** : _Vector3_ the control point,"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* **destination** : _Vector3_ the destination point,"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* **nb_of_points** : _number_ the wanted final curve number of points in the array."},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"This static method returns an instance of _Curve3_.   "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"Just use the Curve3 _getPoints()_ method to fill your array : _getPoints()_ returns an array of successive _Vector3_.    "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"You can then use it for ribbons, tubes, extrusion paths, etc.    "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"The _length()_ method returns the curve length.   "},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"**Warning: Transparent meshes are not drawn because they are not written to the depth buffer**"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"You can then use the texture associated with the renderer like any other textures by using ```getDepthMap()``` function:"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"```"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"var mat = new BABYLON.StandardMaterial(\"mat01\", scene);"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"mat.emissiveTexture = renderer.getDepthMap(); "},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"```"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"If you want to disable the renderer, just call the following code:"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"## How fresnel is working"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"A fresnel term is computed by the StandardMaterial in order to change the way a color is applied by using viewing angle."},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"For instance, you can simulate great glass or reflection effects by just using a simple fresnel. The fresnel will let you have more reflection on edges and not all on the center."},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"To do so, just use this code:"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"```javascript"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.reflectionFresnelParameters = new BABYLON.FresnelParameters();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"```"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"A mesh can have as many instances as you want."},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"Each instance has the same material as the root mesh. They can only vary on the following properties:"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"* ```position```"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"* ```rotation```"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"* ```rotationQuaternion```"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"* ```setPivotMatrix```"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"* ```scaling```"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"# Support"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"Instances are supported for collisions, picking, rendering and shadows. Even if the current hardware does not support hardware accelerated instances, babylon.js will be able to optimize rendering to take instances into account."},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"# Using Blender to create instances"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"knot00.addLODLevel(15, knot01);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"knot00.addLODLevel(30, knot02);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"knot00.addLODLevel(45, knot03);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"knot00.addLODLevel(55, null);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"```"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"The first parameter used with ```addLODLevel``` defines the distance to the camera. Beyond this distance, the specified level is used."},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"Each level is independent and can have its own material."},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"By defining a level of detail to null, you disable rendering of the current mesh, when it is viewed beyond the indicated distance to camera."},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"When a mesh is used as a level of detail for another mesh, it is linked to it and cannot be rendered directly."},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"## Viewports"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"If you want to use many cameras, you will need to specify a viewport for each camera:"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"```javascript"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"camera.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 1.0);"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"camera2.viewport = new BABYLON.Viewport(0, 0, 0.5, 1.0);"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"```"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"A viewport is defined by the following constructor:"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"```javascript"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"BABYLON.Viewport = function (x, y, width, height);"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"The second parameter defines the source (the emitter) of the lens flares (it can be a camera, a light or a mesh)."},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"Then, you can add flares to your system with the following code:"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"```javascript"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"var flare00 = new BABYLON.LensFlare(0.2, 0, new BABYLON.Color3(1, 1, 1), \"Assets/lens5.png\", lensFlareSystem);"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"var flare01 = new BABYLON.LensFlare(0.5, 0.2, new BABYLON.Color3(0.5, 0.5, 1), \"Assets/lens4.png\", lensFlareSystem);"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"var flare02 = new BABYLON.LensFlare(0.2, 1.0, new BABYLON.Color3(1, 1, 1), \"Assets/lens4.png\", lensFlareSystem);"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"var flare03 = new BABYLON.LensFlare(0.4, 0.4, new BABYLON.Color3(1, 0.5, 1), \"Assets/Flare.png\", lensFlareSystem);"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"var flare04 = new BABYLON.LensFlare(0.1, 0.6, new BABYLON.Color3(1, 1, 1), \"Assets/lens5.png\", lensFlareSystem);"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"var flare05 = new BABYLON.LensFlare(0.3, 0.8, new BABYLON.Color3(1, 1, 1), \"Assets/lens4.png\", lensFlareSystem);"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"```"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"Path3D creation :"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"```javascript"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"var points = [v1, v2, ..., vn];          // array of Vector3"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"var path3d = new BABYLON.Path3D(points);"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"```"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"You can then get the triplets. Each following methods return an array of _Vector3_ which are respectively on each curve point the tangent, normal and binormal vectors :"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"```javascript"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"var tangents = path3D.getTangents();"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"var normals = path3D.getNormals();"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"var binormals = path3D.getBinormals();"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"We will get back to _fragmentUrl_, _parameters_ and _samplers_ parameters."},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"The _ratio_ is used to define the size of the postprocess (0.5 means that your postprocess will have a width = canvas.width * 0.5 and a height = canvas.height * 0.5)."},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"The _camera_ parameter is self-explanatory."},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"The _samplingMode_ can be one of the following:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* BABYLON.Texture.NEAREST_SAMPLINGMODE"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* BABYLON.Texture.BILINEAR_SAMPLINGMODE (**default**)"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* BABYLON.Texture.TRILINEAR_SAMPLINGMODE"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"The _engine_ parameter is the engine where you want to attach your postprocess."},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"| Class | Description |"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|--------|--------|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`BABYLON.PostProcessRenderPipelineManager`**| Managing all pipelines, allow you to enable or disable an effect, displaying a pass of post process for debugging.|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`BABYLON.PostProcessRenderPipeline`**|Set of effects that can be ordered.|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`BABYLON.PostProcessRenderEffect`**|A render effect is a smart postprocess who can manage their own instances itself.|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`BABYLON.PostProcessRenderPass`**|A render pass is a render texture that you can use in differents render effects.|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"## Reference"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"### BABYLON.PostProcessRenderPipelineManager"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"Enter **procedural textures**. "},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"One main advantage of procedural textures is that they are written using a fragment shader (using GLSL in the case of Babylon.js). That means that the code generating the texture is executed by the GPU and not the CPU (that is to say, NOT executed in JavaScript code). This has a huge performance impact in a positive way."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"Procedural textures can be generated:"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- Only once to create the texture which is put into cache"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"You have to provide at least a scene. That previous code line is actually equivalent to this:"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"```javascript"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"BABYLON.SceneOptimizer.OptimizeAsync(scene, BABYLON.SceneOptimizerOptions.ModerateDegradationAllowed(),"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"function() {"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"   // On success"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"}, function() {"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"   // FPS target not reached"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"}),"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"```"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"```javascript"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"var VJC = new BABYLON.VirtualJoysticksCamera(\"VJC\", BABYLON.Vector3.Zero(), scene);"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"```"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"The camera constructor takes the following parameters:"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"- Name"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"- Position"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"- Scene"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"Any object of the class BABYLON.Mesh has a \"simplify\" function with the following signature:"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"<pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"public simplify(settings: Array<ISimplificationSettings>,"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"                parallelProcessing: boolean = true,"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"                type: SimplificationType = SimplificationType.QUADRATIC,"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"                successCallback?: () => void);"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"</pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"* **settings**"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"- as unique identifiers in URI"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"- as links to other Facebook pages"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"..."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"(from [Wikipedia](http://en.wikipedia.org/wiki/Tag))"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"### Tags on forums / Categories"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"If you spend some time on forums (let's pick one randomly: [forum](http://http://www.html5gamedevs.com/forum/16-babylonjs/) ;)), you may have noticed that tags are attached to topics (and/or posts sometimes)."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"The author can write words (tags) to shortly describe his/her topic without having to write a gramatically correct sentence. It's kind of a list of words that you could say during a brainstorming after reading the post."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"Example of a topic with tags:"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"- 0x40000000"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"- 0x80000000"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"It should also be noted that should a mesh with a `layerMask` of 0, can never be seen by anyone.&nbsp; This might be good for hiding things."},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"To setup for multi-cameras:"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"```javascript"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"if (scene.activeCameras.length === 0){"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;scene.activeCameras.push(scene.activeCamera);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; "},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"var secondCamera = new Babylon.Camera(...);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"secondCamera.layerMask = 0x10000000;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"scene.activeCameras.push(secondCamera);"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"```"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"You can call the function each time you want to update your octree. This function accepts two parameters:"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"* capacity: defines the maximum number of meshes you want on your octree's leaves. The default value is 64."},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"* maxDepth: defines the maximum depth (sub-levels) for your octree. Default value is 2, which means 8 * 8 * 8 = 512 blocks :) (This parameter takes precedence over capacity.)"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"**Warning: Octrees can be counterproductive if there are not enough meshes in your scene**"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"# Managing dynamic meshes"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"The main problem with octrees is that your meshes must be static. Indeed, an octree is not dynamic which means that it cannot take into account a mesh's movement."},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"If you want to have dynamic meshes while keeping your octree, you can just register a mesh as dynamic like this:"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"Testing against a depth buffer during render is a very common technique, simple to implement and perfomrance-inexpensive. However, things get more complicated for non-opaque objects, as a depth buffer can't be used anymore (since these objects don't completely hide what's behind them)."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"This is what a depth buffer looks like for a scene which contains only opaque meshes:"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"![Opaque only meshes](http://i.imgur.com/2iWCAwT.png)"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"# Rendering Order"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"## General Order"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```javascript"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"scene.debugLayer.show(true, camera);"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"![Debug layer](http://www.babylonjs.com/forumpics/debuglayer.jpg)"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"### Options"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"This panel is designed to control display of all options."},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"* Statistics, Logs, Meshes tree check-boxes allow you to enable/disable others panels"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"* Bounding boxes check-box can be used to force the display of all bounding boxes"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"* Clickable labels check-box can display a label for every node (Meshes, cameras and lights). These labels can be clicked to:"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"Three post-processes are used in the pipeline:"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"- First, a _'chromatic aberration'_ post-process, which shifts very slightly red, green and blue channels on screen. This effect is stronger on the edges. "},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"- Second, a _'highlights enhancing'_ post-process, which keeps only highlights in the scene, to be used in the depth-of-field blur"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"- Third, a _'depth-of-field'_ post-process, which actually does a bit more than that: "},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"  - blur on the edge of the lens "},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"  - lens distortion "},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"  - depth-of-field blur based on actual optics equation (the simulated lens has an inverse focal length of 0.1) "},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"  - depth-of-field 'bokeh' effect (shapes appearing in blurred areas) "},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"The parameter ```cameras``` is an array of cameras on which the pipeline will be attached to."},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"## Remove the pipeline ##"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```javascript"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"hdr.dispose();"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"Will detach the pipeline from all cameras of the previously given scene."},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"## Working with parameters ##"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"Using it is pretty straightforward:"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"```"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"var ssao = new BABYLON.SSAORenderingPipeline('ssaopipeline', scene, 0.75);"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"```"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"The third argument is the ratio used by SSAO, Horizontal blur and Vertical blur post-processes"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"You can also set an array of Camera as fourth argument, then the constructor will automatically attach the rendering pipeline to the given cameras like:"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"```"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"var ssao = new BABYLON.SSAORenderingPipeline('ssaopipeline', scene, 0.75, [camera1 etc.]);"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- name - The post-process name {string}"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- ratio - The size of the post-process and/or internal pass (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5) {any}"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- camera - The camera that the post-process will be attached to {BABYLON.Camera}"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- lightSourceMesh - The mesh used as light source to create the light scattering effect (for example, a billboard with its texture simulating the sun) {BABYLON.Mesh}"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- samplesNum - The post-process quality, default 100 {number}"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- samplingMode - The post-process filtering mode {number}"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- engine - The Babylon engine {BABYLON.Engine}"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- reusable - If the post-process is reusable {boolean}"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- scene - If \"camera\" parameter is null (adding the post-process in a rendering pipeline), scene is needed to configure the internal pass {BABYLON.Scene}"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"* ```function unregisterMesh(mesh)```: Called to remove a mesh from the simulation"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"* ```function applyImpulse(mesh, force, contactPoint)```: Apply a specific force to a specific contact point for a given mesh"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"* ```function createLink(mesh1, mesh2, pivot1, pivot2)```: Create a joint between two meshes"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"* ```function dispose()```: Free all allocated resources"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"* ```function isSupported()```: This function will be called by Babylon.js before everything else to ensure that your plugin can be instanciated (You have to check if required .js files are included for instance)"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"For implementation details, you can refer to cannon.js plugin: https://github.com/BabylonJS/Babylon.js/blob/master/Babylon/Physics/Plugins/babylon.cannonJSPlugin.js"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"# Using your plugin"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"When you launch the physics simulation, you can add a new parameter to ```enablePhysics``` function to indicate which plugin to use:"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"```javascript"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"scene.enablePhysics(null, new BABYLON.CannonJSPlugin()),"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```javascript"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"var localPosition = mesh.getPositionExpressedInLocalSpace();"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"If you want to add an extra translation expressed in local space you have to use the following code:"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```javascript"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"mesh.locallyTranslate(new BABYLON.Vector3(x, y, z));"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"Each time you call it with the same vector, it will move your mesh whereas ```setPositionWithLocalVector``` will move it only the first time. http://jsfiddle.net/gwenaelhagenmuller/35uFf/12/"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"For your convenience, we also added ```mesh.rotate``` and ```mesh.translate``` to add a rotation or a translation to a mesh (both in local and world space):"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```javascript"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"mesh.rotate(BABYLON.Axis.X, 1.0, BABYLON.Space.LOCAL);"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"mesh.translate(BABYLON.Axis.X, 1.0, BABYLON.Space.WORLD);"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"Please note that ```mesh.rotate``` generates a quaternion and then uses ```mesh.rotationQuaternion```."},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"#Generating a rotation from a target system#"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"Sometimes you may know the final orientation you want to give to a mesh in terms of alignment with distant axis, but you don't what rotation to apply to it to achieve this wanted orientation. "},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"There is a way to compute an Euler rotation from a set of axis : "},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```javascript"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"```"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"* ```meshesNames``` is the names of meshes to import"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"* ```scene``` is the scene to load data into"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"* ```data``` is the string representation of the file to load"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"* ```rootUrl``` defines the root URL of your assets"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"* ```meshes``` is the list of imported meshes"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"* ```particleSystems``` is the list of imported particle systems"},{"src":"tutorials/How_to_Create_Your_Own_File_Importer","name":"How to Create Your Own File Importer","text":"* ```skeletons``` is the list of imported skeletons"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```javascript"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"// path function"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var pathFunction = function(k) {"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  var path = [];"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  for (var i = 0; i < 60; i++) {"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    var x = i - 30;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    var y = 0;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    var z = k;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    path.push(new BABYLON.Vector3(x, y, z));"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  }"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  return path;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"};"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"// ribbon creation"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var sideO = BABYLON.Mesh.BACKSIDE;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var pathArray = [];"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"for(var i = -20; i < 20; i++) {"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  pathArray.push(pathFunction(i * 2));"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"}"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var mesh = BABYLON.Mesh.CreateRibbon(\"ribbon\", pathArray, false, false, 0, scene, true, sideO);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var MatricesIndicesKind = true;"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    var MatricesWeightsKind = true;"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    for (var i = 0; i != arrayObj.length ; i++) {"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.UVKind]))"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            UVKind = false;"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.UV2Kind]))"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            UV2Kind = false;"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.ColorKind]))"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            ColorKind = false;"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.MatricesIndicesKind]))"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            MatricesIndicesKind = false;"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        if (!arrayObj[i].isVerticesDataPresent([BABYLON.VertexBuffer.MatricesWeightsKind]))"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            MatricesWeightsKind = false;"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    }"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    for (i = 0; i != arrayObj.length ; i++) {"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        var ite = 0;"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        var iter = 0;"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        arrayPos[i] = arrayObj[i].getVerticesData(BABYLON.VertexBuffer.PositionKind);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        arrayNormal[i] = arrayObj[i].getVerticesData(BABYLON.VertexBuffer.NormalKind);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        if (UVKind)"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            arrayUv = arrayUv.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.UVKind));"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        if (UV2Kind)"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"```"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"In this case, the first click will animate the `light.diffuse` property, the second click will set `mesh.material` to false. The third one will start again and will animate the `light.diffuse` property and so on..."},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"Finally, you can add a condition to your actions. In this case, actions are launched when the trigger is fired if the condition is true:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"```javascript"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"var condition1 = new BABYLON.PredicateCondition(sphere.actionManager, function () {"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"    return light1.diffuse.equals(BABYLON.Color3.Red());"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"});"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"sphere.actionManager.registerAction(new BABYLON.InterpolateValueAction(BABYLON.ActionManager.OnPickTrigger, camera, \"alpha\", 0, 500, condition1));"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"```"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"In this example, the `camera.alpha` property will be animated to 0 in 500ms when the user clicks the sphere only if the `light1.diffuse` property is equal to red."},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"# Triggers"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"Currently, 10 different triggers are supported:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"The following list defines triggers associated with meshes:"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"meshTask.onSuccess = function (task) {"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"    task.loadedMeshes[0].position = new BABYLON.Vector3(0, 0, 0);"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"}"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"```"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"You can do the same thing but with text and binary files:"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"```javascript"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"var textTask = assetsManager.addTextFileTask(\"text task\", \"msg.txt\");"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"textTask.onSuccess = function(task) {"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"    console.log(task.text);"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"}"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"var binaryTask = assetsManager.addBinaryFileTask(\"binary task\", \"grass.jpg\");"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"binaryTask.onSuccess = function (task) {"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"    // Do something with task.data"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"}"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"```"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"The mesh must also have additional vertices data:"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"* _Matrices weights_: 4 floats to weight bones matrices (```mesh.setVerticesData(matricesWeights, BABYLON.VertexBuffer.MatricesWeightsKind, false)```)"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"* _Matrices indices_: 4 floats to index bones matrices (```mesh.setVerticesData(floatIndices, BABYLON.VertexBuffer.MatricesIndicesKind, false)```)"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"The final matrix applied to each vertex is computed as follows:"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"```"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"finalMatrix = worldMatrix * (bonesMatrices[index0] * weight0 + bonesMatrices[index1] * weight1 + bonesMatrices[index2] * weight2 + bonesMatrices[index3] * weight3)"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"```"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"On low-end hardware, the maximum bones influences per vertex is reduced to 3."},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"### Loading bones"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"Skeletons and bones can be loaded from .babylon files (FBX and Blender exporter support bones generation)."},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"Here is a sample of how to load a boned mesh and how to launch skeleton animation:"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"```Javascript"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"BABYLON.SceneLoader.ImportMesh(\"him\", \"Scenes/Dude/\", \"Dude.babylon\", scene, function (newMeshes, particleSystems, skeletons) {"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"    var dude = newMeshes[0];"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"| `BABYLON.Engine.ALPHA_ONEONE` | This blend mode is very similar to ALPHA_ADD, except that it is not modulated by alpha value. Used internally for various visual effects. | Blending is **not** modulated by alpha value. |"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"Please note that the blending operations are in fact simple mathematical operations done seperately on R, G and B components of the pixel values, each one comprised between 0 and 1. As such, having a green mesh (R=0, G=1, B=0) set with ALPHA_SUBTRACT drawn over a yellow one (R=1, G=1, B=0) will give off a red value (R=1, G=0, B=0)."},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"# How to Use Blend Modes #"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"Using blend modes is done by manipulating the `alphaMode` property of materials, setting it to one of the constants listed above."},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"**This property will only be used when the rendered mesh is alpha-blended.** This is very important, because since the `alphaMode` property will have absolutely no effect on an opaque mesh, you will need to make sure your mesh is *alpha-blended* to use it."},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"You can force an opaque mesh to be alpha-blended by making it very slightly transparent, like so:"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"```"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"mesh.visibility = 0.9999;"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"```"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"Or you can assign an opacity texture to its material (even if the opacity texture have no alpha channel):"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"```"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```javascript"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var path = bezier2.getPoints();"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var l = bezier2.length();"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"##Cubic Bezier curve"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"http://en.wikipedia.org/wiki/B%C3%A9zier_curve#Higher-order_curves"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"![Wikipedia Cubic Bezier Curve](http://upload.wikimedia.org/wikipedia/commons/d/db/B%C3%A9zier_3_big.gif)"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```javascript"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var bezier3 = BABYLON.Curve3.CreateCubicBezier(origin, control1, control2, destination, nb_of_points)"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* **origin** : _Vector3_ the origin point,"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* **control1** : _Vector3_ the first control point,"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* **control2** : _Vector3_ the second control point,"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* **destination** : _Vector3_ the destination point,"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* **nb_of_points** : _number_ the wanted final curve number of points in the array."},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"This static method returns an instance of _Curve3_.   "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"Just use the Curve3 _getPoints()_ method to fill your array : _getPoints()_ returns an array of successive _Vector3_.    "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"You can then use it for ribbons, tubes, extrusion paths, etc.    "},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"```"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"scene.disableDepthRender();"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"```"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"As you can see, you can use the depth map associated with the DepthRenderer with any materials or post-processes."},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"You can then control if the reflection is applied on the edges or on the center. For instance, if you want the reflection on the edges (by default), you can control it using the color properties:"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"```javascript"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.reflectionFresnelParameters.leftColor = BABYLON.Color3.White();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.reflectionFresnelParameters.rightColor = BABYLON.Color3.Black();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"```"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"![](http://www.babylonjs.com/forumpics/fresnel01.jpg)"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"Conversely, if you only want reflection in the center:"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"```javascript"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.reflectionFresnelParameters.leftColor = BABYLON.Color3.Black();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.reflectionFresnelParameters.rightColor = BABYLON.Color3.White();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"```"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"![](http://www.babylonjs.com/forumpics/fresnel02.jpg)"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"Using Blender, you can create instances of a mesh by just creating a linked object:"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"![](http://www.html5gamedevs.com/uploads/monthly_05_2014/post-7026-0-82151000-1401073383.jpg)"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"# Using 3DS Max to create instances"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"Using 3DS Max, you can create instances of a mesh by just creating a clone instance object with clic right on the object:"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"![](http://www.html5gamedevs.com/uploads/monthly_11_2014/post-5292-0-54659600-1415793353.jpg)"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"## Demo"},{"src":"tutorials/How_to_use_Instances","name":"How to use Instances","text":"http://www.babylonjs.com/?INSTANCES"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"You can remove a LOD level by using ```removeLODLevel```:"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"```javascript"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"knot00.removeLODLevel(knot02);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"knot00.removeLODLevel(null);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"```"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"Try: [LOD playground](http://www.babylonjs-playground.com/#QE7KM)"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"## Using LOD and instances"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"By default, instances will use LOD defined on root mesh. You do not have to specify anything on instances:"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"```javascript"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"var count = 3;"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"var scale = 4;"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"var knot00 = BABYLON.Mesh.CreateTorusKnot(\"knot0\", 0.5, 0.2, 128, 64, 2, 3, scene);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"var knot01 = BABYLON.Mesh.CreateTorusKnot(\"knot1\", 0.5, 0.2, 32, 16, 2, 3, scene);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"var knot02 = BABYLON.Mesh.CreateTorusKnot(\"knot2\", 0.5, 0.2, 24, 12, 2, 3, scene);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"var knot03 = BABYLON.Mesh.CreateTorusKnot(\"knot3\", 0.5, 0.2, 16, 8, 2, 3, scene);"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"```"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"x, y, width, height are all absolute values (between 0 and 1)"},{"src":"tutorials/How_to_use_Multi-Views","name":"How to use Multi-Views","text":"Keep in mind that the canvas is similar to a texture.  Its x/y of 0, 0... is in the lower left corner."},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"To create a flare, you must specify the following parameters:"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"- Size (a floating value between 0 and 1) "},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"- Position (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind the emitter "},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"- Color "},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"- Texture "},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"Babylon.js can also detect occlusions for you. A mesh can occlude the lens flares if the following conditions are met:"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"- has a material"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"- isVisible === true"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"- isEnabled() === true"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"There are also two other methods : one returning the _curve_ which is actually a copy of the initial _Vector3_ array given to create the path3D object and the other one returning the distance of each points from the first curve point (distance = zero) as a simple array of numeric values (the distances)."},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"```javascript"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"var curve = path3d.getCurve();"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"var distances = path3d.getDistances();"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"```"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"In order to avoid memory re-allocation (in the render loop for instance) since the given _points_ array is internally copied, you can update an existing _Path3D_ object with its _update()_ method :"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"```javascript"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"var points1 = [v1, v2, ..., vn];          // array of Vector3"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"var path3d = new BABYLON.Path3D(points1);"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"var points2 = [u1, u2, ..., un];          // another array of Vector3"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"path3D.update(points2);"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"```"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"Tangents, normals and bi-normals are thus recomputed for this new path."},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"If you need to give a fixed orientation to the normal on the first path point, you can pass an extra Vector3 as parameter on creation or update :"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"```javascript"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"var initialVector = new BABYLON.Vector3(0, 1, 0);"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"var otherVector = new BABYLON.Vector3(0, 0, 1);"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"var points = [v1, v2, ..., vn];          // array of Vector3"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"var path3d = new BABYLON.Path3D(points, initialVector);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"The _reusable_ paameter indicates if your postprocess can be reused multiple times on the same camera (default is false)."},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"# Attach postprocess"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"Depending on how you have defined a postprocess, it can be attached one or more times to the same camera. "},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"The same instance can also be attached to multiple cameras."},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"A camera has two methods:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"#### **attachPostProcess**"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"NUMBER function(PostProcess postProcess [,NUMBER atIndice])"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"#### **detachPostProcess**"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"NUMBER function(PostProcess postProcess [,NUMBER[] atIndices])"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"<center>`new BABYLON.PostProcessRenderPipelineManager(),`</center> "},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"| Method | Description |"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|--------|--------|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`PostProcessRenderPipelineManager()`**|Create a new instance of PostProcessRenderPipelineManager.|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`addPipeline(renderPipeline)`**|Add a new pipeline to an instance of PostProcessRenderPipelineManager.|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`attachCamerasToRenderPipeline(renderPipelineName, cameras, unique)`**|Attach a render pipeline to a list(or unique) of cameras|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`detachCamerasFromRenderPipeline(renderPipelineName, cameras)`**|Detach a render pipeline from a list(or unique) of cameras|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`enableEffectInPipeline(renderPipelineName, renderEffectName, cameras)`**|Enable an effect in a pipeline for a list(or unique) of cameras|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`disableEffectInPipeline(renderPipelineName, renderEffectName, cameras)`**|Disable an effect in a pipeline for a list(or unique) of cameras|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`enableDisplayOnlyPass(renderPipelineName, passName, cameras)`**|Enable displaying of a specific pass used in a specific render pipeline, for a list(or unique) of cameras|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`disableDisplayOnlyPass(renderPipelineName, passName, cameras)`**|Disable displaying of a specific pass used in a specific render pipeline, for a list(or unique) of cameras|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`update`**|Update all pipelines.|"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- Every 1, 2, 3, or 4, or more frames to be able to create an animated texture (like fire)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"See more about 'refreshrate' in the Custom Procedural Textures section... far below."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"# Procedural Textures in Babylon.js #"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"**Babylon.js** offers you an easy out-of-the-box way to use this kind of texture. The engine itself provides you with standard default textures that you can use right now. It also gives you the ability to create custom procedural textures and package them in a simple way."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"## Using Standard Procedural Textures ##"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"Babylon.js has a number of pre-built procedural textures that are very easy to use. Applying a procedural texture is just the same as using a classic one. Let’s start with a simple mesh (a cylinder in this case) and attach it to your scene:"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```javascript"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    var cylinder = BABYLON.Mesh.CreateCylinder(\"mycylinder\", 7, 2, 2, 12, 1, scene);"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"Then, you need to create a StandardMaterial:"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"As you can see, you can provide success/fail callbacks and a set of options."},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"A set of options contains a list of optimization to apply in a specific order. As soon as the target FPS is reached, the SceneOptimizer stops. There are different layers (or passes) that are applied one after another. The SceneOptimizer pauses between each layer to ensure a stable FPS, for measuring."},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"By default, there are 3 sets available:"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"```javascript"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"BABYLON.SceneOptimizerOptions.LowDegradationAllowed()"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"BABYLON.SceneOptimizerOptions.ModerateDegradationAllowed()"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"BABYLON.SceneOptimizerOptions.HighDegradationAllowed()"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"```"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"All these sets return a ```BABYLON.SceneOptimizerOptions``` object configured with progressive degradations."},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"Here are the properties available on a ```BABYLON.SceneOptimizerOptions``` object:"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"* targetFrameRate: a number defining the FPS you want to achieve (60 by default)"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"* optimizations: an array of ```BABYLON.SceneOptimization``` objects."},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"* trackerDuration: time in milliseconds between passes (2000 by default)"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"SceneOptimizer comes with some out-of-the-box optimizations:"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"### Video"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"Here is a 1 minute video demonstrating how it works:"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"[Virtual Joysticks Camera demo in video](https://www.youtube.com/watch?v=53Piiy71lB0)"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"![Screenshot of the Virtual Joysticks Camera in action on Espilit](http://david.blob.core.windows.net/babylonjs/VJCBabylon.jpg)"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"### Complete sample"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"Here is a complete sample that loads the Espilit demo and switches the default camera to a virtual joysticks camera:"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"```javascript"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"document.addEventListener(\"DOMContentLoaded\", startGame, false);"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"function startGame() {"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;if (BABYLON.Engine.isSupported()) {"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; var canvas = document.getElementById(\"renderCanvas\");"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"A Simplification-Settings object has two parameters: "},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"1. quality - a number between 0.0 and 1.0, defining the percentage of the decimation (1 being 100%) "},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"2. distance - the distance from the object to which this LOD mesh will be added to. "},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"3. (since 2.1) optimizeMesh - should the mesh be optimized (optional, defaults to false). More about optimization later."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"A simple example for an array of settings would be:"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"<pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"[{ quality: 0.9, distance: 25, optimizeMesh:true },"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":" { quality: 0.3, distance: 50, optimizeMesh:true }]"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"</pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"For the typescript users and the \"new\" lovers exists a SimplificationSettings class. so this can also be done:"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"<pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"var settings : Array<ISimplificationSettings> = []; //in JS: var settings = new Array();"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"settings.push(new BABYLON.SimplificationSettings(0.8, 60));"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"settings.push(new BABYLON.SimplificationSettings(0.4, 150));"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"![Topic with tags](http://pix.keuse.fr/images/topic.jpg)"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"Thus, if you need information about, let's say, meshes, you can search for topics having \"mesh\" as a word in those topics, BUT you could also search for \"mesh\" as a tag of the topic. Indeed, maybe the word is never used in the topic (maybe it's only used, or not, in the title) but the author can choose to add it as a tag in the aim to categorize his/her topic."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"Tags can be used to categorize/group things."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"Here the first search results:"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"![Search results for \"mesh\" tag](http://pix.keuse.fr/images/meshtag.jpg)"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"### CSS classes"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"OK...? What's the link with tags? Why are we about to talk about CSS classes?"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"Because CSS classes are great and Tags in Babylon.js can be considered similar, in principle, to CSS classes. So let's talk about them."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"CSS stands for Cascading Style Sheets. It's used to define how to display HTML elements."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"CSS classes are added to HTML elements (by writing them directly in the HTML code or by adding them via javascript) as a value of the ```class``` attribute of the corresponding HTML elements."},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"var Button = new BABYLON.Mesh(...);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"Button.layerMask = 0x10000000;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"```&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"##Lights##"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"Unless the material for the meshes for the 2nd camera is purely emissive, this still leaves any light for the button shining on all the other meshes, and lights of the scene shining on the button.&nbsp; To keep scene lights from shining on the button, loop through the existing lights, and set the excludeWithLayerMask value:"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"```javascript"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"for(var i = scene.lights.length - 1; i >= 0; i--){"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;scene.lights[i].excludeWithLayerMask = 0x10000000;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"}"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"```&nbsp; "},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"Then make the \"button\" light:"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"```javascript"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"var light = new BABYLON.Light(...);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"light.includeOnlyWithLayerMask = 0x10000000;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"```"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"Finally, if there may be more lights generated later, you can register a call-back whenever a light is added:"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"```javascript"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"scene.onNewLightAdded = onNewLight;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"```&nbsp; "},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"This could be:"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"```javascript"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"onNewLight = function (newLight, positionInArray, scene) {"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;newLight.excludeWithLayerMask = 0x10000000;"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"```javascript"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"octree.dynamicContent.push(mesh)"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"```"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"In this case, the octree will always select the dynamic mesh."},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"# Optimizing collisions and picking"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"Computing collisions or clicking-on complex meshes (more than 10k vertices for instance) can be really slow. You can speed things up by subdividing your mesh into submeshes using ```mesh.subdivide(x)``` where x is the number of submeshes you want."},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"Then you can optimize the selection of submeshes for collisions or picking by creating an octree on the mesh for its submeshes:"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"```javascript"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"mesh.createOrUpdateSubmeshesOctree(capacity, maxDepth)"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"```"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"You can even specify the usage of your octree independently:"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"* ```mesh.useOctreeForCollisions```"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"* ```mesh.useOctreeForPicking```"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"Before actually drawing meshes on the screen, BabylonJS puts them in the following categories, which are presented in the order in which they are drawn:"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"1. **Opaque meshes**"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"2. **Alpha tested meshes**"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"3. **Alpha blended meshes**, sorted by depth (= distance to camera)"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"4. **Sprites** (handled by SpriteManager)"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"5. **Particles** (handled by ParticleSystem)"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"Categories 4 and 5 are self-explanatory. Note that they are always drawn after all the other meshes, and that they do not use any depth buffer that may have been previously created. These simply cannot be hidden by regular meshes."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"## Rendering Groups"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":" * Display an overlay on meshes"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":" * Enable/disable lights"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":" * Switch to camera"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"* Generate user marks (F12) check-box can be used with F12 tools to emit performance counters to UI Responsiveness profiler"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"* Rendering mode can be used to switch between solid/wireframe/point modes"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"* Texture channels can be used to turn specific textures off"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"* Options can be used to turn specific engine options off"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"### Meshes tree"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"The meshes tree allows you to enable/disable meshes by name and could be used to determine how many vertices are contained in a specific mesh."},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"### Statistics"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"The statistics panel gives you a global view of how specific engine parts are performing alongside WebGL info and capabilities."},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"**Note about active vertices**: Active vertices are the number of vertices processed by the GPU. For instance if you have a quad with 4 vertices and 2 faces, the total vertices will be 6 because 2 faces of 3 vertices each are sent to the GPU even if two vertices are shared."},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"### Logs"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"You can use the Logs panel to get log/warn/error message from the engine."},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"## Controlling the debug layer by code "},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"The debug layer can be used without the UI as well. To do so, you just have to call it like this:"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"  - grain effect (noise or custom texture) "},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"  - darken out-of-focus objects "},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"## Usage ##"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"To use it, you must first define a set of parameters that will impact the actual post-processing performed. This is done by defining an object and setting the desired properties:"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"```"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"var parameters = {"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"  edge_blur: 1.0,"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"  chromatic_aberration: 1.0,"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"  distortion: 1.0,"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"  // etc."},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"};"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"```"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"And then simply create the object with the parameters you've defined earlier, like so:"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"```"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"### Gaussian Blur ###"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"The Gaussian Blur equation used:"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"![Elements](http://homepages.inf.ed.ac.uk/rbf/HIPR2/eqns/eqngaus1.gif)"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```hdr.gaussCoeff``` controls the overall effect: ```hdr.gaussCoeff * theEffect```. Default 0.3"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":" "},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```hdr.gaussMean``` is used to ajust the ```x``` value:  ```x - hdr.gaussMean```. Default 1.0"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```hdr.gaussStandDev``` controls the gaussian blur standard deviation (sigma). Default 0.8"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"### Bright Pass ###"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"The bright pass is rendered before the gaussian blur pass. It is used to compute the minimum light needed to compute the HDR effect."},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```hdr.brightThreshold``` default value is 0.8"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"### HDR ###"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"If you want to attach manually the rendering pipeline, just use the scene rendering pipeline manager like:"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"```"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"var ssao = new BABYLON.SSAORenderingPipeline('ssaopipeline', scene, 0.75);"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(\"ssaopipeline\", cameras);"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"```"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"**Warning: To save your performances, you should compute the SSAO/blurH/blurV with a lower ratio than 1.0 **"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"If you want to detach and destroy the rendering pipeline, you can just call ```dispose()``` method"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"```"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"ssao.dispose();"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"```"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"You can see the SSAO post-process output by detaching the combine post-process like:"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"```"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"scene.postProcessRenderPipelineManager.disableEffectInPipeline(\"ssaopipeline\", ssao.SSAOCombineRenderEffect, cameras);"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"```"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"**Note: SSAO uses the depth map renderer and activates it by default. You can disable the depth map renderer by passing \"true\" as argument in the dispose() method **"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"The lightSourceMesh is a mesh that will contain the light colour, typically a billboard with a diffuse texture.  If your light source is coming from the floor, you can use the floor/ground mesh to compute the light scattering effect."},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"**Note: The light source mesh can be null. This causes a default lightSourceMesh to be created for you as a billboard **"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"To create the default mesh before the post-process, there is a static method that returns a billboard as default:"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"var defaultMesh = BABYLON.VolumetricLightScatteringPostProcess.CreateDefaultMesh(\"meshName\", scene);"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"You can access and modify the mesh using:"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"var mesh = vls.mesh;"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"By default, the post-process is computing the light scattering using the internal mesh position.  You can modify and set a custom position using (typically for the floor as the internal mesh):"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"vls.useCustomLightPosition = true;"},{"src":"tutorials/Adding_Your_Own_Physics_Engine_Plugin_to_Babylon.js","name":"Adding Your Own Physics Engine Plugin to Babylon.js","text":"The first parameter can be used to define gravity (which is (0, -9.82, 0) by default)."},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"var rot = BABYLON.Vector.RotationFromAxis(axis1, axis2, axis3);"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"mesh.rotation = rot;"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"where _axis1_, _axis2_ and _axis3_ are three left-handed oriented orthogonal vectors. "},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"With this code, the mesh will be aligned thus : "},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"* _axis1_ will become x axis in its local system"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"* _axis2_ will become y axis in its local system"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"* _axis3_ will become z axis in its local system"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"example : http://www.babylonjs-playground.com/#VYM1E#5 "},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"The textured plane mesh is currently aligned with the axis between spheres (axis1) and \"faces\" the camera : axis2 = camera.position "},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"#Baking Transform#"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"In certain situations you might be interested in applying a transform (position, rotation, scale) directly to the mesh vertices, instead of saving it as a property of the mesh. This is called baking, and can be useful in the following situations:"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"- building a set of static geometry"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"- randomizing a series of mesh copies"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"- mirroring a mesh along an axis"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"- etc."},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"Two methods can be used for this process:"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"`bakeTransformIntoVertices(transform: Matrix)`: this will bake the provided matrix directly into the mesh vertices. For example:"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"// this will permanently mirror the mesh along the Y axis, while leaving the transform properties untouched"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"var matrix = BABYLON.Matrix.Scaling(1, -1, 1);"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"mesh.bakeTransformIntoVertices(matrix);"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"`bakeCurrentTransformIntoVertices()`: this will bake the current transform properties of the mesh into the vertices, and clear those properties. This includes _rotation_, _translation_ and _scaling_."},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"Note: scaling a mesh will often give unrealistic results for lighting, since the normals will simply be scaled along and not properly recomputed. This is illustrated in the following picture: "},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"![Normals illustration](http://i.imgur.com/18wDAH7.png) "},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"_In the above picture, you can see an untransformed mesh on the left, the same mesh scaled along the X axis in the middle and on the right, the mesh with its normals correctly recomputed._"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"example : http://www.babylonjs-playground.com/#1MSEBT "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"The important key to notice is that we set the **_updatable_** parameter to **_true_** in the _CreateRibbon()_ method : the one just between the _scene_ and the _sideO_ parameters.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"We can now imagine we want to change this existing ribbon _y_ coordinates according to a sinus function. So for each path in the existing _pathArray_ array we just change _Vector3_ coordinates.    "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"Note we don't create new paths or a new _pathArray_ array. We just access with indexes to every element and just change values.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```javascript"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var updatePath = function(path) {"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  for (var i = 0; i < path.length; i++) {"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    var x = path[i].x;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    var z = path[i].z;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    var y = 20 * Math.sin(i/ 10);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    path[i].x = x;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    path[i].y = y;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    path[i].z = z;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  }"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"};"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"// update pathArray"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"for(var p = 0; p < pathArray.length; p++) {"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  updatePath(pathArray[p]);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"}"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"The way to update then our existing mesh is quite simple : let's just re-use the _CreateRibbon()_ method and give it this mesh as last parameter with our modified _pathArray_.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```javascript"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"mesh = BABYLON.Mesh.CreateRibbon(null, pathArray, null, null, null, null, null, null, mesh);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"The other parameters than _pathArray_ and _mesh_ are just ignored when updating, so they can be set to _null_ for better understanding.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"The _CreateRibbon()_ method thus updates the given ribbon and returns it.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"example : http://www.babylonjs-playground.com/#1MSEBT#1   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"Well, we just updated our ribbon's shape once for now.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"If we now want its shape to evolve dynamically, we just have to set the _pathArray_ computation (fixed to change with an extra _k_ parameter) and the _CreateRibbon()_ call inside the render loop.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```javascript"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            arrayUv2 = arrayUv2.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.UV2Kind));"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        if (ColorKind)"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            arrayColor = arrayColor.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.ColorKind));"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        if (MatricesIndicesKind)"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            arrayMatricesIndices = arrayMatricesIndices.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.MatricesIndicesKind));"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        if (MatricesWeightsKind)"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            arrayMatricesWeights = arrayMatricesWeights.concat(arrayObj[i].getVerticesData(BABYLON.VertexBuffer.MatricesWeightsKind));"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        var maxValue = savedPosition.length / 3;"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        arrayObj[i].computeWorldMatrix(true);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        var worldMatrix = arrayObj[i].getWorldMatrix();"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        for (var ite = 0 ; ite != arrayPos[i].length; ite += 3) {"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            var vertex = new BABYLON.Vector3.TransformCoordinates(new BABYLON.Vector3(arrayPos[i][ite], arrayPos[i][ite + 1], arrayPos[i][ite + 2]), worldMatrix);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            savedPosition.push(vertex.x);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            savedPosition.push(vertex.y);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            savedPosition.push(vertex.z);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        }"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        for (var iter = 0 ; iter != arrayNormal[i].length; iter += 3) {"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            var vertex = new BABYLON.Vector3.TransformNormal(new BABYLON.Vector3(arrayNormal[i][iter], arrayNormal[i][iter + 1], arrayNormal[i][iter + 2]), worldMatrix);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            savedNormal.push(vertex.x);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            savedNormal.push(vertex.y);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            savedNormal.push(vertex.z);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        }"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        var tmp = arrayObj[i].getIndices();"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        for (it = 0 ; it != tmp.length; it++) {"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"            arrayIndice.push(tmp[it] + maxValue);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        }"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        arrayIndice = arrayIndice.concat(tmp);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        arrayObj[i].dispose(false);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    }"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    newMesh.setVerticesData(BABYLON.VertexBuffer.PositionKind, savedPosition, false);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    newMesh.setVerticesData(BABYLON.VertexBuffer.NormalKind, savedNormal, false);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    if (arrayUv.length > 0)"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        newMesh.setVerticesData(BABYLON.VertexBuffer.UVKind, arrayUv, false);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    if (arrayUv2.length > 0)"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        newMesh.setVerticesData(BABYLON.VertexBuffer.UV2Kind, arrayUv, false);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    if (arrayColor.length > 0)"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        newMesh.setVerticesData(BABYLON.VertexBuffer.ColorKind, arrayUv, false);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    if (arrayMatricesIndices.length > 0)"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        newMesh.setVerticesData(BABYLON.VertexBuffer.MatricesIndicesKind, arrayUv, false);"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.ActionManager.NothingTrigger`: Never raised. Used for sub-actions with `action.then` function"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.ActionManager.OnPickTrigger`: Raised when the user touches/clicks on a mesh"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.ActionManager.OnLeftPickTrigger`: Raised when the user touches/clicks on a mesh with left button"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.ActionManager.OnRightPickTrigger`: Raised when the user touches/clicks on a mesh with right button"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.ActionManager.OnCenterPickTrigger`: Raised when the user touches/clicks on a mesh with center button"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.ActionManager.OnPointerOverTrigger`: Raised when the pointer is over a mesh. Raised just once"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.ActionManager.OnPointerOutTrigger`: Raised when the pointer is no more over a mesh. Raised just once"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.ActionManager.OnIntersectionEnterTrigger`: Raised when the mesh is in intersection with another mesh. Raised just once"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.ActionManager.OnIntersectionExitTrigger`: Raised when the mesh is no more in intersection with another mesh. Raised just once"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"For intersection triggers, you have to specify the \"other\" mesh with the following code:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"```javascript"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"mesh.actionManager.registerAction("},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"new BABYLON.SetValueAction({ trigger: BABYLON.ActionManager.OnIntersectionEnterTrigger, parameter: otherMesh }, "},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"mesh, \"scaling\", new BABYLON.Vector3(1.2, 1.2, 1.2)));"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"```"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"You can as well define if you want to use precise intersections:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"```javascript"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"mesh.actionManager.registerAction("},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"new BABYLON.SetValueAction({ trigger: BABYLON.ActionManager.OnIntersectionEnterTrigger, parameter: { mesh:otherMesh, usePreciseIntersection: true} }, "},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"mesh, \"scaling\", new BABYLON.Vector3(1.2, 1.2, 1.2)));"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"```"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"Images are also supported through imageTask:"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"```javascript"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"var imageTask = assetsManager.addImageTask(\"image task\", \"img.jpg\");"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"imageTask.onSuccess = function(task) {"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"    console.log(task.image.width);"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"}"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"```"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"Textures can also be loaded, through textureTask:"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"```javascript"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"var textureTask = assetsManager.addTextureTask(\"image task\", \"img.jpg\");"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"textureTask.onSuccess = function(task) {"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"    material.diffuseTexture = task.texture;"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"}"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"```"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"The manager itself provides three callbacks:"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"* onFinish"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"* onTaskSuccess"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"* onTaskError"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"```javascript"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"assetsManager.onFinish = function (tasks) {"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"    engine.runRenderLoop(function () {"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"        scene.render();"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"    }),"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"};"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"```"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"Finally, to launch all the tasks, you have to call ```assetsManager.load();```"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"    dude.rotation.y = Math.PI;"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"    dude.position = new BABYLON.Vector3(0, 0, -80);"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"    scene.beginAnimation(skeletons[0], 0, 100, true, 1.0);"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"}),"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"```"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"A complete running example can be found [here](http://www.babylonjs.com/index.html?BONES)"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"### Cloning bones"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"Bones and skeletons can be cloned (This is the case with the rabbits in the previous link)."},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"Here is a sample of how to load and clone a mesh and its skeleton:"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"```Javascript"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"BABYLON.SceneLoader.ImportMesh(\"Rabbit\", \"Scenes/Rabbit/\", \"Rabbit.babylon\", scene, function (newMeshes, particleSystems, skeletons) {"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        var rabbit = newMeshes[1];"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        rabbit.scaling = new BABYLON.Vector3(0.4, 0.4, 0.4);"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        shadowGenerator.getShadowMap().renderList.push(rabbit);"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        var rabbit2 = rabbit.clone(\"rabbit2\");"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        var rabbit3 = rabbit.clone(\"rabbit2\");"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        rabbit2.position = new BABYLON.Vector3(-50, 0, -20);"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        rabbit2.skeleton = rabbit.skeleton.clone(\"clonedSkeleton\");"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        rabbit3.position = new BABYLON.Vector3(50, 0, -20);"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        rabbit3.skeleton = rabbit.skeleton.clone(\"clonedSkeleton2\");"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        scene.beginAnimation(skeletons[0], 0, 100, true, 0.8);"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        scene.beginAnimation(rabbit2.skeleton, 73, 100, true, 0.8);"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":" material_base.opacityTexture = material_base.diffuseTexture;"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"```"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"To know more about alpha-blending and how alpha-blended meshes are handled, please refer to this article: http://doc.babylonjs.com/page.php?p=25100"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"# Examples #"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"Here is a screenshot showing the previously mentioned blend modes:"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"![Available Blend Modes](http://i.imgur.com/2KTXUjT.png)"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"The _length()_ method returns the curve length.    "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```javascript"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var path = bezier3.getPoints();"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var l = bezier3.length();"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"Playground example : http://www.babylonjs-playground.com/#1PSZDF#2"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"Read from line 50"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"##Hermite spline"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"http://en.wikipedia.org/wiki/Cubic_Hermite_spline"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"![EScience Hermite](http://escience.anu.edu.au/lecture/cg/Spline/Image/HermiteSpec.gif)"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```javascript"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var hermite = BABYLON.Curve3.CreateHermiteSpline(p1, t1, p2, t2, nbPoints);"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* **p1** : _Vector3_ the origin point,"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* **t1** : _Vector3_ the origin tangent vector,"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* **p2** : _Vector3_ the destination point,"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* **t2** : _Vector3_ the destination tangent vector,"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* **nbPoints** : _number_ the wanted final curve number of points in the array."},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"This static method returns an instance of _Curve3_.    "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"Just use the Curve3 _getPoints()_ method to fill your array : _getPoints()_ returns an array of successive _Vector3_.    "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"You can then use it for ribbons, tubes, extrusion paths, etc.    "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"The _length()_ method returns the curve length.   "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```javascript"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var path = hermite.getPoints();"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var l = hermite.length();"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"##Curve3 object"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"You can also instantiate your own Curve3 object from a simple array of successive Vector3.   "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"Why would you do this ?   "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"Because you can then use the _continue()_ method to stick together many curves whatever their initial origin.   "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"Let's imagine you've got an array of your own filled Vector3 along a simple sinus curve.  "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```javascript"},{"src":"tutorials/How_to_use_DepthRenderer_to_get_depth_values","name":"How to use DepthRenderer to get depth values","text":"**Note: By default, generated texture uses float components thanks to *WebGL OES_texture_float extension*. If this extension is not supported, Babylon.js reverts back to byte component which means less precision for depth values.**"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"By using ```bias``` and ```power``` properties, you can control how the fresnel is computed along the surface of the object according to this formula:"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"_finalFresnelTerm = pow(**bias** + fresnelTerm, **power**)_"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"By default, bias == 0 and power == 1"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"For instance, the following code:"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"```javascript"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.reflectionFresnelParameters = new BABYLON.FresnelParameters();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.reflectionFresnelParameters.leftColor = BABYLON.Color3.Black();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.reflectionFresnelParameters.rightColor = BABYLON.Color3.White();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.reflectionFresnelParameters.power = 4;"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"```"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"...generates the following rendering:"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"![](http://www.babylonjs.com/forumpics/fresnel03.jpg)"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"## How to use it"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"A _FresnelParameter_ is defined by the following properties:"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"* ```isEnabled``` to activate or deactivate fresnel effect"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"* leftColor to define color used on edges"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"* rightColor to define color used on center"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"* bias to define bias applied to computed fresnel term"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"* power to compute exponent applied to fresnel term"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"Here is a simple example:"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"```javascript"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"knot00.setEnabled(false);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"knot00.addLODLevel(15, knot01);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"knot00.addLODLevel(30, knot02);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"knot00.addLODLevel(45, knot03);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"knot00.addLODLevel(55, null);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"for (var x = -count; x <= count; x++) {"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"    for (var y = -count; y <= count; y++) {"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"        for (var z = 5; z < 10; z++) {"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"            var knot = knot00.createInstance(\"knotI\"),"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"            knot.position = new BABYLON.Vector3(x * scale, y * scale, z * scale);"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"        }"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"    }"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"}"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"```"},{"src":"tutorials/How_to_use_LOD","name":"How to use LOD","text":"Try: [LOD and instances playground](http://www.babylonjs-playground.com/#14ESWC)"},{"src":"tutorials/How_to_use_Lens_Flares","name":"How to use Lens Flares","text":"- checkCollisions === true"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"// do stuff ..."},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"path3d.update(points, otherVector);"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"```"},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"The first normal will then be the projection of your parameter vector onto the plane orthogonal to the first tangent at the first point position. "},{"src":"tutorials/How_to_use_Path3D","name":"How to use Path3D","text":"In a simplest way, this is a mean to have a \"vertical\" (or quite vertical, depending on the path) first normal for instance."},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"# Builtin postprocesses"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"Babylon.js comes with a set of ready to use postprocesses."},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* Pass: Do nothing. Used to copy the framebuffer into a postprocess for further use"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var postProcess = new BABYLON.PassPostProcess(\"Scene copy\", 1.0, null, null, engine, true);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* Black and white: apply a black and white effect:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var postProcess = new BABYLON.BlackAndWhitePostProcess(\"bandw\", 1.0, null, null, engine, true);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* Blur: apply a directional blur:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var postProcess = new BABYLON.BlurPostProcess(\"Horizontal blur\", new BABYLON.Vector2(1.0, 0), blurWidth, 0.25, null, null, engine, true);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* Convolution: apply a kernel matrix to every pixel:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var sepiaKernelMatrix = BABYLON.Matrix.FromValues("},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"                    0.393, 0.349, 0.272, 0,"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"                    0.769, 0.686, 0.534, 0,"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"                    0.189, 0.168, 0.131, 0,"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"                    0, 0, 0, 0"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"                );"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var postProcess = new BABYLON.ConvolutionPostProcess(\"Sepia\", sepiaKernelMatrix, 1.0, null, null, engine, true);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* FXAA: apply a full screen antialiasing filter:"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"### BABYLON.PostProcessRenderPipeline"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"<center>`new BABYLON.PostProcessRenderPipeline(BABYLON.Engine engine, string name),`</center> "},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"| Method | Description |"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|--------|--------|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`PostProcessRenderPipeline(engine, name)`**|Create a new instance of PostProcessRenderPipeline.|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`addEffect(renderEffect)`**|Add a new render effect to the pipeline.|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"### BABYLON.PostProcessRenderEffect"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"`new BABYLON.PostProcessRenderEffect(BABYLON.Engine engine, string name, string postProcessType, number ratio, BABYLON.Texture.SAMPLING_MODE samplingMode, bool singleInstance);`"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"| Method | Description |"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|--------|--------|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`PostProcessRenderEffect(engine, name, createPostProcessFunction, singleInstance)`**|Create a new instance of PostProcessRenderEffect. The createPostProcessFunction have to return a nes instance of the postprocess you want to use|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`addPass(renderPass)`**|Add a new pass to the effect.|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`addRenderEffectAsPass(renderEffect)`**|Add a render effect as a pass.|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`removePass(renderPass)`**|Delete a pass from the effect.|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"| Attribut | Description |"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|--------|--------|"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```javascript"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    var material = new BABYLON.StandardMaterial(\"material\", scene);"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"Now, create a WoodProceduralTexture object for which you need to pass a name, the size of the generated texture and the scene."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```javascript"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    var texture = new BABYLON.WoodProceduralTexture(\"texture\", 1024, scene);"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"You are almost set! All you need to do now is to associate the texture to the material as a diffuseTexture, for instance, (or emissiveTexture, specularTexture, any other) and then apply the material to the mesh."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```javascript"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    material.diffuseTexture = texture;"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    cylinder.material = material;"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"You can optionally change the values of special default properties.  Here is an example of setting two properties for the WoodProceduralTexture:"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```javascript"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    texture.woodColor = new BABYLON.Color3(0.49, 0.25, 0);"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    texture.ampScale = new BABYLON.Vector2(1.0, 1.0);"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"* ```BABYLON.TextureOptimization(priority, maximumSize)```: This optimization tries to reduce the size of render textures."},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"* ```BABYLON.HardwareScalingOptimization(priority, maximumScale)```: This optimization increments the value of hardware scaling. This is a really aggressive optimization."},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"* ```BABYLON.ShadowsOptimization(priority)```: This optimization disables shadows."},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"* ```BABYLON.PostProcessesOptimization(priority)```: This optimization disables post-processes."},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"* ```BABYLON.LensFlaresOptimization(priority)```: This optimization disables lens flares."},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"* ```BABYLON.ParticlesOptimization(priority)```: This optimization disables particles."},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"* ```BABYLON.RenderTargetsOptimization(priority)```: This optimization disables render targets."},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"Based on these optimizations, the basic sets are configured like this:"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"* BABYLON.SceneOptimizerOptions.LowDegradationAllowed():"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":" * Level 0: ShadowsOptimization and LensFlaresOptimization"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":" * Level 1: PostProcessesOptimization and ParticlesOptimization"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":" * Level 2: TextureOptimization(2, 1024)"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"* BABYLON.SceneOptimizerOptions.ModerateDegradationAllowed():"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":" * Level 0: ShadowsOptimization and LensFlaresOptimization"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":" * Level 1: PostProcessesOptimization and ParticlesOptimization"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":" * Level 2: TextureOptimization(2, 512)"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":" * Level 3: RenderTargetsOptimization"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":" * Level 4: HardwareScalingOptimization(4, 2)"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"* BABYLON.SceneOptimizerOptions.HighDegradationAllowed():"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":" * Level 0: ShadowsOptimization and LensFlaresOptimization"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":" * Level 1: PostProcessesOptimization and ParticlesOptimization"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":" * Level 2: TextureOptimization(2, 256)"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":" * Level 3: RenderTargetsOptimization"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":" * Level 4: HardwareScalingOptimization(4, 4)"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"# Advanced usage"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"You can create your own set of options with the following code:"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"```javascript"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"var result = new BABYLON.SceneOptimizerOptions(60, 2000);"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"var priority = 0;"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"result.optimizations.push(new BABYLON.ShadowsOptimization(priority));"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; var engine = new BABYLON.Engine(canvas, true);"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; BABYLON.SceneLoader.Load(\"Espilit/\", \"Espilit.babylon\", engine, function (newScene) {"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; var VJC = new BABYLON.VirtualJoysticksCamera(\"VJC\", newScene.activeCamera.position, newScene);"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; VJC.rotation = newScene.activeCamera.rotation;"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; VJC.checkCollisions = newScene.activeCamera.checkCollisions;"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; VJC.applyGravity = newScene.activeCamera.applyGravity;"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; // Wait for textures and shaders to be ready"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; newScene.executeWhenReady(function () {"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;newScene.activeCamera = VJC;"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// Attach camera to canvas inputs"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;newScene.activeCamera.attachControl(canvas);"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;// Once the scene is loaded, just register a render loop to render it"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;engine.runRenderLoop(function () {"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; newScene.render();"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;}),"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; }),"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; }, function (progress) {"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; // To do: give progress feedback to user"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; }),"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"&nbsp;&nbsp; &nbsp;}"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"}"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"```"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"### If you’re switching back, don’t forget to dispose!"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"</pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"* **parallel processing"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"The code runs async. This flag sets the order of processing of each level. If set to true, all will run together. This will use more RAM (for a certain period of time) but will run quicker in general. There is a chance however, that the FPS will be reduces to an unaccepted level due to many parallel calculations between frames. Setting the flag to false will process one setting after the other. This will use only one single simplification object and will use less RAM. it can, however, take a little longer."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"* **type**"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"To allow further types of simplification to be implemented (will be explained later, for those who are interested) the type of simplification should be stated. There is only one kind at the moment, BABYLON.SimplificationType.QUADRATIC. This is also the default value, if type is undefined."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"* **success callback**"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"Since this is an asynchronous function (which returns immediately) a callback is required in order to run code after the simplification process is over."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"This function will be called after the Auto-LOD process is successfully done. Not sure in which cases you will require that, but just in case you will - this is how you do it :-)"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"* **usage example**"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"<pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"BABYLON.SceneLoader.ImportMesh(\"\", \"./\", \"DanceMoves.babylon\", scene, (newMeshes, particleSystems, skeletons) => {"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"    newMeshes[1].simplify([{ quality: 0.9, distance: 25 }, { quality: 0.3, distance: 50 }], "},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"        false, BABYLON.SimplificationType.QUADRATIC, function() {"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"             alert(\"LOD finisehd, let's have a beer!\");"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"        });"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"});"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"</pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"##Demos "},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"Zoom in and out to see the effect, watch the number of active vertices closely."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"HTML elements can have several CSS classes in their ```class``` attribute and the same CSS class can be used on different HTML elements. CSS classes, just like tags on forums, can then be used to categorize HTML elements. Thus, a same style (background, font, color...) can easily be applied to a group of HTML elements identified by a CSS class (or a list of CSS classes)."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"_Style for all HTML elements of the page having the \"center\" class on them (to find elements with a specific class, write a period character, followed by the name of the class)_"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```css"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":".center"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"{"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"    text-align: center;"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"    color: red;"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"}"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"Thanks to javascript, you can even retrieve all these elements and then do further javascript operations on them (jQuery plugins largely use CSS classes)."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```javascript"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"var elements = document.getElementsByClassName(\".center\");"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"The above directive would gather a collection of all HTML elements that use the .center class."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"Here we are! **Tags in babylon.js can be used to categorize/group elements, and helper functions are provided to retrieve/gather tagged elements.**"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"## Integration to babylon.js"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"Tags were integrated into babylon.js on April 7, 2014. [Pull request](https://github.com/BabylonJS/Babylon.js/pull/170#event-109351015)"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"There was a [discussion](http://www.html5gamedevs.com/topic/4961-user-data-in-mesh-object/?p=30458) about adding this feature on the forum. The goal was to be able to retrieve meshes."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"### Pure javascript"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"};"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"```&nbsp; "},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"##Gun Sight Example##"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"Here is a simple example of using a 2nd orthographic camera which shows a gun sight.&nbsp; To keep it simple, emissive material was used to avoid lighting it.&nbsp; Just copy and paste it into any scene, then call it.&nbsp; The `layerMask` chosen also allows Dialog extension to inter-operate.&nbsp; Perhaps these could be combined to do a heads-up tank sight with range finder.&nbsp; "},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"A commercial quality implementation would probably not use `CreateBox()`, since it creates depth faces that cannot be seen straight-on anyway.&nbsp; It should also take into account a window size change, unless it is a tablet app."},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"```javascript"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"function addGunSight(scene){"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;if (scene.activeCameras.length === 0){"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; scene.activeCameras.push(scene.activeCamera);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;}&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; "},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;var secondCamera = new BABYLON.FreeCamera(\"GunSightCamera\", new BABYLON.Vector3(0, 0, -50), scene);&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp; "},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;secondCamera.mode = BABYLON.Camera.ORTHOGRAPHIC_CAMERA;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;secondCamera.layerMask = 0x20000000;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;scene.activeCameras.push(secondCamera);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;meshes = [];"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;var h = window.innerHeight;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;var w = window.innerWidth;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;var y = BABYLON.Mesh.CreateBox(\"y\", h * .2, scene);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;y.scaling = new BABYLON.Vector3(0.05, 1, 1);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;y.position = new BABYLON.Vector3(0, 0, 0);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;meshes.push(y);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;var x = BABYLON.Mesh.CreateBox(\"x\", h * .2, scene);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;x.scaling = new BABYLON.Vector3(1, 0.05, 1);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;x.position = new BABYLON.Vector3(0, 0, 0);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;meshes.push(x);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; "},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;var lineTop = BABYLON.Mesh.CreateBox(\"lineTop\", w * .8, scene);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;lineTop.scaling = new BABYLON.Vector3(1, 0.005, 1);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;lineTop.position = new BABYLON.Vector3(0, h * 0.5, 0);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;meshes.push(lineTop);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;var lineBottom = BABYLON.Mesh.CreateBox(\"lineBottom\", w * .8, scene);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;lineBottom.scaling = new BABYLON.Vector3(1, 0.005, 1);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;lineBottom.position = new BABYLON.Vector3(0, h * -0.5, 0);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;meshes.push(lineBottom);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;var lineLeft = BABYLON.Mesh.CreateBox(\"lineLeft\", h, scene);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;lineLeft.scaling = new BABYLON.Vector3(0.010, 1,&nbsp; 1);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;lineLeft.position = new BABYLON.Vector3(w * -.4, 0, 0);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;meshes.push(lineLeft);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;var lineRight = BABYLON.Mesh.CreateBox(\"lineRight\", h, scene);"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"* ```mesh.useOctreeForRenderingSelection``` : Octree for submeshes can even be used during mesh selection based on camera field of view. Once a mesh is selected by the camera, if the mesh has submeshes, the camera has to select which one is visible. In this case, having an octree can be really helpful."},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"# GroundMesh"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"For the specific case of ground meshes, Babylon.js provides a class called ```BABYLON.GroundMesh``` that you can create using ```BABYLON.Mesh.CreateGround``` and ```BABYLON.Mesh.CreateGroundFromHeightMap```."},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"By calling ```groundMesh.optimize(chunkSize)``` where chunkSize defines the number of submeshes you want, the mesh will be optimized for rendering, picking and collisions by creating an internal octree (Be sure to select a correct chunkSize)."},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"# Using octrees manually"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"You can also use octrees from your code to get a list of meshes or submeshes."},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"Here are the helpful functions you can find on an octree:"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"* ```select(frustumPlanes: Plane[], allowDuplicate: boolean)```"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"* ```intersects(sphereCenter: Vector3, sphereRadius: number, allowDuplicate: boolean)```"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"* ```intersectsRay(ray: Ray)```"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"These functions return a [SmartArray](https://github.com/BabylonJS/Babylon.js/blob/master/Babylon/Tools/babylon.smartArray.ts) where duplicates are present or not according to ```allowDuplicate``` parameter/"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"# Demos"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"* http://www.babylonjs.com/?OCTREE"},{"src":"tutorials/Optimizing_Your_Scene_with_Octrees","name":"Optimizing Your Scene with Octrees","text":"* http://www.babylonjs.com/?INSTANCES"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"Renderable objects can be organized into rendering groups, which act as layers. In each of these rendering groups, the order above will be used."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"To use rendering groups, you simply need to set the property `.renderingGroupId` on the objects you want to put in other layers than the default one (which has the ID of 0)."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"This property exists on meshes, particle systems and sprite managers."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"Rendering groups are rendered by ascending ID, starting with the default one. There can be no more than 4 rendering groups in total, meaning that the only valid IDs are 0, 1, 2 and 3."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"## Alpha Index"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"Meshes have another property that has an influence on the rendering order: `.alphaIndex`"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"By default, this property is set to `Number.MAX_VALUE`, which is the highest value that a numerical variable can hold (around 1.79E+308)."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"Unlike opaque and alpha-tested meshes, the BabylonJS rendering engine sorts alpha-blended meshes by depth before drawing them on screen (see below). The `.alphaIndex` property allows you to override this sorting, as one mesh which has a lower alpha index than another will *always* be rendered before it, regardless of their respective depth."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"To phrase it more simply: **alpha-blended are sorted *first* by alpha index, and *then* by depth (distance to camera).**"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"Keep in mind that this property works only for alpha-blended mesh, and has absolutely no effect for opaque and alpha-tested ones."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"*Note: this property can be manually set on meshes in 3DS Max with the BabylonJS exporter plugin.*"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```javascript"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"scene.debugLayer.show(false);"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"And for multiple cameras:"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```javascript"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"scene.debugLayer.show(false, camera);"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"You can hide the interface with:"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```javascript"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"scene.debugLayer.hide();"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"You can then control when labels and axis should be displayed with the following code:"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```javascript"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"scene.debugLayer.shouldDisplayLabel = function (node) {"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"    return false;"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"}"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"scene.debugLayer.shouldDisplayAxis = function (mesh) {"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"    return mesh.name === \"sphere1\";"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"}"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"You can even control the ratio used to determine axis size:"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```javascript"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"scene.debugLayer.axisRatio = 0.04; // 4% of canvas width"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"You can also control the UI by using CSS and target following IDs:"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"* DebugLayerStats"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"* DebugLayerTree"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"var lensEffect = new BABYLON.LensRenderingPipeline('lensEffects', parameters, scene, 1.0, camera);"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"```"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"Note that in the above example, the pipeline is immediately attached to the camera, but this is not mandatory. You can also use it like this:"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"```"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"var lensEffect = new BABYLON.LensRenderingPipeline('lensEffects', parameters, scene, 1.0);"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"// ..."},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline('lensEffects', camera);"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"```"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"Here is a list of properties you may set on your parameters object:"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"| Property | Type | Description |"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|--------|--------|--------|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`chromatic_aberration`|number|0 means effect is disabled, 1 is for realism. Defines the spread of the RGB channels in the chromatic aberration shader.|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`edge_blur`|number|0 means effect is disabled, 1 is for realism. Defines the amount of blur that will appear on the corners of the screen.|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`distortion`|number|0 means effect is disabled, 1 is for realism. Defines the amount of lens-like distortion.|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`grain_amount`|number|Varies from 0 to 1. Amount of grain to blend on screen.|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`grain_texture`|BABYLON.Texture|Texture to use for grain effect; if unset, a random B&W noise is used instead.|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`dof_focus_distance`|number|The distance at which focus is set. Everything out of focus will be blurred. Note that a focus distance above a few hundred units gives you infinity focus.|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`dof_aperture`|number|Default: 1. How quickly things outside of focus will become blurred. Set high to give a 'miniature' effect (a.k.a. _tilt shift_).|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`dof_darken`|number|Default: 0. How much should out-of-focus objects be darkened. This effect should be used lightly! Set to 0 to disable.|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`dof_pentagon`|boolean|Default: true. Makes a pentagon-like \"bokeh\" effect. \"Bokeh\" is a term for artifacts appearing when objects are very blurred: bright spots will often produce sharp geometric shapes, depending on the type of the lens.|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`dof_gain`|number|Default: 1. How much highlights on blurred objects should be enhanced. Set to 0 to disable highlights enhancing.|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`dof_threshold`|number|Default: 1. How wide should highlights be on blurred objects.|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`blur_noise`|boolean|Default: true. Adds a very slight noise on the blur effect for out-of-focus objects.|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"The BABYLON.LensRenderingPipeline object created should be saved if you want to tweak the effects after its creation. This can be done with the following, self-explanatory methods:"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"| Methods |"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|--------|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`setEdgeBlur(amount: number)`|"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```hdr.exposure``` is used to ajust the colors. High exposures are used to see details in darkness and low exposures in bright areas. Default value is 1.0"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```hdr.minimumLuminance``` is the minimum luminance that the post-process can output. Luminance is >= 0. Default value is 1.0."},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```hdr.maximumLuminance``` is the maximum luminance that the post-process can output. Luminance is > ```hdr.minimumLuminance```. Default value is 1e20."},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```hdr.luminanceIncreaserate``` controls the eye adaptation speed to the darkness. Default value is 0.5."},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```hdr.luminanceDecreaseRate``` controls the eye adaptation speed to the light Default value is 0.5."},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"## Example of configuration to get focus on the effect ##"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```javascript"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"var hdr = new BABYLON.HDRRenderingPipeline(\"hdr\", scene, 1.0, [scene.activeCamera]);"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"hdr.brightThreshold = 0.7; // Minimum luminance needed to compute HDR"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"hdr.gaussCoeff = 0.5; // Gaussian coefficient = gaussCoeff * theEffectOutput;"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"hdr.gaussMean = 1; // The Gaussian blur mean"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"hdr.gaussStandDev = 5; // Standard Deviation of the gaussian blur."},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"hdr.exposure = 1.0;"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"hdr.minimumLuminance = 0.2;"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"hdr.maximumLuminance = 1e20;"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"hdr.luminanceDecreaseRate = 0.3; // Decrease rate: darkness to light"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"hdr.luminanceIncreaserate = 0.5; // Increase rate: light to darkness"},{"src":"tutorials/Using_the_HDR_Rendering_Pipeline","name":"Using the HDR Rendering Pipeline","text":"```"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"For more customization, you can specify the SSAO and Combine post-processes ratios like:"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"```"},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"var ssao = new BABYLON.SSAORenderingPipeline('ssaopipeline', scene, { ssaoRatio: 0.5, combineRatio: 1.0 }, [camera1 etc.]);"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"vls.setLightPosition(new BABYLON.Vector3(5.0, 0.0, 5.0));"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"**Warning: If the custom light position is too far from the light source, the result will be distorted **"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"You can access the custom position using:"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"var position = vls.getLightPosition();"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"To customize the light scattering, you can modify the vertical direction of the light rays. If _invert_ is set true, the rays will go downward. Upward, if invert is set false."},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"vls.invert = true;"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"To optimize performance, you can customize the rendering quality. In fact, this post-process uses an internal pass (render target texture) that will help the post-process to compute the light scattering effect. Of course, you can compute the pass in a lower ratio like:"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"var vls = new BABYLON.VolumetricLightScatteringPostProcess('vls', { postProcessRatio: 1.0, passRatio: 0.5 }, camera, lightSourceMesh, 75, BABYLON.Texture.BILINEAR_SAMPLINGMODE, engine, false);"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"vls.useDiffuseColor is used to force rendering the diffuse color of the light source mesh instead of its diffuse texture."},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- If useDiffuseColor is true or material.diffuseTexture is undefined, use the diffuse color"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- If useDiffuseColor is false and material.diffuseTexture is not undefined, use diffuse texture"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- If useDiffuseColor is false and material.diffuseTexture is undefined, use diffuse color"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"Using the material.diffuseColor instead of material.diffuseTexture (as default) for the light's color:"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"You can do a recomputation of your normals like so:"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"var indices = mesh.getIndices();"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"var normals = mesh.getVerticesData(VertexBuffer.NormalKind);"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"BABYLON.VertexData.ComputeNormals(positions, indices, normals);"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"mesh.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"Please note that recomputing the normals of your mesh may not be an ideal solution, as the results may be wrong in some parts of the mesh (e.g. seams on a sphere)."},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"#Changing the Frame of Reference#"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"Every mathematical vector and transformation is expressed in a certain _frame of reference_. This is for example handled by the `BABYLON.Space.LOCAL` and `BABYLON.Space.WORLD` constants used in the `rotate()` and `translate()` functions cited above, or `locallyTranslate()` and other similar functions."},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"A _frame of reference_ is in fact a regular transformation matrix, i.e. an association of rotation, translation and scaling operations."},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"You may need to express a certain vector in a precise frame of reference, be it the one of a mesh or an arbitrary one. In this case, the function `BABYLON.Vector3.TransformCoordinates()` will come in handy. "},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"Here is how you would compute the _up_ vector (Y+) inside the frame of reference of a mesh:"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"mesh.computeWorldMatrix();"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"var matrix = mesh.getWorldMatrix();"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"var up_local = new BABYLON.Vector3(0,1,0);"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"var up_global = BABYLON.Vector3.TransformCoordinates(up_local, matrix);"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"```"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"Potential uses of `BABYLON.Vector3.TransformCoordinates()` may be:"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"- computing direction and axis vectors for `applyImpulse()` and other physics-related functions"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"- setting the position and speed of a mesh relative to another, without the use of parenting"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":" (e.g. a spaceship shooting missiles)"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var updatePath = function(path, k) {"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  for (var i = 0; i < path.length; i++) {"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    var x = path[i].x;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    var z = path[i].z;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    var y = 20 * Math.sin(i/ 10) * Math.sin(k + z / 40);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    path[i].x = x;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    path[i].y = y;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    path[i].z = z;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  }"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"};"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"// path array population ..."},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var mesh = BABYLON.Mesh.CreateRibbon(\"ribbon\", pathArray, false, false, 0, scene, true);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"// morphing"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var k = 0;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"scene.registerBeforeRender(function() {"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  // path array update"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  for(var p = 0; p < pathArray.length; p++) {"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    updatePath(pathArray[p], k);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  }"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  // ribbon update"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  mesh = BABYLON.Mesh.CreateRibbon(null, pathArray, null, null, null, null, null, null, mesh);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  k += 0.05;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"});"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"example : http://www.babylonjs-playground.com/#1MSEBT#3   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"###Lines and DashedLines"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"#####_lines and dashed lines updatable parameter : points_ "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"_(reminder : only points positions can change, not the number of points. Please see the summary at the bottom of this page for more details)_"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"Once we got the understanding for ribbons, we can apply it to Lines or DashedLines.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"It's even easier as Lines just require a path of points as parameter.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```javascript"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var points1 = [v1, v2, ..., vN]; // vector3 array"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var lines = BABYLON.Mesh.CreateLines(\"lines\", points1, scene, true);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var dashedlines = BABYLON.Mesh.CreateDashedLines(\"lines\", points1, dashSize, gapSize, nb, scene, true);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var points2 = [u1, u2, ..., uN]; // another vector3 array"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"lines = BABYLON.Mesh.CreateLines(null, points2, null, null, lines);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"dashedlines = BABYLON.Mesh.CreateDashedLines(null, points2, null, null, null, null, null, dashedlines);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"We can, of course, set the update method within the render loop.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"example lines : http://www.babylonjs-playground.com/#24PQRQ  "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"dashed lines : http://www.babylonjs-playground.com/#XKYAE#3    "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":" "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"###Tube   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"#####_tube updatable parameters : path, radius, radiusFunction_"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"_(reminder : only points positions can change in the path, not the number of points. Please see the summary at the bottom of this page for more details)_   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":" "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"Nothing differs for tubes. Let's create a tube and then update it according to new _path_, _radius_ or _radiusFunction_ values : "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```javascript"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var path1 = [v1, ..., vN]; //vector3 array : tube axis1"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var radius1 = 5;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var path2 = [u1, ..., uN]; // another vector3 array : tube axis2"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var radius2 = 8;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var tube = BABYLON.Mesh.CreateTube(\"tube\", path1, radius1, 12, null, cap, scene, true);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"tube = BABYLON.Mesh.CreateTube(null, path2, radius2, null, null, null, null, null, tube);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"Of course, it also works with the _radiusFunction_ parameter :   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```javascript"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var radiusFunction1 = function(i, distance) { ... };"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var radiusFunction2 = function(i, distance) { ... };"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    if (arrayMatricesWeights.length > 0)"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"        newMesh.setVerticesData(BABYLON.VertexBuffer.MatricesWeightsKind, arrayUv, false);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    newMesh.setIndices(arrayIndice);"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"    return newMesh;"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"};"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"The following list defines triggers associated with scene:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.ActionManager.OnEveryFrameTrigger`: Raised once per frame."},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.ActionManager.OnKeyDownTrigger`: Raised when a key is pressed."},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.ActionManager.OnKeyUpTrigger`: Raised when a key is released."},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"For OnKeyUpTrigger and OnKeyDownTrigger triggers, you can filter events based on a key, either in your code or with a parameter:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"```javascript"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyUpTrigger, function (evt) {"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"   if (evt.sourceEvent.key == \"r\") {"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"       ..."},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"   }"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"}));"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction({ trigger: BABYLON.ActionManager.OnKeyUpTrigger, parameter: \"r\" },"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"  function () {"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"            ..."},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"  }));"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"```"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"# Actions"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"Most of the action have a `propertyPath` property. This string defines the path to the property to affect with the action. You can use direct values like `position` or `diffuse`. But you can also provide complex paths like `position.x`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.SwitchBooleanAction`: Used to switch the current value of a boolean property:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`SwitchBooleanAction(trigger, target, propertyPath, condition)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.SetValueAction`: Used to specify a direct value for a property:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`SetValueAction(trigger, target, propertyPath, value, condition)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.IncrementValueAction`: Add a specified value to a number property:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`IncrementValueAction(trigger, target, propertyPath, value, condition)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.PlayAnimationAction`: Launch an animation on a specified target:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`PlayAnimationAction(trigger, target, from, to, loop, condition)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.StopAnimationAction`: Stop an animation on a specified target:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`StopAnimationAction(trigger, target, condition)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.DoNothingAction`: Do nothing :)"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`DoNothingAction(trigger, condition)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.CombineAction`: This action is a container. You can use it to execute many actions simultaneously on the same trigger. The children property must be an array of actions:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`CombineAction(trigger, children, condition)`"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"You can see a live demo [here](http://www.babylonjs.com/scenes/assets)"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"## Using loading screen"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"By default, the AssetsManager will display a loading screen while loading assets:"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"![](http://www.babylonjs.com/Screenshots/assets.jpg)"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"If you want to disable the loading screen, you have to set ```assetsManager.useDefaultLoadingScreen``` to false."},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"The loading screen will also be displayed while loading a scene using SceneLoader if ```BABYLON.SceneLoader.ShowLoadingScreen``` is set to true (by default)."},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"In the same way, you can also display or hide the loading screen manually using these functions:"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"* ```engine.displayLoadingUI()```"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"* ```engine.hideLoadingUI()```"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"Loading text is controlled using ```engine.loadingUIText = \"text\"```"},{"src":"tutorials/How_to_use_AssetsManager","name":"How to use AssetsManager","text":"Background color is controlled using ```engine.loadingUIBackgroundColor = \"red\"``` for instance."},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        scene.beginAnimation(rabbit3.skeleton, 0, 72, true, 0.8);"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"    }),"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"```"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"### Cloning Complex Models"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"More complex models, such as the Dude, contain submeshes. When cloning you must iterate and clone the submeshes as well. Here is an example of how to clone a more complex model:"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"```Javascript"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"BABYLON.SceneLoader.ImportMesh(\"him\", \"Dude/\", \"dude.babylon\", scene, function (newMeshes, particleSystems, skeletons) {"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"    newMeshes[0].position = new BABYLON.Vector3(0, 0, 5);  // The original dude"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"    scene.beginAnimation(skeletons[0], 0, 120, 1.0, true);"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"    dudes = [];"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"    for (i = 0; i < 10; i++) { // 10 clones"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        var xrand = Math.floor(Math.random() * 501) - 250;"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        var zrand = Math.floor(Math.random() * 501) - 250;"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        var c = [];"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        for (j = 1; j < newMeshes.length; j++) {"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"            c[j] = newMeshes[j].clone(\"c\" + j);"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"            c[j].position = new BABYLON.Vector3(xrand, 0, zrand);"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"            c[j].skeleton = newMeshes[j].skeleton.clone();"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"            scene.beginAnimation(c[j].skeleton, 0, 120, 1.0, true);"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        }"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"        dudes[i] = c;"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"    }"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"}"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"```"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"### Attaching a mesh to a specific bone"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"Starting with babylon.js v2.2, you can now attach a mesh to a bone (like a sword in the hand of your character for instance). To do so, just specify on which bone with the following code:"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"```"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"sword.attachToBone(skeleton.bones[34], character);"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"```"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"Please note that you also need to specify on which mesh the bone is currently applied."},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"You can find a sample [here](http://www.babylonjs-playground.com/#11BH6Z#18)"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"### Performance considerations"},{"src":"tutorials/How_to_use_Blend_Modes","name":"How to use Blend Modes","text":"This playground scene showcases the available blend modes in action: [http://www.babylonjs-playground.com/#1MSIXB#4](http://www.babylonjs-playground.com/#1MSIXB#4)"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var mySinus = [];"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"for (var i = 0; i < 30; i++) {"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":" mySinus.push( new BABYLON.Vector3(i, Math.sin(i / 10), 0) );"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"}"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"You don't really know where your last Vector3 is set in space but you would like to continue your _mySinus_ curve with the former _bezier3_ curve (although it starts from the system origin) and then the former _bezier2_ to design some extrusion path for instance.   "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"So you can create your own _Curve3_ object and then stick it the _bezier3_ and _bezier2_.  "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```javascript"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var mySinusCurve3 = new BABYLON.Curve3(mySinus);"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var myFullCurve = mySinusCurve3.continue(bezier3).continue(bezier2);"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"The _**continue()**_ method returns a new _Curve3_ object and lets _mySinusCurve3_, _bezier3_ and _bezier2_ unchanged.   "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"If you then need to draw the curve or use it for ... whatever you want (extrusion path, ribbon path, shape path, path3D, etc), you just get the array of points with the _**getPoints()**_ method. This method simply returns an array of successive _Vector3_."},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```javascript"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var path = myFullCurve.getPoints();"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var extruded = BABYLON.Mesh.ExtrudeShape(\"extrudedShape\", shape, path, 1, 0, scene);"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"If you need then to know the curve length, just use the _**length()**_ method.    "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```javascript"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var l = myFullCurve.length();"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"Here is an example where a Hermite Spline is used to close smoothly a concatenation of two Bezier curves :   "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* The first and last points of the concatenation are used as last and first point of the Hermite spline.  "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"* The first and last segments of the concatenation are used as last and first tangent vectors of the Hermite. Since these segment are quite small, they are scaled according to the concatenation _length_ so the longer the concatenation, the more curved the spline.   "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```javascript"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"// two concatened cubic Bezier"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var cubicA = BABYLON.Curve3.CreateCubicBezier(vA0, vA1, vA2, vA3, 50);"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var cubicB = BABYLON.Curve3.CreateCubicBezier(vB0, vB1, vB2, vB3, 50);"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var continued = cubicA.continue(cubicB);"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"// initial Hermite values from continued first and last segments"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var t = continued.length() / 2;                             // tangent scale factor"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var points = continued.getPoints();"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var p1 = points[points.length - 1];                         // last continued point = first hermite point"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var t1 = (p1.subtract(points[points.length - 2])).scale(t); // last segment scaled = hermite tangent t1"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var p2 = points[0];                                         // first continued point = last hermite point"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var t2 = (points[1].subtract(p2)).scale(t);                 // first segment scaled = hermite tangent t2"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var hermite = BABYLON.Curve3.CreateHermiteSpline(p1, t1, p2, t2, 50);"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"continued = continued.continue(hermite);"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"// finally drawing a smooth closed curve"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"var closedCurve = BABYLON.Mesh.CreateLines(\"closed\", continued.getPoints(), scene);"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"```"},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"example : http://www.babylonjs-playground.com/#2GCEVH  "},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"The orange and yellow curves are Bezier curves.   "},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.reflectionTexture = new BABYLON.CubeTexture(\"Scenes/Customs/skybox/TropicalSunnyDay\", scene);"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.diffuseColor = new BABYLON.Color3(0, 0, 0);"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.alpha = 0.2;"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.specularPower = 16;"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"// Fresnel"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.reflectionFresnelParameters = new BABYLON.FresnelParameters();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.reflectionFresnelParameters.bias = 0.1;"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.emissiveFresnelParameters = new BABYLON.FresnelParameters();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.emissiveFresnelParameters.bias = 0.6;"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.emissiveFresnelParameters.power = 4;"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.emissiveFresnelParameters.leftColor = BABYLON.Color3.White();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.emissiveFresnelParameters.rightColor = BABYLON.Color3.Black();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.opacityFresnelParameters = new BABYLON.FresnelParameters();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.opacityFresnelParameters.leftColor = BABYLON.Color3.White();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"material.opacityFresnelParameters.rightColor = BABYLON.Color3.Black();"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"```"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"A complete demo can be found here: http://www.babylonjs.com/?FRESNEL"},{"src":"tutorials/How_to_use_FresnelParameters","name":"How to use FresnelParameters","text":"If you want to experiment FresnelParameters, just go here: http://www.babylonjs.com/playground/?19"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var postProcess = new BABYLON.FxaaPostProcess(\"fxaa\", 1.0, null, null, engine, true);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* Refraction: apply a refraction texture:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var postProcess = new BABYLON.RefractionPostProcess(\"Refraction\", \"refMap.jpg\", new BABYLON.Color3(1.0, 1.0, 1.0), 0.5, 0.5, 1.0, null, null, engine, true);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"The constructor of this postprocess is the following:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"BABYLON.RefractionPostProcess = function (name, refractionTextureUrl, color, depth, colorLevel, ratio, null, samplingMode, engine, reusable)"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"_refractionTextureUrl_ is the URL of the refraction map. The luminance of every pixel is used to define the refraction level (white = min, black = max)"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"_color_ is the base color of the refraction (used to taint the rendering)"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"_depth_ is the simulated refraction depth"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"_colorLevel_ is the coefficient of the base color (0 to remove base color tainting)"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* Color Correction: apply a color filter:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var postProcess = new BABYLON.ColorCorrectionPostProcess(\"color_correction\", \"./table.png\", 1.0, null, null, engine, true);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"The second parameter of the constructor is the URL of the color look-up table (also known as _LUT_) that contains the filter to apply. This must be a texture 16 pixels high and 256 pixels wide containing a modified set of RGB colors (x=red value, y=green value, z=blue value). The post-processing will then map the RGB values of the rendered pixels to the new values contained in the look-up table."},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"Here is what the default (without filter) look-up table looks like:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"![LUT](http://udn.epicgames.com/Three/rsrc/Three/ColorGrading/RGBTable16x1.png)"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"Examples of filtered LUT to use for various filters:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"![LUT](http://i.imgur.com/gC9vQCz.png)"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":" Inverted colors"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"![LUT](http://i.imgur.com/rupMyVN.png)"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":" High contrast"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"![LUT](http://i.imgur.com/IX93hGO.png)"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":" Posterize"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"You can easily create new filters by using a image editing software to alter the look-up table to fit your needs. Copy/paste the default look-up table on a screenshot or picture before altering it to see in real time what the filtered image will look like."},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"# Custom postprocesses"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"You can also develop your own postprocess using ```BABYLON.PostProcess``` object."},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"To do so, you need to create a .fragment.fx file, a shader-storing DOM node, or a ShaderStore entry where you will store the GLSL shader code used for every pixel of the screen:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"GLSL"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"#ifdef GL_ES"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"precision highp float;"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"#endif"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"// Samplers"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"varying vec2 vUV;"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"uniform sampler2D textureSampler;"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`parameters`**|Callback used for passing extra parameters on a post process.|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"### BABYLON.PostProcessRenderPass"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"`new BABYLON.PostProcessRenderPass(BABYLON.Scene scene, string name, object size, BABYLON.Mesh[] renderList, function(){} beforeRender, function(){} afterRender)`"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"| Method | Description |"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|--------|--------|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`PostProcessRenderPass(scene, name, size, renderList, beforeRender, afterRender)`**|Create a new instance of PostProcessRenderPass.|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"|**`setRenderList(meshes)`**|Update the renderList.|"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"## Let's play with Render Pipeline"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"### Simple Pipeline"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var canvas = document.getElementById(\"renderCanvas\");"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var engine = new BABYLON.Engine(canvas, true);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var scene = new BABYLON.Scene(engine);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var camera_01 = new BABYLON.ArcRotateCamera(\"Camera_01\", 1, 0.8, 10, new BABYLON.Vector3(0, 0, 0), scene);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var camera_02 = new BABYLON.ArcRotateCamera(\"Camera_02\", 1, 0.8, 10, new BABYLON.Vector3(0, 0, 0), scene);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var camera_03 = new BABYLON.ArcRotateCamera(\"Camera_03\", 1, 0.8, 10, new BABYLON.Vector3(0, 0, 0), scene);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var camera_04 = new BABYLON.ArcRotateCamera(\"Camera_04\", 1, 0.8, 10, new BABYLON.Vector3(0, 0, 0), scene);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"camera_01.viewport = new BABYLON.Viewport(0.0, 0.0, 0.5, 0.5);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"camera_02.viewport = new BABYLON.Viewport(0.5, 0.0, 0.5, 0.5);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"camera_03.viewport = new BABYLON.Viewport(0.0, 0.5, 0.5, 0.5);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"camera_04.viewport = new BABYLON.Viewport(0.5, 0.5, 0.5, 0.5);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.activeCameras.push(camera_01);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.activeCameras.push(camera_02);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.activeCameras.push(camera_03);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.activeCameras.push(camera_04);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var light0 = new BABYLON.PointLight(\"Omni_0\", new BABYLON.Vector3(0, 0, 10), scene);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var light1 = new BABYLON.PointLight(\"Omni_1\", new BABYLON.Vector3(0, 10, 0), scene);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var light2 = new BABYLON.PointLight(\"Omni_2\", new BABYLON.Vector3(10, 0, 0), scene);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var box = BABYLON.Mesh.CreateBox(\"Box\", 3.0, scene);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"camera_01.attachControl(canvas);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"camera_02.attachControl(canvas);"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"## All Standard Procedural Textures ##"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"All standard procedural textures can be used in the same ways, but they each have specific (special) properties:"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- **WoodProceduralTexture**"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **woodColor** to modify the color of the wood in the texture (_**BABYLON.Color3/4**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **ampScale** to change the waves amplitude in the wood (_**Int**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- **MarbleProceduralTexture**"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **numberOfTilesHeight** controls the number of tiles in height (_**Int**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **numberOfTilesWidth** controls the number of tiles in width (_**Int**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **jointColor** changes the color for the joint between tiles (_**BABYLON.Color3/4**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **marbleColor** changes the color for the tile itself (_**BABYLON.Color3/4**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- **BrickProceduralTexture**"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **numberOfBricksHeight** controls the number of bricks in height (_**Int**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **numberOfBricksWidth** controls the number of bricks in width (_**Int**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **jointColor** changes the color for the joint between bricks (_**BABYLON.Color3/4**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **brickColor** changes the color for the brick itself (_**BABYLON.Color3/4**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- **FireProceduralTexture**"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **time** can be set manually(float) if autoGenerateTime(boolean) is set to false. It is used inside the fire shader to animate it"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **speed** controls the speed of the flames (_**BABYLON.Vector2**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **fireColors** is an array of 6 (_**BABYLON.Color3/4**_) defining the different color of the fire. You can define them manually of use presets available as static properties of the class (**PurpleFireColors**, **GreenFireColors**, **RedFireColors**, **BlueFireColors**) "},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- **GrassProceduralTexture**"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **grassColor** is an array of 3 (_**BABYLON.Color3/4**_) for the grass. Should be green but you can create red grass if you want to (_**BABYLON.Color3/4**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **groundColor** is the base color for the ground (_**BABYLON.Color3/4**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- **RoadProceduralTexture**"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **roadColor** is the color for the road (_**BABYLON.Color3/4**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- **CloudProceduralTexture**"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **skyColor** is the color for the sky (_**BABYLON.Color3/4**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" - **cloudColor** is the color for the cloud (_**BABYLON.Color3/4**_)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"## Creating Custom Procedural Textures ##"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"### Using a Files-Based Custom Procedural Texture ###"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"To use a files-based custom procedural texture, you need to create a folder containing at least 2 files:"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- config.json"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- custom.fragment.fx"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"The config file is a Javascript Simple Object Notation file containing 4 elements. Here is an example:"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```javascript"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    {"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"result.optimizations.push(new BABYLON.LensFlaresOptimization(priority));"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"// Next priority"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"priority++;"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"result.optimizations.push(new BABYLON.PostProcessesOptimization(priority));"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"result.optimizations.push(new BABYLON.ParticlesOptimization(priority));"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"// Next priority"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"priority++;"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"result.optimizations.push(new BABYLON.TextureOptimization(priority, 256));"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"// Next priority"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"priority++;"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"result.optimizations.push(new BABYLON.RenderTargetsOptimization(priority));"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"// Next priority"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"priority++;"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"result.optimizations.push(new BABYLON.HardwareScalingOptimization(priority, 4));"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"return result;"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"```"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"You can also create your own optimization by creating your own object:"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"```javascript"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"function mySceneOptimization(priority) {"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"  if (typeof priority === \"undefined\") {"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"     priority = 0;"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"  }"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"  this.priority = priority;"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"  this.apply = function (scene) {"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"     // Work on scene..."},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"  };"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"}"},{"src":"tutorials/How_to_use_SceneOptimizer","name":"How to use SceneOptimizer","text":"```"},{"src":"tutorials/How_to_use_VirtualJoysticksCamera","name":"How to use VirtualJoysticksCamera","text":"If you switch back to another camera, don’t forget to call the dispose() function first. Indeed, the VirtualJoysticks are creating a 2D canvas on top of the 3D WebGL canvas to draw the joysticks with cyan and yellow circles. If you forget to call the dispose() function, the 2D canvas will remain, and will continue to use touch events input."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"Simplifying spheres. Materials of the spheres will be set after simplification ended completely."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"http://www.babylonjs-playground.com/#1ED15P#1"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"Simplifying a color-based complex mesh. An alert window will pop when simplification is over. This mesh will also take time to load and requires optimization."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"With global mesh optimization - "},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"http://www.babylonjs-playground.com/#2JBSNA#3"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"With optimization during simplification - "},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"http://www.babylonjs-playground.com/#2JBSNA#4"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"#Rules, Quirks and thing to pay attention to"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"Not all meshes can be simplified. Better - all meshes can be simplified, some however, should not be."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"An object like a Box (if built in an optimal way, like the BABYLON.Mesh.CreateBox function) has no \"extra faces\" that can be removed. removing one single face will cause it to... not be a box."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"##A few \"rules\" to follow"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"(and never forget, rules are meant to be broken!) :"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"1. Try simplifying meshes with more than 500 faces. Less than that will make no sense probably."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"2. Best meshes to simplify are complex objects"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"3. Meshes like a plane will probably lose their shape after simplification."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"4. The lower the quality of the mesh the further the distance should be. This should not be linear - a complex mesh that was simplified to 90% will probably still look almost the same, but at 30% it is very obvious that the mesh was simplified. Lower quality simplification should have a large distance defined."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"5. Try simplifying \"whole\" meshes. A mesh containing many distant objects on one will simplify rather poorly. LOD will work on such meshes poorly as well, since the position of the mesh is not actually the position of all mesh-parts. A good example are the while bar stools in the WCafe example. All are loaded as one single mesh, making them almost impossible to simplify (using this algorithm)."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"6. Set the mesh's material before starting the decimation. The LOD Mesh uses them when initialized. If they will not be set, expect the material to disappear when the given distance reached."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"##Quirks"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"* Quadratic simplification can be calculated using many factors. Position, normals, colors, UV coordinates etc'. The more factor, the slower it will run (more calculations). The decision was made to stay with position only - this means that after simplification the UV coordinates will sometimes be a bit off. It is usually unnoticeable if you follow Rule nr. 4."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"* Meshes might change their shape. Very noticeable with a small plane."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"* Meshes might suddenly have \"holes\" in them. This can be avoided using the mesh optimization (starting 2.1, described further down)"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"* Submeshes are supported starting BabylonJS 2.1. Meshes with submeshes would not be decimated 100% correctly due to the lack of border detection (see next point). Give it a try and see if it fits your needs. Contact me with questions."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"* Some triangles on the borders will be \"deleted\". The reason is usually the (lack of) border detection, which is a part of the original paper. The feature was not included in the implementation due to the amount of time needed to calculate that correctly. Maybe in the future!"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"* Objects that are initialized using an image (best example is a Height Map-based ground) will only decimate after the image was fully loaded. Height Map can be initialized using the callback that can be set as the last variable of the function:"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"<pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"var ground = BABYLON.Mesh.CreateGroundFromHeightMap(\"ground\", \"worldHeightMap.jpg\", 200, 200, 250, 0, 10, scene, false, function(groundMesh) {"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"    // Add simplify code here"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"    groundMesh.simplify(.......);"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"});"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"</pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"## Mesh optimization (Starting BabylonJS 2.1)"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"Due to the nature of Babylon's file format, it is possible that many vertices will have the same positions, normals, but different color/uv information. This presents a problem to the decimation process, which relays on having all triangles with the same position altered. "},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"If you try simplifying a mesh, and it suddenly lacks a few triangles, this will be the reason - your mesh is not \"optimized\" for simplification."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"There are two types of optimization available:"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"The concept was expanded to allow the adding of tags on any javascript object (not necessarily only the objects created by babylon.js). The ```Tag``` class that has been added to babylon.js contains all the necessary code for this generic concept ([Typescript code](https://github.com/BabylonJS/Babylon.js/blob/master/Babylon/Tools/babylon.tags.ts)) and internally uses the ```AndOrNotEvaluator``` class ([Typescript code](https://github.com/BabylonJS/Babylon.js/blob/master/Babylon/Tools/babylon.andOrNotEvaluator.ts))."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"The use of tags for a javascript object can be enabled/disabled like this (javascript code):"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```javascript"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"var myJSObj = {};"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"// enable tags for myJSObj"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"BABYLON.Tags.EnableFor(myJSObj);"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"// disable tags for myJSObj"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"BABYLON.Tags.DisableFor(myJSObj);"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```EnableFor``` adds functions to the javascript object in the aim to:"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"*  test if it has tags ```hasTags```"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"*  add tags to it ```addTags```"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"*  remove tags from it ```removesTags```"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"*  test if it matches a tags query ```matchesTagsQuery``` (see below)"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"Those functions are proxies of static methods of ```Tags``` (```HasTags```, ```AddTagsTo```, ```RemoveTagsFrom``` and ```MatchesQuery```)."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```Tags``` also contains ```GetTags``` which retrieves the array of tags of the javascript object."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"Remark: Tags.AddTagsTo enables tags for the object if needed"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```javascript"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"var myJSObj1 = {};"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"// enable tags for myJSObj1"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"BABYLON.Tags.EnableFor(myJSObj);// => addTags is available on myJSObj1"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"// add tags to myJSObj1"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj1.addTags(\"tag1 tag2\"); // same as BABYLON.Tags.AddTagsTo(myJSObj1, \"tag1 tag2\"),"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"var myJSObj2 = {};"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"// add tags to myJSObj2 without having to enable tags for it first"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"BABYLON.Tags.AddTagsTo(myJSObj2, \"tag1 tag2\"); // addTags couldn't be used on myJSObj2 since tags were not previously enabled for myJSObj2"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"Tags query:"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```Tags.MatchesQuery``` (and ```matchesTagsQuery``` if tags are enabled for the javascript object) accepts a list of correct tags (see \"Rules to respect\") containing parenthesis, and boolean evaluators such as ```(tag1 && (tag2 || tag4 || !tag5)) || !(!tag1) && !!!tag5```. The tags query is evaluated thanks to ```AndOrNotEvaluator```."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"Full example:"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```javascript"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"var myJSObj1 = {};"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"BABYLON.Tags.AddTagsTo(myJSObj1, \"tag1 tag2\");"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"var myJSObj2 = {};"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"BABYLON.Tags.AddTagsTo(myJSObj2, \"tag3 tag4 tag5\");"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;lineRight.scaling = new BABYLON.Vector3(0.010, 1,&nbsp; 1);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;lineRight.position = new BABYLON.Vector3(w * .4, 0, 0);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;meshes.push(lineRight);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;var gunSight = BABYLON.Mesh.MergeMeshes(meshes);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;gunSight.name = \"gunSight\";"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;gunSight.layerMask = 0x20000000;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;gunSight.freezeWorldMatrix();"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;var mat = new BABYLON.StandardMaterial(\"emissive mat\",scene);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;mat.checkReadyOnlyOnce = true;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;mat.ambientColor = new BABYLON.Color3(1,1,1);"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"&nbsp;&nbsp; &nbsp;gunSight.material = mat;"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"}"},{"src":"tutorials/Layermasks_and_Multi-Cam_Textures","name":"Layermasks and Multi-Cam Textures","text":"```"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"# Opaque or Transparent?"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"How your meshes are categorized may be very important for the final aspect of your scene. Let's take a closer look at the way categories 1 to 3 are defined."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"### Opaque Meshes"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"These will be the easiest to render: their polygons are fully drawn on screen with their colors & textures. A depth buffer will be used to make sure nothing is drawn over something that is closer to the camera."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"### Alpha Tested Meshes"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"Same as opaque meshes, except that some parts of these meshes can be defined as completely transparent. Alpha test means that each pixel of the mesh can be either opaque (and then drawn on screen and in the depth buffer) or transparent, which means the pixel is completely discarded. Although very efficient, this type of render usually gives off aliased borders & does not allow for smooth transparency effects."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"A pixel is considered transparent if its alpha value is < 0.4, and opaque if not. This value is currently hardcoded."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"### Alpha Blended Meshes"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"These meshes have translucent parts that may have an alpha value of 0.0 (completely transparent) to 1.0 (completely opaque). Their color is blended with what's behind them to reflect that. These meshes are sorted by depth, based on the center of their bounding sphere. This does not prevent some problems when several alpha-blended meshes overlap."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"Also, note that backface culling is pretty much obligatory for alpha blended meshes, otherwise polygons from the front and the back of the objects will be garbled."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"This is what a depth buffer looks like for a scene that contains each of those type of meshes:"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"![All kinds of meshes](http://i.imgur.com/l0XIlKv.png)"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"*In this scene, the sphere is alpha tested, the base blocks are opaque and the pillars are alpha blended.*"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"The following list will help you understand in which categories your meshes will be put. For more information on each of the properties mentioned here, take a look at the [Materials Tutorial](page.php?p=22051)."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"**Alpha blended meshes:**"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"- Any mesh that either has :"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":" - the property `hasVertexAlpha` set to true (automatically set for exported meshes if vertices have individual alpha (transparency) values)"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":" - a `.visibility` value < 1"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"- In case of a mesh using StandardMaterial, if it either has:"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"* DebugLayerLogs"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"* DebugLayerOptions"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"For instance:"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```javascript"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"document.getElementById(\"DebugLayerStats\").style.background = \"#484848\";"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"document.getElementById(\"DebugLayerStats\").style.zindex = \"999999\";"},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"```"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`disableEdgeBlur()`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`setGrainAmount(amount: number)`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`disableGrain()`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`setChromaticAberration(amount: number)`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`disableChromaticAberration()`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`setEdgeDistortion(amount: number)`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`disableEdgeDistortion()`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`setHighlightsGain(amount: number)`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`setHighlightsThreshold(amount: number)`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`setFocusDepth(amount: number)`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`disableDepthOfField()`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`setAperture(amount: number)`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`setDarkenOutOfFocus(amount: number)`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`enablePentagonBokeh()`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`disablePentagonBokeh()`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`setAperture(amount: number)`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`enableNoiseBlur()`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"|`disableNoiseBlur()`|"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"## A Word Of Advice ##"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"These effects are based on general approximations of real world optics phenomenons. As such, some situations may end up looking a bit off or even completely wrong. Tweaking the parameters (including on-the-fly adjustments) will allow you to mitigate these problems, for example by lowering aperture in situations where you know that blurred objects will not render correctly."},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"Keep in mind that the approximation used does not give good results when an object inside focus is rendered on top of a strongly blurred one, or the other way around. Bleeding around one object or the other will probably occur in this case."},{"src":"tutorials/Using_the_SSAO_rendering_pipeline","name":"Using the SSAO rendering pipeline","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"vls.useDiffuseColor = true; // False as default"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"vls.mesh.material.diffuseColor = new BABYLON.Color3(0.0, 1.0, 0.0);"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"Using the material.diffuseTexture for the light's color:"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"vls.useDiffuseColor = false; // False as default"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"vls.mesh.material.diffuseTexture= new BABYLON.Texture(...);"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"```"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"## And now, it's time to play ! ##"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"Feel free to tour some examples of Volumetric LightScattering in the playground :"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- [Base demo](http://www.babylonjs-playground.com/?25)"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- [Colorful experiment](http://babylonjs-playground.azurewebsites.net/#1XOMH0)"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- [Video texture as source](http://babylonjs-playground.azurewebsites.net/#1ELQC1)"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- [Spherical Harmonics as source](http://babylonjs-playground.azurewebsites.net/#HYFQJ) (hit RUN again and again for this one)"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- [Particles as source #1](http://babylonjs-playground.azurewebsites.net/#2L5DBX)"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- [Particles as source #2](http://babylonjs-playground.azurewebsites.net/#MYY6S#3)"},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"- [VLS through CSG-created slots](http://babylonjs-playground.azurewebsites.net/#UUXLX#2)"},{"src":"tutorials/How_Rotations_and_Translations_Work","name":"How Rotations and Translations Work","text":"- applying a projection matrix to a world position vector to end up with a screen-space position vector"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var tube = BABYLON.Mesh.CreateTube(\"tube\", path1, null, 12, radiusFunction1, cap, scene, true);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"tube = BABYLON.Mesh.CreateTube(null, path2, null, null, radiusFunction2, null, null, null, tube);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"example : http://www.babylonjs-playground.com/#ACKC2#1       "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"PG here with radiusFunction animation + closure explanation "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"###Extruded shape "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"#####_extrusion updatable parameters for ExtrudeShape(): shape, path, scale, rotation_   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"#####_extrusion updatable parameters for ExtrudeShapeCustom(): shape, path, scaleFunction, rotateFunction_ "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"_(reminder : only points positions can change in the path, not the number of points. Please see the summary at the bottom of this page for more details)_   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"We can see extrusion as some tube generalization : a tube would be a circle _shape_ extruded along a path.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"So we have here the same update capabilities than for a tube (_path_ or shape _scale_ which would be the equivalent to tube _radius_) and some extra parameters : the _rotation_ step can be updated and the _shape_ itself also !   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"It is mandatory that the new _shape_ array has the same number of Vector3 than the _shape_ used to build the original instance. A good way to assure this is simply to keep the original _shape_ instance and to modify it instead of creating a new one (or to modify a copy of it).   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```javascript"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var shape1 = [s1, s2, ...sN]; // Vector3 array"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var shape2 = [t1, t2, ...tN]; // another Vector3 array"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var path1 = [p1, p2, ...pN]; // Vector3 array"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var path2 = [q1, q2, ...qN]; // another Vector3 array"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var scale1 = 1;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var scale2 = 3;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var rotation1 = 0;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var rotation2 = 0.2;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"// extrusion"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var extruded = BABYLON.Mesh.ExtrudeShape(\"ext\", shape1, path1, scale1, rotation1, cap, scene, true);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"// mesh update"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"extruded = BABYLON.Mesh.ExtrudeShape(null, shape2, path2, scale2, rotation2, null, null, null, null, extruded);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"Idem for _ExtrudeShapeCustom()_ accepting _scaleFunction_ and _rotateFunction_ parameters :   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```javascript"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"// path and shape var declared before ..."},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var myScale1 = function(i, distance) { ... };"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var myScale2 = function(i, distance) { ... };"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var myRotation1 = function(i, distance) { ... };"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var myRotation2 = function(i, distance) { ... };"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"// extrusion"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var ext = BABYLON.Mesh.ExtrudeShapeCustom(\"ext\", shape1, path1, myScale1, myRotation1, false, false, cap, scene, true);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"// mesh update"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"ext = BABYLON.Mesh.ExtrudeShapeCustom(null, shape2, path2, myScale2, myRotation2, null, null, null, null, null, null, ext);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"Both new functions can be used in the render loop.      "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"The funny part is, as _ExtrudeShape()_ and _ExtrudedShapeCustom()_ build the same mesh (only parameters change), you can create a simple extruded shape with _ExtrudeShape()_ and then morph it with _ExtrudeShapeCustom()_ if you need more complexity.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```javascript"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var ext = BABYLON.Mesh.ExtrudeShape(\"ext\", shape1, path1, scale1, rotation1, cap, scene, true);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"// mesh update"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"ext = BABYLON.Mesh.ExtrudeShapeCustom(null, shape2, path2, myScale2, myRotation2, null, null, null, null, null, null, ext);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"PG examples here ...   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"###Other shapes : updateMeshPositions"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"For now, we just talked about parametric shapes which can be updated with their own _CreateXXX()_ initial method. "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"But what about the other mesh types : boxes, spheres, cylinders, etc ? "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"There is no mean to update them with their initial _CreateXXX()_ because a box remains a box, a sphere remains a sphere whether you change their size, radius, etc. "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"So usually, the right way to change these basic shapes is to play with their ```mesh.scale``` property. "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"Nevertheleless, if you create your basic shape with its _updatable_ parameter set to true, you can access another way to morph/change the shape afterwards : the _updateMeshPositions()_ method. "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"This method needs two parameters :"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"* a _positionFunction_ which is js function which will modify the mesh _positions_ array,"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"* a _computeNormals_ boolean (default = true) to skip/unskip the normals re-computation after the mesh update ."},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```javascript"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var box = BABYLON.Mesh.CreateBox(\"box\", 5.0, scene, true);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var positionFunction = function(positions) {"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":" // modify positions array values here"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"};"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"box.updateMeshPositions(positionFunction, true);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"PG examples here ..."},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"###More speed : freezeNormals !"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"The former _CreateXXX()_ update functions try to be as much optimized as possible to run fast in the render loop.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"However, you may need some more speed for any reason (huge mesh with dozens of thousands of vertices for instance).   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"So, if your mesh doesn't need to reflect the light (emissive color only for instance), you can skip the normals re-computation which is a CPU consuming process.    "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"Use then the _freezeNormals()_ method just after your mesh is created :   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```javascript"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var tube = BABYLON.Mesh.CreateTube(\"tube\", path, 3, 12, null, BABYLON.Mesh.NO_CAP, scene, true);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"tube.freezeNormals();"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"// path update here ..."},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"tube = BABYLON.Mesh.CreateTube(null, path, 3, null, null, null, null, null, null, tube);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"If you need to reset the normals computation process on, use then once the _unfreezeNormals()_ method."},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```javascript"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"tube.unfreezeNormals();"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"The normals will then be recomputed and re-applied on the next _CreateXXX()_ update call.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"###Summary   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"* To create an updatable mesh, it is mandatory to set its _updatable_ parameter to _true_ when calling _CreateXXX()_ method.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"* To update then an existing parametric shape, we just have to use the same _CreateXXX_ method as we used to construct it. "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"* Only the existing mesh and the data relative to new positions (path, pathArray, array of points) must be passed to this method, the other parameters are ignored.    "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"* If we want to morph the mesh, we then use the _CreateXXX()_ method within the render loop.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"In this case, it is important not to allocate new memory each frame : we access our arrays by indexes and just change values instead of creating new arrays, we access existing objects instead of instantiating new ones, etc. We also take care about the weight of each object (number of sides, number of vertices, etc).    "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"example : if we need to update a Lines mesh in the render loop, it is to say to update the _points_ array each frame, it is better to change each array element values (_points[i].x = newXValue; points[i].y = newYValue; points[i].z = newZValue;_) in a _for_ loop instead of instantiating a new _points_ array.   "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"Use case with a _path_ parameter as all parametric shapes have one :    "},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```javascript"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var path = [v1, v2, ..., vN]; // your own array, created once"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var mesh = CreateXXX(\"mesh\", path, etc, ..., scene, true); // updatable = true : creates your initial mesh"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var computeValue = function(val1, val2) { ... }; // your update logic : returns a value in function of val1 and val2"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var getParam = function() { ... }; // returns a param value evolving in the render loop"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"var updatePath = function(path, k) { // updates the existing path array elements"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  for (var i = 0; i < path.length; i++) {"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    var x = computeValue(path[i].x, k);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    var y = computeValue(path[i].y, k);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    var z = computeValue(path[i].z, k);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    path[i].x = x;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    path[i].y = y;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"    path[i].z = z;"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  }"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"};"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"scene.registerBeforeRender(function() {"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  var k = getParam();"},{"src":"tutorials/How_to_Merge_Meshes","name":"How to Merge Meshes","text":"```"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.ExecuteCodeAction`: Execute your own code when the trigger is raised and the condition is true:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`ExecuteCodeAction(trigger, func, condition)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.SetParentAction`: Used to define the parent of a node (camera, light, mesh):"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`SetParentAction(trigger, target, parent, condition)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.InterpolateValueAction`: This action creates an animation to interpolate the current value of a property to a given target. The following types are supported:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"   * `number`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"   * `BABYLON.Color3`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"   * `BABYLON.Vector3`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"   * `BABYLON.Quaternion`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`InterpolateValueAction(trigger, target, propertyPath, value, duration, condition, stopOtherAnimations)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.PlaySoundAction` and `BABYLON.StopSoundAction`: The \"sound\" parameter is the reference of the sound you created using `var sound = new BABYLON.Sound(...)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`PlaySoundAction(trigger, sound, condition)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`StopSoundAction(trigger, sound, condition)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"# Conditions"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"There are three kinds of conditions:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.ValueCondition`: This condition is true when a given property is equal / greater / lesser / different from a specific value. The following operands are thus supported:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"   * `BABYLON.ValueCondition.IsEqual`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"   * `BABYLON.ValueCondition.IsDifferent`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"   * `BABYLON.ValueCondition.IsGreater`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"   * `BABYLON.ValueCondition.IsLesser`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`ValueCondition(actionManager, target, propertyPath, value, operator)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.PredicateCondition`: This condition uses a predicate to determine its state:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`PredicateCondition(actionManager, predicate)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"* `BABYLON.StateCondition`: This condition checks the ```state``` property of an object and compares it to given value:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`StateCondition(actionManager, target, value)`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"# Experimenting actions"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"So basically, let's imagine you want to almost hide a mesh when the user touches it."},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"First of all you have to add a `BABYLON.ActionManager` on it:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`mesh.actionManager = new BABYLON.ActionManager(scene);`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"Then you can create an action that will be associated with the `BABYLON.ActionManager.OnPickTrigger` trigger. This action will interpolate the ```mesh.visibility``` property to 0.2:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`var action = new BABYLON.InterpolateValueAction(BABYLON.ActionManager.OnPickTrigger, mesh, \"visibility\", 0.2, 1000);`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"Then add this action to the mesh:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`mesh.actionManager.registerAction(action);`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"And you're done! Easy, right?"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"You can also chain another action to restore the `mesh.visibility` property to default value:"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`var action = new BABYLON.InterpolateValueAction(BABYLON.ActionManager.OnPickTrigger, mesh, \"visibility\", 0.2, 1000);`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`var action2 = new BABYLON.InterpolateValueAction(BABYLON.ActionManager.OnPickTrigger, mesh, \"visibility\", 1.0, 1000);`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"`mesh.actionManager.registerAction(action).then(action2);`"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"In this case, the first click will hide the button, the following click will restore it, and so on..."},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"# Playground"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"If you want to play with actions, you can try them at our playground:"},{"src":"tutorials/How_to_use_Bones_and_Skeletons","name":"How to use Bones and Skeletons","text":"Bones are computed using shaders by default. This allows better performance. But on low end devices shaders could be limited and not able to process bones. You can in this case ask Babylon.js to compute bones using CPU by setting mesh.computeBonesUsingShaders = false."},{"src":"tutorials/How_to_use_Curve3","name":"How to use Curve3","text":"In light blue, these two curves are continued each other and a hermite curve is also added in continuation to close the path.   "},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"// Parameters"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"uniform vec2 screenSize;"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"uniform float highlightThreshold;"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"float highlights(vec3 color)"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"{"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":" return smoothstep(highlightThreshold, 1.0, dot(color, vec3(0.3, 0.59, 0.11)));"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"}"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"void main(void) "},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"{"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":" vec2 texelSize = vec2(1.0 / screenSize.x, 1.0 / screenSize.y);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":" vec4 baseColor = texture2D(textureSampler, vUV + vec2(-1.0, -1.0) * texelSize) * 0.25;"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":" baseColor += texture2D(textureSampler, vUV + vec2(1.0, -1.0) * texelSize) * 0.25;"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":" baseColor += texture2D(textureSampler, vUV + vec2(1.0, 1.0) * texelSize) * 0.25;"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":" baseColor += texture2D(textureSampler, vUV + vec2(-1.0, 1.0) * texelSize) * 0.25;"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":" "},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":" baseColor.a = highlights(baseColor.rgb);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":" gl_FragColor = baseColor;"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"}"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"Your shader must define the following values:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* Precision must be set to highp"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* A varying vUV must be used to read texture coordinates"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* The first sampler must be named textureSampler"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"Once you created your sampler, you can create a postprocess:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var postProcess = new BABYLON.PostProcess(\"Down sample\", \"./Scenes/Customs/postprocesses/downsample\", [\"screenSize\", \"highlightThreshold\"], null, 0.25, null, BABYLON.Texture.BILINEAR_SAMPLINGMODE, engine, true);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"You have to specify:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* A name"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* The URL of the shader coder*"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* A list of your uniforms parameters"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* A list of additional samplers"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* The ratio"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* The parent camera (deprecated)"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* The sampling mode"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* The engine"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"* Can be reusable"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"(*Please see the link at the bottom of this document to learn more ways to store shader code.)"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"You can set up things before the postprocess is applied by specifying a onApply function:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"postProcess.onApply = function (effect) {"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"    effect.setFloat2(\"screenSize\", postProcess1.width, postProcess1.height);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"    effect.setFloat(\"highlightThreshold\", 0.90);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"};"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"Please note that you can also use the output of a previous postprocess as the source for your own sampler:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"effect.setTextureFromPostProcess(\"sceneSampler\", postProcess0);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"# Chaining postprocesses"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"You can chain postprocesses on a specific camera. They are processed using the creation order. For instance here is the code used to simulate a bloom effect:"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```javascript"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var blurWidth = 1.0;"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var postProcess0 = new BABYLON.PassPostProcess(\"Scene copy\", 1.0, camera);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var postProcess1 = new BABYLON.PostProcess(\"Down sample\", \"./Scenes/Customs/postprocesses/downsample\", [\"screenSize\", \"highlightThreshold\"], null, 0.25, camera, BABYLON.Texture.BILINEAR_SAMPLINGMODE);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"postProcess1.onApply = function (effect) {"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"    effect.setFloat2(\"screenSize\", postProcess1.width, postProcess1.height);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"    effect.setFloat(\"highlightThreshold\", 0.90);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"};"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var postProcess2 = new BABYLON.BlurPostProcess(\"Horizontal blur\", new BABYLON.Vector2(1.0, 0), blurWidth, 0.25, camera);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var postProcess3 = new BABYLON.BlurPostProcess(\"Vertical blur\", new BABYLON.Vector2(0, 1.0), blurWidth, 0.25, camera);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"var postProcess4 = new BABYLON.PostProcess(\"Final compose\", \"./Scenes/Customs/postprocesses/compose\", [\"sceneIntensity\", \"glowIntensity\", \"highlightIntensity\"], [\"sceneSampler\"], 1, camera);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"postProcess4.onApply = function (effect) {"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"    effect.setTextureFromPostProcess(\"sceneSampler\", postProcess0);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"    effect.setFloat(\"sceneIntensity\", 0.5);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"    effect.setFloat(\"glowIntensity\", 0.4);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"    effect.setFloat(\"highlightIntensity\", 1.0);"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"};"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"```"},{"src":"tutorials/How_to_use_PostProcesses","name":"How to use PostProcesses","text":"You might want to read more about shaders and try our CYOS shader editor [**RIGHT HERE**](http://blogs.msdn.com/b/eternalcoding/archive/2014/04/17/learning-shaders-create-your-own-shaders-with-babylon-js.aspx)."},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"camera_03.attachControl(canvas);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"camera_04.attachControl(canvas);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var standardPipeline = new BABYLON.PostProcessRenderPipeline(engine, \"standardPipeline\");"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var blackAndWhiteEffect = new BABYLON.PostProcessRenderEffect(engine, \"blackAndWhiteEffect\","},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"    function() {return new BABYLON.BlackAndWhitePostProcess(\"bw\", 1.0, null, null, engine, true)});"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var horizontalBlur = new BABYLON.PostProcessRenderEffect(engine, \"horizontalBlurEffect\","},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"    function() { return new BABYLON.BlurPostProcess(\"hb\", new BABYLON.Vector2(1.0, 0), 10, 1.0, null, null, engine, true) });"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"var verticalBlur = new BABYLON.PostProcessRenderEffect(engine, \"verticalBlurEffect\","},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"    function() { return new BABYLON.BlurPostProcess(\"vb\", new BABYLON.Vector2(0, 1.0), 10, 1.0, null, null, engine, true) });"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"standardPipeline.addEffect(blackAndWhiteEffect);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"standardPipeline.addEffect(horizontalBlur);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"standardPipeline.addEffect(verticalBlur);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.postProcessRenderPipelineManager.addPipeline(standardPipeline);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(\"standardPipeline\", camera_01);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(\"standardPipeline\", camera_02);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(\"standardPipeline\", camera_03);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(\"standardPipeline\", camera_04);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.postProcessRenderPipelineManager.disableEffectInPipeline(\"standardPipeline\", \"blackAndWhiteEffect\", camera_01);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.postProcessRenderPipelineManager.disableEffectInPipeline(\"standardPipeline\", \"blackAndWhiteEffect\", camera_02);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.postProcessRenderPipelineManager.disableEffectInPipeline(\"standardPipeline\", \"horizontalBlurEffect\", camera_02);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.postProcessRenderPipelineManager.disableEffectInPipeline(\"standardPipeline\", \"verticalBlurEffect\", camera_02);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.postProcessRenderPipelineManager.disableEffectInPipeline(\"standardPipeline\", \"horizontalBlurEffect\", camera_03);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"scene.postProcessRenderPipelineManager.disableEffectInPipeline(\"standardPipeline\", \"verticalBlurEffect\", camera_03);"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"//Render Loop"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"engine.runRenderLoop(function () {"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"    scene.render();"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"});"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"```"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"     \"animate\": false,"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"     \"refreshrate\": 0,"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"     \"uniforms\": ["},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"      {"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"          \"type\": \"float\","},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"          \"name\": \"dirtAmplifier\","},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"          \"value\": \"6.0\""},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"      }"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"  ],"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"     \"sampler2Ds\": ["},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"      {"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"          \"sample2Dname\": \"dirt\","},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"          \"textureRelativeUrl\": \"textures/dirt.jpg\""},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"      },"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"      {"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"          \"sample2Dname\": \"grass\","},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"          \"textureRelativeUrl\": \"textures/grass.png\""},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"      }"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"     ]"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    }"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"The **animate** property indicates if a time value should be created and increased each time the fragment shader code is executed."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"The **refreshrate** property is set to 0 if you want the texture to only render once. If set to 1, it will render every frame, 2 every two frames, etc."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"**Uniforms** are the values that will be passed from the javascript code to the shader code. By setting them that way, you can allow the custom texture user to modify this value at runtime... to customize the texture. "},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"Uniforms can be of type:"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":" "},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- **float** (parameters : value)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- **Vector2** (parameters: x, y)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- **Vector3** (parameters: x, y, z)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- **Color3** (parameters: r, g, b)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"- **Color4** (parameters: r, g, b, a)"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"**Textures2D** are 2D image files that are passed to the shader code as **sampler2D** variables. They can be read by the shader code and be used to create the final pixel color. You only need to provide a name and the relative path inside the folder."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"The **custom.fragment.fx** file contains the GLSL code. The purpose of this wiki article is not to teach you how to create a fragment shader or how it works. You simply need to know that the code contained in your main function will be called once for each pixel to create on the texture. In this main function, you only know the coordinates of the current pixel in the final texture."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"Here is a simple code which is setting all pixels to a specific gray."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```javascript "},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    #ifdef GL_ES"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    precision highp float;"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    #endif"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    "},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    void main(void) {"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"     vec3 color = vec3(0.9, 0.9, 0.9);"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"     gl_FragColor = vec4(color, 1.0);"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    }"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"Gl_FragColor is the variable in which you put the color object you want the pixel to be."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"Here is a more complex example using 2 samplers and mixing their color equally. "},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```javascript"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    #ifdef GL_ES"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    precision highp float;"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    #endif"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    "},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    varying vec2 vPosition;"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    varying vec2 vUV;"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    "},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    uniform sampler2D grass;"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    uniform sampler2D dirt;"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    "},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    void main(void) {"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"     vec3 color = mix(texture2D(dirt, vUV).xyz, texture2D(grass, vUV).xyz, 0.5);"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"     gl_FragColor = vec4(color, 1.0);"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    }"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"To use this custom texture, you need to make your folder available to your babylon.js html/javascript files and use a **CustomProceduralTexture** class instead of a standard one. The difference is only that you specify a new parameter which is the relative path to the folder containing the custom texture. Babylon.js will automatically read the config.json and custom.fragment.fx files and load everything for you."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```javascript"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"    var texture = new BABYLON.CustomProceduralTexture(\"texture\", \"./pathtotexture\", 1024, scene);"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"1. Global altering function, which is a part of BABYLON.Mesh:"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"<pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"mesh.optimizeIndices(function() {"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"//do whatever you want here"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"});"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"</pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"This option alters(!) the mesh's indices order. It is faster, but might change the UV coordinates of vertices of the mesh. If that is the case, use:"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"2. optimization during simplification - The Simplification Settings now include a new variable : optimizeMesh, which is a boolean that defaults to false. If set to true, a non-altering mesh optimization will run during the mesh's preparation for decimation. The simplification will run on a temporary array of vertices and will correlate the new vertices' positions with the old uv/color information. This is the better option, but also the slower option (will be noticeable with very large meshes like the demo skull - http://www.babylonjs-playground.com/#2JBSNA#4)."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"Check which one of the methods works best for you. Both have their up and down sides, for better results use the 2nd option (set optimizeMesh to true in the settings)."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"#Developing further simplification algorithms"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"If you want to add a new simplification algorithm there are a few steps that are required:"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"1. Create a class that implements the BABYLON.ISimplifier interface (and of course implement the function! :-) )"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"2. Add the type of simplification to the SimplificationType enum"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"3. Add the class init in the mesh.simplify function (the inner function \"getSimplifier\" should contain your type)."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"4. ???"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"5. Profit"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"#Accessing the simplification class directly"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"You can access the quadratic error decimation directly and play with its features. You can do that by creating an object of the class QuadraticErrorSimplification"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"<pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"var decimator = new QuadraticErrorSimplification(meshToDecimate);"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"</pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"Afterwards you can play with the following object variables:"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"1. decimationIterations - max number of iterations of the decimation process. The simplification will (usually) stop before the max number of iterations, but it actually all depends on the next variable. Default : 100."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"2. aggressiveness - The threshold that decides if a triangle is up for a deletion is decided using this variable. Making it to a low value (2, for example) will cause the decimation to be a little slower but more percise in selecting the triangles. Settings it to a high value (15 for example) will probably cause the decimation to end in 1 or 2 iterations, since a lot of triangles will be chosen for deletion. Anyhow once the quality is reached the process stops. The question - did it choose the better triangles to decimate! Default : 7."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"3. syncIterations - the number of synchronous iterations inside the async iterations. Rather hard to explain, but a lower number will hurt the performance less but will make the process take a bit more time. If you need explanations look at the AsyncLoop class in babylon.tools.js or contact @raananw ."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"After setting the variables you run run the simplify function that will start the entire process:"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"<pre>"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"simplify(settings, successCallback);"},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"</pre>"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"var myJSObj3 = {};"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"BABYLON.Tags.EnableFor(myJSObj3);"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"var myJSObj4 = {};"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj4.hasTags(); // TypeError: undefined is not a function"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"BABYLON.Tags.HasTags(myJSObj4); // false"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj3.hasTags(); // false"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"BABYLON.Tags.HasTags(myJSObj3); // false"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj2.hasTags(); // true"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj1.hasTags(); // true"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj1.matchesTagsQuery(\"tag1\"); // true"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj1.matchesTagsQuery(\"tag2\"); // true"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj1.matchesTagsQuery(\"tag1 || tag2\"); // true"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj1.matchesTagsQuery(\"tag1 && tag2\"); // true"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj1.matchesTagsQuery(\"tag3\"); // false"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj1.matchesTagsQuery(\"!tag3\"); // true"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj1.matchesTagsQuery(\"tag1 && tag3\"); // false"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj1.matchesTagsQuery(\"tag1 || tag3\"); // true"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj1.matchesTagsQuery(\"tag1 && !tag3\"); // true"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj1.removeTags(\"tag1\");"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj1.matchesTagsQuery(\"tag1 && !tag3\"); // false"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj2.removeTags(\"tag4 tag3 tag5\");"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj2.hasTags(); // false"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"BABYLON.Tags.DisableFor(myJSObj2);"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj2.hasTags(); // TypeError: undefined is not a function"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj3.matchesTagsQuery(\"\"); // false"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj3.matchesTagsQuery(); // true"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj4.matchesTagsQuery(\"\"); // TypeError: undefined is not a function"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"myJSObj4.matchesTagsQuery(); // TypeError: undefined is not a function"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"BABYLON.Tags.MatchesQuery(myJSObj4, \"\"); // false"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"BABYLON.Tags.MatchesQuery(myJSObj4, undefined); // true"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"BABYLON.Tags.MatchesQuery(myJSObj4); // true"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"### Rules to respect"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"* the tags \"true\" and \"false\" are reserved and cannot be used as tags."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"* a tag cannot start with \"||\", \"&&\", or '!'"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"* a tag cannot contain whitespaces"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"### Use in babylon.js"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"Since it's possible to use tags on any javascript object and since meshes are javascript objects, it's possible to add tags on them and to retrieve them according to a tags query."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```javascript"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"var meshes = myScene.getMeshesByTags(\"tag1 && (tag2 || tag4 || !tag5)) || !(!tag1) && !!!tag5\");"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"All tags added to meshes, cameras, lights... are saved to the scene files (see [.babylon file format](https://github.com/BabylonJS/Babylon.js/wiki/Babylon.js-file-format)) and reloaded from them."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"## What to do with them?"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"It's up to you!"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"You can use them to retrieve all the meshes that should be lighted by the light \"light1\":"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```javascript"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"var meshesToLightByLight1 = myScene.getMeshesByTags(\"mustBeLightedByLight1\");"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"or make some green ghosts appear when you want:"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```javascript"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"var ghosts = myScene.getMeshesByTags(\"ghost && green\");"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"for(var index=0; index < ghosts.length; index++) {"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"    ghosts[index].isVisible = true;"},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"}"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":" - an opacity texture defined"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":" - the opacity Fresnel effect active"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"- In case of another type of material, if the material's `.needAlphaBlending()` function returns `true`"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"**Alpha tested meshes:**"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"- In case of a mesh using StandardMaterial, if it has:"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":" - a diffuse texture with the property `.hasAlpha` set to `true`"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"- In case of another type of material, if the material's `.needAlphaTesting()` function returns `true`"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"**Opaque meshes:**"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"- Any mesh that does not fit into one of the above categories"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"Occasionally, you may have some of your meshes falling into the wrong category, e.g. an alpha tested mesh unnecessarily marked as alpha-blended, or a mesh staying opaque when it shouldn't. This will give you weird glitches, which can sometimes be very annoying. You should refer to this article to check how your meshes and materials properties are set."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"You're welcome to use this [playground example](http://babylonjs-playground.azurewebsites.net/#1PHYB0#6) to experiment on the different things explained here. Pressing F9 will switch between normal render and depth buffer render."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"## Things To Do And Not To Do"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"- Make sure your alpha blended meshes do not intersect, as this will inevitably lead to render glitches."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"- Avoid having heavily stretched alpha blended meshes (i.e. large planes); since the center of its bounding sphere is used for depth sorting, doing this may result in a mesh being sorted as far away from the camera but actually closer to many other meshes."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"- Use alpha test as much as possible; this may look perfect for a pixel art style, or if the transparent parts boundaries are straight horizontal or vertical lines."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"- To get rid of jagged edges on your alpha tested meshes, use anti-aliasing for your scene ([FxaaPostProcess](page.php?p=22431)); when using anti-aliasing, you can even disable the built-in smoothing of WebGL when creating the engine object:"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"`engine = new BABYLON.Engine(canvas, false); // built-in smoothing will be disabled`"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"This may help you with visible seams between meshes & other similar issues."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"- Do not forget to enable backface culling with alpha blended meshes!"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"- Use rendering groups to have better control over the order in which your meshes are displayed. These are especially useful if you know that some meshes will be above others 100% of the time (for example, an overlayed UI drawn on top of the scene)."},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"- A mesh's alphaIndex property can be very useful as well, since they allow you to override the depth sorting of alpha-blended meshes. Also this property does not suffer from the same limitation as Rendering Groups (4 layers at most), and only has an effect on alpha-blended meshes."},{"src":"tutorials/Using_the_Debug_Layer","name":"Using the Debug Layer","text":"Feel free to test it on the [playground](http://www.babylonjs-playground.com/#1IG874)"},{"src":"tutorials/Using_depth-of-field_and_other_lens_effects","name":"Using depth-of-field and other lens effects","text":"Finally, these effects can be pretty intensive on the GPU. A lower blur effect (i.e. smaller blur radius) will be less demanding, so you can try to lower aperture instead of disabling it altogether. Highlight enhancing is also quite intensive, so be sure that this effect contribute to the quality of your render if you have it active."},{"src":"tutorials/Using_the_Volumetric_LightScattering_post-process","name":"Using the Volumetric LightScattering post-process","text":"Have fun !"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  updatePath(path, k);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"  mesh = CreateXXX(null, path, null, ..., null, mesh);"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"});"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"```"},{"src":"tutorials/How_to_use_Actions","name":"How to use Actions","text":"http://www.babylonjs.com/playground/?17"},{"src":"tutorials/How_to_use_PostProcessRenderPipeline","name":"How to use PostProcessRenderPipeline","text":"http://www.babylonjs.com/playground/#21EWA7"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"### Using a ShaderStore for Shader Storage ###"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"You can also use the ShaderStore to write a shader inline and use it in a CustomProceduralTexture."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"This can be done easily using the **BABYLON.Effect.ShaderStore** array : "},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```javascript"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"BABYLON.Effect.ShadersStore[\"LinesPixelShader\"] ="},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"       \"#ifdef GL_ES\\n\" +"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"       \"precision highp float;\\n\" +"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"       \"#endif\\n\\n\" +"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"       \"varying vec2 vUV; \\n\" +"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"       \"void main(void) {\\n\" +"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"       \" gl_FragColor = vec4(vUV.x,vUV.y,-vUV.x, 1.0);\\n\" +"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"       \"}\\n\" +"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"       \"\";"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"Note that your shader name should be suffixed with **PixelShader** as the Procedural Texture shader is always a pixel shader. Babylon.JS will automatically understand it is a pixel shader."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"To use this shader, you just have to create a CustomProceduralTexture and put the name of your shader in the store instead of the path to the files."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```javascript"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"var customProcText = new BABYLON.CustomProceduralTexture(\"customtext\", \"Lines\", 1024, scene);"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"### Using a DOM Element for Shader Storage ###"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"Finally you can also use **DOM Elements** to store your shader. You just have to create a script tag in your HTML file like this:"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```javascript"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"<script type=\"application/pixelShader\" id=\"LinesPixelShader\">"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"        #ifdef GL_ES"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"        precision highp float;"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"        #endif"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"        varying vec2 vUV; "},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"        void main(void) {"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"             gl_FragColor = vec4(vUV.x,vUV.y,-vUV.x, 1.0);"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"        }"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"</script>"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"To use it, you just have to create a simple object containing one property which is named **fragmentElement** and contains the id identifying the script DOM element."},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```javascript"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"var linesShader = { fragmentElement: 'LinesPixelShader' };"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"var customProcText = new BABYLON.CustomProceduralTexture(\"customtext\", linesShader, 1024, scene);"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"```"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"**Note :** when using ShaderStore or DOM Element shader for custom procedural textures : the config.json file is not needed anymore and you can just use setFloat or setVector3 (and so on), and setTexture on the CustomProceduralTexture will give values and Sampler2D to the shader code."},{"src":"tutorials/In-Browser_Mesh_Simplification_(Auto-LOD)","name":"In-Browser Mesh Simplification (Auto-LOD)","text":"See the explanation above to understand what each variable is."},{"src":"tutorials/How_to_use_the_Tags_System","name":"How to use the Tags System","text":"```"},{"src":"tutorials/Transparency_and_How_Meshes_Are_Rendered","name":"Transparency and How Meshes Are Rendered","text":"*(to be expanded)*"},{"src":"tutorials/How_to_dynamically_morph_a_mesh","name":"How to dynamically morph a mesh","text":"_(edition in progress)_"},{"src":"tutorials/How_to_use_Procedural_Textures","name":"How to use Procedural Textures","text":"Feel free to play with this scene... [at our online playground](http://www.babylonjs-playground.com/#24C4KC)."}],"data_ptr":2566,"free_slots":[],"single_data_counter":7698}